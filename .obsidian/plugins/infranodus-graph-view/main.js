/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement2(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef3(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext2(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState7(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef6(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect8(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback3(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement2.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef3;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback3;
        exports.useContext = useContext2;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect8;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef6;
        exports.useState = useState7;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React5 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment6 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment6:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React5.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement3(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
              !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment6) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment6) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment6:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment6:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root2,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment6, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.3.1";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot2(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS({
  "node_modules/react-dom/client.js"(exports) {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports.createRoot = m.createRoot;
      exports.hydrateRoot = m.hydrateRoot;
    } else {
      i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports.createRoot = function(c, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.createRoot(c, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
      exports.hydrateRoot = function(c, h, o) {
        i.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c, h, o);
        } finally {
          i.usingClientEntryPoint = false;
        }
      };
    }
    var i;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React5 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type, props, key, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            {
              if (hasOwnProperty.call(props, "key")) {
                var componentName = getComponentNameFromType(type);
                var keys = Object.keys(props).filter(function(k) {
                  return k !== "key";
                });
                var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                  var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                  error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                  didWarnAboutKeySpread[componentName + beforeExample] = true;
                }
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, true);
          }
        }
        function jsxWithValidationDynamic(type, props, key) {
          {
            return jsxWithValidation(type, props, key, false);
          }
        }
        var jsx14 = jsxWithValidationDynamic;
        var jsxs13 = jsxWithValidationStatic;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.jsx = jsx14;
        exports.jsxs = jsxs13;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// node_modules/marked/lib/marked.cjs
var require_marked = __commonJS({
  "node_modules/marked/lib/marked.cjs"(exports) {
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it)
        return (it = it.call(o)).next.bind(it);
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        return function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function getDefaults() {
      return {
        async: false,
        baseUrl: null,
        breaks: false,
        extensions: null,
        gfm: true,
        headerIds: true,
        headerPrefix: "",
        highlight: null,
        hooks: null,
        langPrefix: "language-",
        mangle: true,
        pedantic: false,
        renderer: null,
        sanitize: false,
        sanitizer: null,
        silent: false,
        smartypants: false,
        tokenizer: null,
        walkTokens: null,
        xhtml: false
      };
    }
    exports.defaults = getDefaults();
    function changeDefaults(newDefaults) {
      exports.defaults = newDefaults;
    }
    var escapeTest = /[&<>"']/;
    var escapeReplace = new RegExp(escapeTest.source, "g");
    var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
    var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
    var escapeReplacements = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var getEscapeReplacement = function getEscapeReplacement2(ch) {
      return escapeReplacements[ch];
    };
    function escape(html, encode) {
      if (encode) {
        if (escapeTest.test(html)) {
          return html.replace(escapeReplace, getEscapeReplacement);
        }
      } else {
        if (escapeTestNoEncode.test(html)) {
          return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
        }
      }
      return html;
    }
    var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
    function unescape(html) {
      return html.replace(unescapeTest, function(_, n) {
        n = n.toLowerCase();
        if (n === "colon")
          return ":";
        if (n.charAt(0) === "#") {
          return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
        }
        return "";
      });
    }
    var caret = /(^|[^\[])\^/g;
    function edit(regex, opt) {
      regex = typeof regex === "string" ? regex : regex.source;
      opt = opt || "";
      var obj = {
        replace: function replace(name, val) {
          val = val.source || val;
          val = val.replace(caret, "$1");
          regex = regex.replace(name, val);
          return obj;
        },
        getRegex: function getRegex() {
          return new RegExp(regex, opt);
        }
      };
      return obj;
    }
    var nonWordAndColonTest = /[^\w:]/g;
    var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
    function cleanUrl(sanitize, base, href) {
      if (sanitize) {
        var prot;
        try {
          prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, "").toLowerCase();
        } catch (e) {
          return null;
        }
        if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
          return null;
        }
      }
      if (base && !originIndependentUrl.test(href)) {
        href = resolveUrl(base, href);
      }
      try {
        href = encodeURI(href).replace(/%25/g, "%");
      } catch (e) {
        return null;
      }
      return href;
    }
    var baseUrls = {};
    var justDomain = /^[^:]+:\/*[^/]*$/;
    var protocol = /^([^:]+:)[\s\S]*$/;
    var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
    function resolveUrl(base, href) {
      if (!baseUrls[" " + base]) {
        if (justDomain.test(base)) {
          baseUrls[" " + base] = base + "/";
        } else {
          baseUrls[" " + base] = rtrim(base, "/", true);
        }
      }
      base = baseUrls[" " + base];
      var relativeBase = base.indexOf(":") === -1;
      if (href.substring(0, 2) === "//") {
        if (relativeBase) {
          return href;
        }
        return base.replace(protocol, "$1") + href;
      } else if (href.charAt(0) === "/") {
        if (relativeBase) {
          return href;
        }
        return base.replace(domain, "$1") + href;
      } else {
        return base + href;
      }
    }
    var noopTest = {
      exec: function noopTest2() {
      }
    };
    function splitCells(tableRow, count) {
      var row = tableRow.replace(/\|/g, function(match, offset, str) {
        var escaped = false, curr = offset;
        while (--curr >= 0 && str[curr] === "\\") {
          escaped = !escaped;
        }
        if (escaped) {
          return "|";
        } else {
          return " |";
        }
      }), cells = row.split(/ \|/);
      var i = 0;
      if (!cells[0].trim()) {
        cells.shift();
      }
      if (cells.length > 0 && !cells[cells.length - 1].trim()) {
        cells.pop();
      }
      if (cells.length > count) {
        cells.splice(count);
      } else {
        while (cells.length < count) {
          cells.push("");
        }
      }
      for (; i < cells.length; i++) {
        cells[i] = cells[i].trim().replace(/\\\|/g, "|");
      }
      return cells;
    }
    function rtrim(str, c, invert) {
      var l = str.length;
      if (l === 0) {
        return "";
      }
      var suffLen = 0;
      while (suffLen < l) {
        var currChar = str.charAt(l - suffLen - 1);
        if (currChar === c && !invert) {
          suffLen++;
        } else if (currChar !== c && invert) {
          suffLen++;
        } else {
          break;
        }
      }
      return str.slice(0, l - suffLen);
    }
    function findClosingBracket(str, b) {
      if (str.indexOf(b[1]) === -1) {
        return -1;
      }
      var l = str.length;
      var level = 0, i = 0;
      for (; i < l; i++) {
        if (str[i] === "\\") {
          i++;
        } else if (str[i] === b[0]) {
          level++;
        } else if (str[i] === b[1]) {
          level--;
          if (level < 0) {
            return i;
          }
        }
      }
      return -1;
    }
    function checkSanitizeDeprecation(opt) {
      if (opt && opt.sanitize && !opt.silent) {
        console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
      }
    }
    function repeatString(pattern, count) {
      if (count < 1) {
        return "";
      }
      var result = "";
      while (count > 1) {
        if (count & 1) {
          result += pattern;
        }
        count >>= 1;
        pattern += pattern;
      }
      return result + pattern;
    }
    function outputLink(cap, link, raw, lexer2) {
      var href = link.href;
      var title = link.title ? escape(link.title) : null;
      var text = cap[1].replace(/\\([\[\]])/g, "$1");
      if (cap[0].charAt(0) !== "!") {
        lexer2.state.inLink = true;
        var token = {
          type: "link",
          raw,
          href,
          title,
          text,
          tokens: lexer2.inlineTokens(text)
        };
        lexer2.state.inLink = false;
        return token;
      }
      return {
        type: "image",
        raw,
        href,
        title,
        text: escape(text)
      };
    }
    function indentCodeCompensation(raw, text) {
      var matchIndentToCode = raw.match(/^(\s+)(?:```)/);
      if (matchIndentToCode === null) {
        return text;
      }
      var indentToCode = matchIndentToCode[1];
      return text.split("\n").map(function(node) {
        var matchIndentInNode = node.match(/^\s+/);
        if (matchIndentInNode === null) {
          return node;
        }
        var indentInNode = matchIndentInNode[0];
        if (indentInNode.length >= indentToCode.length) {
          return node.slice(indentToCode.length);
        }
        return node;
      }).join("\n");
    }
    var Tokenizer = /* @__PURE__ */ function() {
      function Tokenizer2(options2) {
        this.options = options2 || exports.defaults;
      }
      var _proto = Tokenizer2.prototype;
      _proto.space = function space(src) {
        var cap = this.rules.block.newline.exec(src);
        if (cap && cap[0].length > 0) {
          return {
            type: "space",
            raw: cap[0]
          };
        }
      };
      _proto.code = function code(src) {
        var cap = this.rules.block.code.exec(src);
        if (cap) {
          var text = cap[0].replace(/^ {1,4}/gm, "");
          return {
            type: "code",
            raw: cap[0],
            codeBlockStyle: "indented",
            text: !this.options.pedantic ? rtrim(text, "\n") : text
          };
        }
      };
      _proto.fences = function fences(src) {
        var cap = this.rules.block.fences.exec(src);
        if (cap) {
          var raw = cap[0];
          var text = indentCodeCompensation(raw, cap[3] || "");
          return {
            type: "code",
            raw,
            lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
            text
          };
        }
      };
      _proto.heading = function heading(src) {
        var cap = this.rules.block.heading.exec(src);
        if (cap) {
          var text = cap[2].trim();
          if (/#$/.test(text)) {
            var trimmed = rtrim(text, "#");
            if (this.options.pedantic) {
              text = trimmed.trim();
            } else if (!trimmed || / $/.test(trimmed)) {
              text = trimmed.trim();
            }
          }
          return {
            type: "heading",
            raw: cap[0],
            depth: cap[1].length,
            text,
            tokens: this.lexer.inline(text)
          };
        }
      };
      _proto.hr = function hr(src) {
        var cap = this.rules.block.hr.exec(src);
        if (cap) {
          return {
            type: "hr",
            raw: cap[0]
          };
        }
      };
      _proto.blockquote = function blockquote(src) {
        var cap = this.rules.block.blockquote.exec(src);
        if (cap) {
          var text = cap[0].replace(/^ *>[ \t]?/gm, "");
          var top = this.lexer.state.top;
          this.lexer.state.top = true;
          var tokens = this.lexer.blockTokens(text);
          this.lexer.state.top = top;
          return {
            type: "blockquote",
            raw: cap[0],
            tokens,
            text
          };
        }
      };
      _proto.list = function list(src) {
        var cap = this.rules.block.list.exec(src);
        if (cap) {
          var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
          var bull = cap[1].trim();
          var isordered = bull.length > 1;
          var list2 = {
            type: "list",
            raw: "",
            ordered: isordered,
            start: isordered ? +bull.slice(0, -1) : "",
            loose: false,
            items: []
          };
          bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;
          if (this.options.pedantic) {
            bull = isordered ? bull : "[*+-]";
          }
          var itemRegex = new RegExp("^( {0,3}" + bull + ")((?:[	 ][^\\n]*)?(?:\\n|$))");
          while (src) {
            endEarly = false;
            if (!(cap = itemRegex.exec(src))) {
              break;
            }
            if (this.rules.block.hr.test(src)) {
              break;
            }
            raw = cap[0];
            src = src.substring(raw.length);
            line = cap[2].split("\n", 1)[0].replace(/^\t+/, function(t) {
              return " ".repeat(3 * t.length);
            });
            nextLine = src.split("\n", 1)[0];
            if (this.options.pedantic) {
              indent = 2;
              itemContents = line.trimLeft();
            } else {
              indent = cap[2].search(/[^ ]/);
              indent = indent > 4 ? 1 : indent;
              itemContents = line.slice(indent);
              indent += cap[1].length;
            }
            blankLine = false;
            if (!line && /^ *$/.test(nextLine)) {
              raw += nextLine + "\n";
              src = src.substring(nextLine.length + 1);
              endEarly = true;
            }
            if (!endEarly) {
              var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))");
              var hrRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)");
              var fencesBeginRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:```|~~~)");
              var headingBeginRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}#");
              while (src) {
                rawLine = src.split("\n", 1)[0];
                nextLine = rawLine;
                if (this.options.pedantic) {
                  nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
                }
                if (fencesBeginRegex.test(nextLine)) {
                  break;
                }
                if (headingBeginRegex.test(nextLine)) {
                  break;
                }
                if (nextBulletRegex.test(nextLine)) {
                  break;
                }
                if (hrRegex.test(src)) {
                  break;
                }
                if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
                  itemContents += "\n" + nextLine.slice(indent);
                } else {
                  if (blankLine) {
                    break;
                  }
                  if (line.search(/[^ ]/) >= 4) {
                    break;
                  }
                  if (fencesBeginRegex.test(line)) {
                    break;
                  }
                  if (headingBeginRegex.test(line)) {
                    break;
                  }
                  if (hrRegex.test(line)) {
                    break;
                  }
                  itemContents += "\n" + nextLine;
                }
                if (!blankLine && !nextLine.trim()) {
                  blankLine = true;
                }
                raw += rawLine + "\n";
                src = src.substring(rawLine.length + 1);
                line = nextLine.slice(indent);
              }
            }
            if (!list2.loose) {
              if (endsWithBlankLine) {
                list2.loose = true;
              } else if (/\n *\n *$/.test(raw)) {
                endsWithBlankLine = true;
              }
            }
            if (this.options.gfm) {
              istask = /^\[[ xX]\] /.exec(itemContents);
              if (istask) {
                ischecked = istask[0] !== "[ ] ";
                itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
              }
            }
            list2.items.push({
              type: "list_item",
              raw,
              task: !!istask,
              checked: ischecked,
              loose: false,
              text: itemContents
            });
            list2.raw += raw;
          }
          list2.items[list2.items.length - 1].raw = raw.trimRight();
          list2.items[list2.items.length - 1].text = itemContents.trimRight();
          list2.raw = list2.raw.trimRight();
          var l = list2.items.length;
          for (i = 0; i < l; i++) {
            this.lexer.state.top = false;
            list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);
            if (!list2.loose) {
              var spacers = list2.items[i].tokens.filter(function(t) {
                return t.type === "space";
              });
              var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function(t) {
                return /\n.*\n/.test(t.raw);
              });
              list2.loose = hasMultipleLineBreaks;
            }
          }
          if (list2.loose) {
            for (i = 0; i < l; i++) {
              list2.items[i].loose = true;
            }
          }
          return list2;
        }
      };
      _proto.html = function html(src) {
        var cap = this.rules.block.html.exec(src);
        if (cap) {
          var token = {
            type: "html",
            raw: cap[0],
            pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
            text: cap[0]
          };
          if (this.options.sanitize) {
            var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
            token.type = "paragraph";
            token.text = text;
            token.tokens = this.lexer.inline(text);
          }
          return token;
        }
      };
      _proto.def = function def(src) {
        var cap = this.rules.block.def.exec(src);
        if (cap) {
          var tag = cap[1].toLowerCase().replace(/\s+/g, " ");
          var href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
          var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
          return {
            type: "def",
            tag,
            raw: cap[0],
            href,
            title
          };
        }
      };
      _proto.table = function table(src) {
        var cap = this.rules.block.table.exec(src);
        if (cap) {
          var item = {
            type: "table",
            header: splitCells(cap[1]).map(function(c) {
              return {
                text: c
              };
            }),
            align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
            rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
          };
          if (item.header.length === item.align.length) {
            item.raw = cap[0];
            var l = item.align.length;
            var i, j, k, row;
            for (i = 0; i < l; i++) {
              if (/^ *-+: *$/.test(item.align[i])) {
                item.align[i] = "right";
              } else if (/^ *:-+: *$/.test(item.align[i])) {
                item.align[i] = "center";
              } else if (/^ *:-+ *$/.test(item.align[i])) {
                item.align[i] = "left";
              } else {
                item.align[i] = null;
              }
            }
            l = item.rows.length;
            for (i = 0; i < l; i++) {
              item.rows[i] = splitCells(item.rows[i], item.header.length).map(function(c) {
                return {
                  text: c
                };
              });
            }
            l = item.header.length;
            for (j = 0; j < l; j++) {
              item.header[j].tokens = this.lexer.inline(item.header[j].text);
            }
            l = item.rows.length;
            for (j = 0; j < l; j++) {
              row = item.rows[j];
              for (k = 0; k < row.length; k++) {
                row[k].tokens = this.lexer.inline(row[k].text);
              }
            }
            return item;
          }
        }
      };
      _proto.lheading = function lheading(src) {
        var cap = this.rules.block.lheading.exec(src);
        if (cap) {
          return {
            type: "heading",
            raw: cap[0],
            depth: cap[2].charAt(0) === "=" ? 1 : 2,
            text: cap[1],
            tokens: this.lexer.inline(cap[1])
          };
        }
      };
      _proto.paragraph = function paragraph(src) {
        var cap = this.rules.block.paragraph.exec(src);
        if (cap) {
          var text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
          return {
            type: "paragraph",
            raw: cap[0],
            text,
            tokens: this.lexer.inline(text)
          };
        }
      };
      _proto.text = function text(src) {
        var cap = this.rules.block.text.exec(src);
        if (cap) {
          return {
            type: "text",
            raw: cap[0],
            text: cap[0],
            tokens: this.lexer.inline(cap[0])
          };
        }
      };
      _proto.escape = function escape$1(src) {
        var cap = this.rules.inline.escape.exec(src);
        if (cap) {
          return {
            type: "escape",
            raw: cap[0],
            text: escape(cap[1])
          };
        }
      };
      _proto.tag = function tag(src) {
        var cap = this.rules.inline.tag.exec(src);
        if (cap) {
          if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
            this.lexer.state.inLink = true;
          } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
            this.lexer.state.inLink = false;
          }
          if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
            this.lexer.state.inRawBlock = true;
          } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
            this.lexer.state.inRawBlock = false;
          }
          return {
            type: this.options.sanitize ? "text" : "html",
            raw: cap[0],
            inLink: this.lexer.state.inLink,
            inRawBlock: this.lexer.state.inRawBlock,
            text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
          };
        }
      };
      _proto.link = function link(src) {
        var cap = this.rules.inline.link.exec(src);
        if (cap) {
          var trimmedUrl = cap[2].trim();
          if (!this.options.pedantic && /^</.test(trimmedUrl)) {
            if (!/>$/.test(trimmedUrl)) {
              return;
            }
            var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
            if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
              return;
            }
          } else {
            var lastParenIndex = findClosingBracket(cap[2], "()");
            if (lastParenIndex > -1) {
              var start = cap[0].indexOf("!") === 0 ? 5 : 4;
              var linkLen = start + cap[1].length + lastParenIndex;
              cap[2] = cap[2].substring(0, lastParenIndex);
              cap[0] = cap[0].substring(0, linkLen).trim();
              cap[3] = "";
            }
          }
          var href = cap[2];
          var title = "";
          if (this.options.pedantic) {
            var link2 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
            if (link2) {
              href = link2[1];
              title = link2[3];
            }
          } else {
            title = cap[3] ? cap[3].slice(1, -1) : "";
          }
          href = href.trim();
          if (/^</.test(href)) {
            if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
              href = href.slice(1);
            } else {
              href = href.slice(1, -1);
            }
          }
          return outputLink(cap, {
            href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
            title: title ? title.replace(this.rules.inline._escapes, "$1") : title
          }, cap[0], this.lexer);
        }
      };
      _proto.reflink = function reflink(src, links) {
        var cap;
        if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
          var link = (cap[2] || cap[1]).replace(/\s+/g, " ");
          link = links[link.toLowerCase()];
          if (!link) {
            var text = cap[0].charAt(0);
            return {
              type: "text",
              raw: text,
              text
            };
          }
          return outputLink(cap, link, cap[0], this.lexer);
        }
      };
      _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
        if (prevChar === void 0) {
          prevChar = "";
        }
        var match = this.rules.inline.emStrong.lDelim.exec(src);
        if (!match)
          return;
        if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDF70-\uDF81\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/))
          return;
        var nextChar = match[1] || match[2] || "";
        if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
          var lLength = match[0].length - 1;
          var rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
          var endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
          endReg.lastIndex = 0;
          maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
          while ((match = endReg.exec(maskedSrc)) != null) {
            rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
            if (!rDelim)
              continue;
            rLength = rDelim.length;
            if (match[3] || match[4]) {
              delimTotal += rLength;
              continue;
            } else if (match[5] || match[6]) {
              if (lLength % 3 && !((lLength + rLength) % 3)) {
                midDelimTotal += rLength;
                continue;
              }
            }
            delimTotal -= rLength;
            if (delimTotal > 0)
              continue;
            rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
            var raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);
            if (Math.min(lLength, rLength) % 2) {
              var _text = raw.slice(1, -1);
              return {
                type: "em",
                raw,
                text: _text,
                tokens: this.lexer.inlineTokens(_text)
              };
            }
            var text = raw.slice(2, -2);
            return {
              type: "strong",
              raw,
              text,
              tokens: this.lexer.inlineTokens(text)
            };
          }
        }
      };
      _proto.codespan = function codespan(src) {
        var cap = this.rules.inline.code.exec(src);
        if (cap) {
          var text = cap[2].replace(/\n/g, " ");
          var hasNonSpaceChars = /[^ ]/.test(text);
          var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
          if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
            text = text.substring(1, text.length - 1);
          }
          text = escape(text, true);
          return {
            type: "codespan",
            raw: cap[0],
            text
          };
        }
      };
      _proto.br = function br(src) {
        var cap = this.rules.inline.br.exec(src);
        if (cap) {
          return {
            type: "br",
            raw: cap[0]
          };
        }
      };
      _proto.del = function del(src) {
        var cap = this.rules.inline.del.exec(src);
        if (cap) {
          return {
            type: "del",
            raw: cap[0],
            text: cap[2],
            tokens: this.lexer.inlineTokens(cap[2])
          };
        }
      };
      _proto.autolink = function autolink(src, mangle2) {
        var cap = this.rules.inline.autolink.exec(src);
        if (cap) {
          var text, href;
          if (cap[2] === "@") {
            text = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);
            href = "mailto:" + text;
          } else {
            text = escape(cap[1]);
            href = text;
          }
          return {
            type: "link",
            raw: cap[0],
            text,
            href,
            tokens: [{
              type: "text",
              raw: text,
              text
            }]
          };
        }
      };
      _proto.url = function url(src, mangle2) {
        var cap;
        if (cap = this.rules.inline.url.exec(src)) {
          var text, href;
          if (cap[2] === "@") {
            text = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);
            href = "mailto:" + text;
          } else {
            var prevCapZero;
            do {
              prevCapZero = cap[0];
              cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
            } while (prevCapZero !== cap[0]);
            text = escape(cap[0]);
            if (cap[1] === "www.") {
              href = "http://" + cap[0];
            } else {
              href = cap[0];
            }
          }
          return {
            type: "link",
            raw: cap[0],
            text,
            href,
            tokens: [{
              type: "text",
              raw: text,
              text
            }]
          };
        }
      };
      _proto.inlineText = function inlineText(src, smartypants2) {
        var cap = this.rules.inline.text.exec(src);
        if (cap) {
          var text;
          if (this.lexer.state.inRawBlock) {
            text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
          } else {
            text = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
          }
          return {
            type: "text",
            raw: cap[0],
            text
          };
        }
      };
      return Tokenizer2;
    }();
    var block = {
      newline: /^(?: *(?:\n|$))+/,
      code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
      fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
      hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
      heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
      blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
      list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
      html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
      def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
      table: noopTest,
      lheading: /^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
      // regex template, placeholders will be replaced according to different paragraph
      // interruption rules of commonmark and the original markdown spec:
      _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
      text: /^[^\n]+/
    };
    block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
    block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
    block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
    block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
    block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
    block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
    block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
    block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
    block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
    block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
    block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
    block.normal = _extends({}, block);
    block.gfm = _extends({}, block.normal, {
      table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
      // Cells
    });
    block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
    block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
    block.pedantic = _extends({}, block.normal, {
      html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
      heading: /^(#{1,6})(.*)(?:\n+|$)/,
      fences: noopTest,
      // fences not supported
      lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
      paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
    });
    var inline = {
      escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
      autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
      url: noopTest,
      tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
      // CDATA section
      link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
      reflink: /^!?\[(label)\]\[(ref)\]/,
      nolink: /^!?\[(ref)\](?:\[\])?/,
      reflinkSearch: "reflink|nolink(?!\\()",
      emStrong: {
        lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
        //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
        //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
        rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
        rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
        // ^- Not allowed for _
      },
      code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
      br: /^( {2,}|\\)\n(?!\s*$)/,
      del: noopTest,
      text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
      punctuation: /^([\spunctuation])/
    };
    inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
    inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
    inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
    inline.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
    inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
    inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
    inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
    inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
    inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
    inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
    inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
    inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
    inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
    inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
    inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
    inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
    inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
    inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
    inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
    inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
    inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
    inline.normal = _extends({}, inline);
    inline.pedantic = _extends({}, inline.normal, {
      strong: {
        start: /^__|\*\*/,
        middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
        endAst: /\*\*(?!\*)/g,
        endUnd: /__(?!_)/g
      },
      em: {
        start: /^_|\*/,
        middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
        endAst: /\*(?!\*)/g,
        endUnd: /_(?!_)/g
      },
      link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
      reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
    });
    inline.gfm = _extends({}, inline.normal, {
      escape: edit(inline.escape).replace("])", "~|])").getRegex(),
      _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
      url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
      _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
      del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
      text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
    });
    inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
    inline.breaks = _extends({}, inline.gfm, {
      br: edit(inline.br).replace("{2,}", "*").getRegex(),
      text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
    });
    function smartypants(text) {
      return text.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
    }
    function mangle(text) {
      var out = "", i, ch;
      var l = text.length;
      for (i = 0; i < l; i++) {
        ch = text.charCodeAt(i);
        if (Math.random() > 0.5) {
          ch = "x" + ch.toString(16);
        }
        out += "&#" + ch + ";";
      }
      return out;
    }
    var Lexer = /* @__PURE__ */ function() {
      function Lexer2(options2) {
        this.tokens = [];
        this.tokens.links = /* @__PURE__ */ Object.create(null);
        this.options = options2 || exports.defaults;
        this.options.tokenizer = this.options.tokenizer || new Tokenizer();
        this.tokenizer = this.options.tokenizer;
        this.tokenizer.options = this.options;
        this.tokenizer.lexer = this;
        this.inlineQueue = [];
        this.state = {
          inLink: false,
          inRawBlock: false,
          top: true
        };
        var rules = {
          block: block.normal,
          inline: inline.normal
        };
        if (this.options.pedantic) {
          rules.block = block.pedantic;
          rules.inline = inline.pedantic;
        } else if (this.options.gfm) {
          rules.block = block.gfm;
          if (this.options.breaks) {
            rules.inline = inline.breaks;
          } else {
            rules.inline = inline.gfm;
          }
        }
        this.tokenizer.rules = rules;
      }
      Lexer2.lex = function lex(src, options2) {
        var lexer2 = new Lexer2(options2);
        return lexer2.lex(src);
      };
      Lexer2.lexInline = function lexInline(src, options2) {
        var lexer2 = new Lexer2(options2);
        return lexer2.inlineTokens(src);
      };
      var _proto = Lexer2.prototype;
      _proto.lex = function lex(src) {
        src = src.replace(/\r\n|\r/g, "\n");
        this.blockTokens(src, this.tokens);
        var next;
        while (next = this.inlineQueue.shift()) {
          this.inlineTokens(next.src, next.tokens);
        }
        return this.tokens;
      };
      _proto.blockTokens = function blockTokens(src, tokens) {
        var _this = this;
        if (tokens === void 0) {
          tokens = [];
        }
        if (this.options.pedantic) {
          src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
        } else {
          src = src.replace(/^( *)(\t+)/gm, function(_, leading, tabs) {
            return leading + "    ".repeat(tabs.length);
          });
        }
        var token, lastToken, cutSrc, lastParagraphClipped;
        while (src) {
          if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function(extTokenizer) {
            if (token = extTokenizer.call({
              lexer: _this
            }, src, tokens)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              return true;
            }
            return false;
          })) {
            continue;
          }
          if (token = this.tokenizer.space(src)) {
            src = src.substring(token.raw.length);
            if (token.raw.length === 1 && tokens.length > 0) {
              tokens[tokens.length - 1].raw += "\n";
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (token = this.tokenizer.code(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];
            if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
              lastToken.raw += "\n" + token.raw;
              lastToken.text += "\n" + token.text;
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (token = this.tokenizer.fences(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.heading(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.hr(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.blockquote(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.list(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.html(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.def(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];
            if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
              lastToken.raw += "\n" + token.raw;
              lastToken.text += "\n" + token.raw;
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else if (!this.tokens.links[token.tag]) {
              this.tokens.links[token.tag] = {
                href: token.href,
                title: token.title
              };
            }
            continue;
          }
          if (token = this.tokenizer.table(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.lheading(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          cutSrc = src;
          if (this.options.extensions && this.options.extensions.startBlock) {
            (function() {
              var startIndex = Infinity;
              var tempSrc = src.slice(1);
              var tempStart = void 0;
              _this.options.extensions.startBlock.forEach(function(getStartIndex) {
                tempStart = getStartIndex.call({
                  lexer: this
                }, tempSrc);
                if (typeof tempStart === "number" && tempStart >= 0) {
                  startIndex = Math.min(startIndex, tempStart);
                }
              });
              if (startIndex < Infinity && startIndex >= 0) {
                cutSrc = src.substring(0, startIndex + 1);
              }
            })();
          }
          if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
            lastToken = tokens[tokens.length - 1];
            if (lastParagraphClipped && lastToken.type === "paragraph") {
              lastToken.raw += "\n" + token.raw;
              lastToken.text += "\n" + token.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }
            lastParagraphClipped = cutSrc.length !== src.length;
            src = src.substring(token.raw.length);
            continue;
          }
          if (token = this.tokenizer.text(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];
            if (lastToken && lastToken.type === "text") {
              lastToken.raw += "\n" + token.raw;
              lastToken.text += "\n" + token.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (src) {
            var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
            if (this.options.silent) {
              console.error(errMsg);
              break;
            } else {
              throw new Error(errMsg);
            }
          }
        }
        this.state.top = true;
        return tokens;
      };
      _proto.inline = function inline2(src, tokens) {
        if (tokens === void 0) {
          tokens = [];
        }
        this.inlineQueue.push({
          src,
          tokens
        });
        return tokens;
      };
      _proto.inlineTokens = function inlineTokens(src, tokens) {
        var _this2 = this;
        if (tokens === void 0) {
          tokens = [];
        }
        var token, lastToken, cutSrc;
        var maskedSrc = src;
        var match;
        var keepPrevChar, prevChar;
        if (this.tokens.links) {
          var links = Object.keys(this.tokens.links);
          if (links.length > 0) {
            while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
              if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
                maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
              }
            }
          }
        }
        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
          maskedSrc = maskedSrc.slice(0, match.index) + "[" + repeatString("a", match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
        }
        while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
          maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
          this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
        }
        while (src) {
          if (!keepPrevChar) {
            prevChar = "";
          }
          keepPrevChar = false;
          if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function(extTokenizer) {
            if (token = extTokenizer.call({
              lexer: _this2
            }, src, tokens)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              return true;
            }
            return false;
          })) {
            continue;
          }
          if (token = this.tokenizer.escape(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.tag(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];
            if (lastToken && token.type === "text" && lastToken.type === "text") {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (token = this.tokenizer.link(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.reflink(src, this.tokens.links)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];
            if (lastToken && token.type === "text" && lastToken.type === "text") {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.codespan(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.br(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.del(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (token = this.tokenizer.autolink(src, mangle)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          }
          cutSrc = src;
          if (this.options.extensions && this.options.extensions.startInline) {
            (function() {
              var startIndex = Infinity;
              var tempSrc = src.slice(1);
              var tempStart = void 0;
              _this2.options.extensions.startInline.forEach(function(getStartIndex) {
                tempStart = getStartIndex.call({
                  lexer: this
                }, tempSrc);
                if (typeof tempStart === "number" && tempStart >= 0) {
                  startIndex = Math.min(startIndex, tempStart);
                }
              });
              if (startIndex < Infinity && startIndex >= 0) {
                cutSrc = src.substring(0, startIndex + 1);
              }
            })();
          }
          if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
            src = src.substring(token.raw.length);
            if (token.raw.slice(-1) !== "_") {
              prevChar = token.raw.slice(-1);
            }
            keepPrevChar = true;
            lastToken = tokens[tokens.length - 1];
            if (lastToken && lastToken.type === "text") {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }
            continue;
          }
          if (src) {
            var errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
            if (this.options.silent) {
              console.error(errMsg);
              break;
            } else {
              throw new Error(errMsg);
            }
          }
        }
        return tokens;
      };
      _createClass(Lexer2, null, [{
        key: "rules",
        get: function get() {
          return {
            block,
            inline
          };
        }
      }]);
      return Lexer2;
    }();
    var Renderer = /* @__PURE__ */ function() {
      function Renderer2(options2) {
        this.options = options2 || exports.defaults;
      }
      var _proto = Renderer2.prototype;
      _proto.code = function code(_code, infostring, escaped) {
        var lang = (infostring || "").match(/\S*/)[0];
        if (this.options.highlight) {
          var out = this.options.highlight(_code, lang);
          if (out != null && out !== _code) {
            escaped = true;
            _code = out;
          }
        }
        _code = _code.replace(/\n$/, "") + "\n";
        if (!lang) {
          return "<pre><code>" + (escaped ? _code : escape(_code, true)) + "</code></pre>\n";
        }
        return '<pre><code class="' + this.options.langPrefix + escape(lang) + '">' + (escaped ? _code : escape(_code, true)) + "</code></pre>\n";
      };
      _proto.blockquote = function blockquote(quote) {
        return "<blockquote>\n" + quote + "</blockquote>\n";
      };
      _proto.html = function html(_html) {
        return _html;
      };
      _proto.heading = function heading(text, level, raw, slugger) {
        if (this.options.headerIds) {
          var id = this.options.headerPrefix + slugger.slug(raw);
          return "<h" + level + ' id="' + id + '">' + text + "</h" + level + ">\n";
        }
        return "<h" + level + ">" + text + "</h" + level + ">\n";
      };
      _proto.hr = function hr() {
        return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
      };
      _proto.list = function list(body, ordered, start) {
        var type = ordered ? "ol" : "ul", startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
        return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
      };
      _proto.listitem = function listitem(text) {
        return "<li>" + text + "</li>\n";
      };
      _proto.checkbox = function checkbox(checked) {
        return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
      };
      _proto.paragraph = function paragraph(text) {
        return "<p>" + text + "</p>\n";
      };
      _proto.table = function table(header, body) {
        if (body)
          body = "<tbody>" + body + "</tbody>";
        return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
      };
      _proto.tablerow = function tablerow(content) {
        return "<tr>\n" + content + "</tr>\n";
      };
      _proto.tablecell = function tablecell(content, flags) {
        var type = flags.header ? "th" : "td";
        var tag = flags.align ? "<" + type + ' align="' + flags.align + '">' : "<" + type + ">";
        return tag + content + ("</" + type + ">\n");
      };
      _proto.strong = function strong(text) {
        return "<strong>" + text + "</strong>";
      };
      _proto.em = function em(text) {
        return "<em>" + text + "</em>";
      };
      _proto.codespan = function codespan(text) {
        return "<code>" + text + "</code>";
      };
      _proto.br = function br() {
        return this.options.xhtml ? "<br/>" : "<br>";
      };
      _proto.del = function del(text) {
        return "<del>" + text + "</del>";
      };
      _proto.link = function link(href, title, text) {
        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
        if (href === null) {
          return text;
        }
        var out = '<a href="' + href + '"';
        if (title) {
          out += ' title="' + title + '"';
        }
        out += ">" + text + "</a>";
        return out;
      };
      _proto.image = function image(href, title, text) {
        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
        if (href === null) {
          return text;
        }
        var out = '<img src="' + href + '" alt="' + text + '"';
        if (title) {
          out += ' title="' + title + '"';
        }
        out += this.options.xhtml ? "/>" : ">";
        return out;
      };
      _proto.text = function text(_text) {
        return _text;
      };
      return Renderer2;
    }();
    var TextRenderer = /* @__PURE__ */ function() {
      function TextRenderer2() {
      }
      var _proto = TextRenderer2.prototype;
      _proto.strong = function strong(text) {
        return text;
      };
      _proto.em = function em(text) {
        return text;
      };
      _proto.codespan = function codespan(text) {
        return text;
      };
      _proto.del = function del(text) {
        return text;
      };
      _proto.html = function html(text) {
        return text;
      };
      _proto.text = function text(_text) {
        return _text;
      };
      _proto.link = function link(href, title, text) {
        return "" + text;
      };
      _proto.image = function image(href, title, text) {
        return "" + text;
      };
      _proto.br = function br() {
        return "";
      };
      return TextRenderer2;
    }();
    var Slugger = /* @__PURE__ */ function() {
      function Slugger2() {
        this.seen = {};
      }
      var _proto = Slugger2.prototype;
      _proto.serialize = function serialize(value) {
        return value.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
      };
      _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
        var slug = originalSlug;
        var occurenceAccumulator = 0;
        if (this.seen.hasOwnProperty(slug)) {
          occurenceAccumulator = this.seen[originalSlug];
          do {
            occurenceAccumulator++;
            slug = originalSlug + "-" + occurenceAccumulator;
          } while (this.seen.hasOwnProperty(slug));
        }
        if (!isDryRun) {
          this.seen[originalSlug] = occurenceAccumulator;
          this.seen[slug] = 0;
        }
        return slug;
      };
      _proto.slug = function slug(value, options2) {
        if (options2 === void 0) {
          options2 = {};
        }
        var slug2 = this.serialize(value);
        return this.getNextSafeSlug(slug2, options2.dryrun);
      };
      return Slugger2;
    }();
    var Parser = /* @__PURE__ */ function() {
      function Parser2(options2) {
        this.options = options2 || exports.defaults;
        this.options.renderer = this.options.renderer || new Renderer();
        this.renderer = this.options.renderer;
        this.renderer.options = this.options;
        this.textRenderer = new TextRenderer();
        this.slugger = new Slugger();
      }
      Parser2.parse = function parse2(tokens, options2) {
        var parser2 = new Parser2(options2);
        return parser2.parse(tokens);
      };
      Parser2.parseInline = function parseInline2(tokens, options2) {
        var parser2 = new Parser2(options2);
        return parser2.parseInline(tokens);
      };
      var _proto = Parser2.prototype;
      _proto.parse = function parse2(tokens, top) {
        if (top === void 0) {
          top = true;
        }
        var out = "", i, j, k, l2, l3, row, cell, header, body, token, ordered, start, loose, itemBody, item, checked, task, checkbox, ret;
        var l = tokens.length;
        for (i = 0; i < l; i++) {
          token = tokens[i];
          if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
            ret = this.options.extensions.renderers[token.type].call({
              parser: this
            }, token);
            if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token.type)) {
              out += ret || "";
              continue;
            }
          }
          switch (token.type) {
            case "space": {
              continue;
            }
            case "hr": {
              out += this.renderer.hr();
              continue;
            }
            case "heading": {
              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
              continue;
            }
            case "code": {
              out += this.renderer.code(token.text, token.lang, token.escaped);
              continue;
            }
            case "table": {
              header = "";
              cell = "";
              l2 = token.header.length;
              for (j = 0; j < l2; j++) {
                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                  header: true,
                  align: token.align[j]
                });
              }
              header += this.renderer.tablerow(cell);
              body = "";
              l2 = token.rows.length;
              for (j = 0; j < l2; j++) {
                row = token.rows[j];
                cell = "";
                l3 = row.length;
                for (k = 0; k < l3; k++) {
                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                    header: false,
                    align: token.align[k]
                  });
                }
                body += this.renderer.tablerow(cell);
              }
              out += this.renderer.table(header, body);
              continue;
            }
            case "blockquote": {
              body = this.parse(token.tokens);
              out += this.renderer.blockquote(body);
              continue;
            }
            case "list": {
              ordered = token.ordered;
              start = token.start;
              loose = token.loose;
              l2 = token.items.length;
              body = "";
              for (j = 0; j < l2; j++) {
                item = token.items[j];
                checked = item.checked;
                task = item.task;
                itemBody = "";
                if (item.task) {
                  checkbox = this.renderer.checkbox(checked);
                  if (loose) {
                    if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                      item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                        item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                      }
                    } else {
                      item.tokens.unshift({
                        type: "text",
                        text: checkbox
                      });
                    }
                  } else {
                    itemBody += checkbox;
                  }
                }
                itemBody += this.parse(item.tokens, loose);
                body += this.renderer.listitem(itemBody, task, checked);
              }
              out += this.renderer.list(body, ordered, start);
              continue;
            }
            case "html": {
              out += this.renderer.html(token.text);
              continue;
            }
            case "paragraph": {
              out += this.renderer.paragraph(this.parseInline(token.tokens));
              continue;
            }
            case "text": {
              body = token.tokens ? this.parseInline(token.tokens) : token.text;
              while (i + 1 < l && tokens[i + 1].type === "text") {
                token = tokens[++i];
                body += "\n" + (token.tokens ? this.parseInline(token.tokens) : token.text);
              }
              out += top ? this.renderer.paragraph(body) : body;
              continue;
            }
            default: {
              var errMsg = 'Token with "' + token.type + '" type was not found.';
              if (this.options.silent) {
                console.error(errMsg);
                return;
              } else {
                throw new Error(errMsg);
              }
            }
          }
        }
        return out;
      };
      _proto.parseInline = function parseInline2(tokens, renderer) {
        renderer = renderer || this.renderer;
        var out = "", i, token, ret;
        var l = tokens.length;
        for (i = 0; i < l; i++) {
          token = tokens[i];
          if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
            ret = this.options.extensions.renderers[token.type].call({
              parser: this
            }, token);
            if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
              out += ret || "";
              continue;
            }
          }
          switch (token.type) {
            case "escape": {
              out += renderer.text(token.text);
              break;
            }
            case "html": {
              out += renderer.html(token.text);
              break;
            }
            case "link": {
              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
              break;
            }
            case "image": {
              out += renderer.image(token.href, token.title, token.text);
              break;
            }
            case "strong": {
              out += renderer.strong(this.parseInline(token.tokens, renderer));
              break;
            }
            case "em": {
              out += renderer.em(this.parseInline(token.tokens, renderer));
              break;
            }
            case "codespan": {
              out += renderer.codespan(token.text);
              break;
            }
            case "br": {
              out += renderer.br();
              break;
            }
            case "del": {
              out += renderer.del(this.parseInline(token.tokens, renderer));
              break;
            }
            case "text": {
              out += renderer.text(token.text);
              break;
            }
            default: {
              var errMsg = 'Token with "' + token.type + '" type was not found.';
              if (this.options.silent) {
                console.error(errMsg);
                return;
              } else {
                throw new Error(errMsg);
              }
            }
          }
        }
        return out;
      };
      return Parser2;
    }();
    var Hooks = /* @__PURE__ */ function() {
      function Hooks2(options2) {
        this.options = options2 || exports.defaults;
      }
      var _proto = Hooks2.prototype;
      _proto.preprocess = function preprocess(markdown) {
        return markdown;
      };
      _proto.postprocess = function postprocess(html) {
        return html;
      };
      return Hooks2;
    }();
    Hooks.passThroughHooks = /* @__PURE__ */ new Set(["preprocess", "postprocess"]);
    function onError2(silent, async, callback) {
      return function(e) {
        e.message += "\nPlease report this to https://github.com/markedjs/marked.";
        if (silent) {
          var msg = "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
          if (async) {
            return Promise.resolve(msg);
          }
          if (callback) {
            callback(null, msg);
            return;
          }
          return msg;
        }
        if (async) {
          return Promise.reject(e);
        }
        if (callback) {
          callback(e);
          return;
        }
        throw e;
      };
    }
    function parseMarkdown(lexer2, parser2) {
      return function(src, opt, callback) {
        if (typeof opt === "function") {
          callback = opt;
          opt = null;
        }
        var origOpt = _extends({}, opt);
        opt = _extends({}, marked.defaults, origOpt);
        var throwError = onError2(opt.silent, opt.async, callback);
        if (typeof src === "undefined" || src === null) {
          return throwError(new Error("marked(): input parameter is undefined or null"));
        }
        if (typeof src !== "string") {
          return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
        }
        checkSanitizeDeprecation(opt);
        if (opt.hooks) {
          opt.hooks.options = opt;
        }
        if (callback) {
          var highlight = opt.highlight;
          var tokens;
          try {
            if (opt.hooks) {
              src = opt.hooks.preprocess(src);
            }
            tokens = lexer2(src, opt);
          } catch (e) {
            return throwError(e);
          }
          var done = function done2(err) {
            var out;
            if (!err) {
              try {
                if (opt.walkTokens) {
                  marked.walkTokens(tokens, opt.walkTokens);
                }
                out = parser2(tokens, opt);
                if (opt.hooks) {
                  out = opt.hooks.postprocess(out);
                }
              } catch (e) {
                err = e;
              }
            }
            opt.highlight = highlight;
            return err ? throwError(err) : callback(null, out);
          };
          if (!highlight || highlight.length < 3) {
            return done();
          }
          delete opt.highlight;
          if (!tokens.length)
            return done();
          var pending = 0;
          marked.walkTokens(tokens, function(token) {
            if (token.type === "code") {
              pending++;
              setTimeout(function() {
                highlight(token.text, token.lang, function(err, code) {
                  if (err) {
                    return done(err);
                  }
                  if (code != null && code !== token.text) {
                    token.text = code;
                    token.escaped = true;
                  }
                  pending--;
                  if (pending === 0) {
                    done();
                  }
                });
              }, 0);
            }
          });
          if (pending === 0) {
            done();
          }
          return;
        }
        if (opt.async) {
          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function(src2) {
            return lexer2(src2, opt);
          }).then(function(tokens2) {
            return opt.walkTokens ? Promise.all(marked.walkTokens(tokens2, opt.walkTokens)).then(function() {
              return tokens2;
            }) : tokens2;
          }).then(function(tokens2) {
            return parser2(tokens2, opt);
          }).then(function(html2) {
            return opt.hooks ? opt.hooks.postprocess(html2) : html2;
          })["catch"](throwError);
        }
        try {
          if (opt.hooks) {
            src = opt.hooks.preprocess(src);
          }
          var _tokens = lexer2(src, opt);
          if (opt.walkTokens) {
            marked.walkTokens(_tokens, opt.walkTokens);
          }
          var html = parser2(_tokens, opt);
          if (opt.hooks) {
            html = opt.hooks.postprocess(html);
          }
          return html;
        } catch (e) {
          return throwError(e);
        }
      };
    }
    function marked(src, opt, callback) {
      return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);
    }
    marked.options = marked.setOptions = function(opt) {
      marked.defaults = _extends({}, marked.defaults, opt);
      changeDefaults(marked.defaults);
      return marked;
    };
    marked.getDefaults = getDefaults;
    marked.defaults = exports.defaults;
    marked.use = function() {
      var extensions = marked.defaults.extensions || {
        renderers: {},
        childTokens: {}
      };
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      args.forEach(function(pack) {
        var opts = _extends({}, pack);
        opts.async = marked.defaults.async || opts.async || false;
        if (pack.extensions) {
          pack.extensions.forEach(function(ext) {
            if (!ext.name) {
              throw new Error("extension name required");
            }
            if (ext.renderer) {
              var prevRenderer = extensions.renderers[ext.name];
              if (prevRenderer) {
                extensions.renderers[ext.name] = function() {
                  for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args2[_key2] = arguments[_key2];
                  }
                  var ret = ext.renderer.apply(this, args2);
                  if (ret === false) {
                    ret = prevRenderer.apply(this, args2);
                  }
                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }
            if (ext.tokenizer) {
              if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
                throw new Error("extension level must be 'block' or 'inline'");
              }
              if (extensions[ext.level]) {
                extensions[ext.level].unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }
              if (ext.start) {
                if (ext.level === "block") {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === "inline") {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }
            if (ext.childTokens) {
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
          opts.extensions = extensions;
        }
        if (pack.renderer) {
          (function() {
            var renderer = marked.defaults.renderer || new Renderer();
            var _loop = function _loop2(prop2) {
              var prevRenderer = renderer[prop2];
              renderer[prop2] = function() {
                for (var _len3 = arguments.length, args2 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args2[_key3] = arguments[_key3];
                }
                var ret = pack.renderer[prop2].apply(renderer, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(renderer, args2);
                }
                return ret;
              };
            };
            for (var prop in pack.renderer) {
              _loop(prop);
            }
            opts.renderer = renderer;
          })();
        }
        if (pack.tokenizer) {
          (function() {
            var tokenizer = marked.defaults.tokenizer || new Tokenizer();
            var _loop2 = function _loop22(prop2) {
              var prevTokenizer = tokenizer[prop2];
              tokenizer[prop2] = function() {
                for (var _len4 = arguments.length, args2 = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                  args2[_key4] = arguments[_key4];
                }
                var ret = pack.tokenizer[prop2].apply(tokenizer, args2);
                if (ret === false) {
                  ret = prevTokenizer.apply(tokenizer, args2);
                }
                return ret;
              };
            };
            for (var prop in pack.tokenizer) {
              _loop2(prop);
            }
            opts.tokenizer = tokenizer;
          })();
        }
        if (pack.hooks) {
          (function() {
            var hooks = marked.defaults.hooks || new Hooks();
            var _loop3 = function _loop32(prop2) {
              var prevHook = hooks[prop2];
              if (Hooks.passThroughHooks.has(prop2)) {
                hooks[prop2] = function(arg) {
                  if (marked.defaults.async) {
                    return Promise.resolve(pack.hooks[prop2].call(hooks, arg)).then(function(ret2) {
                      return prevHook.call(hooks, ret2);
                    });
                  }
                  var ret = pack.hooks[prop2].call(hooks, arg);
                  return prevHook.call(hooks, ret);
                };
              } else {
                hooks[prop2] = function() {
                  for (var _len5 = arguments.length, args2 = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                    args2[_key5] = arguments[_key5];
                  }
                  var ret = pack.hooks[prop2].apply(hooks, args2);
                  if (ret === false) {
                    ret = prevHook.apply(hooks, args2);
                  }
                  return ret;
                };
              }
            };
            for (var prop in pack.hooks) {
              _loop3(prop);
            }
            opts.hooks = hooks;
          })();
        }
        if (pack.walkTokens) {
          var _walkTokens = marked.defaults.walkTokens;
          opts.walkTokens = function(token) {
            var values = [];
            values.push(pack.walkTokens.call(this, token));
            if (_walkTokens) {
              values = values.concat(_walkTokens.call(this, token));
            }
            return values;
          };
        }
        marked.setOptions(opts);
      });
    };
    marked.walkTokens = function(tokens, callback) {
      var values = [];
      var _loop4 = function _loop42() {
        var token = _step.value;
        values = values.concat(callback.call(marked, token));
        switch (token.type) {
          case "table": {
            for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done; ) {
              var cell = _step2.value;
              values = values.concat(marked.walkTokens(cell.tokens, callback));
            }
            for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done; ) {
              var row = _step3.value;
              for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done; ) {
                var _cell = _step4.value;
                values = values.concat(marked.walkTokens(_cell.tokens, callback));
              }
            }
            break;
          }
          case "list": {
            values = values.concat(marked.walkTokens(token.items, callback));
            break;
          }
          default: {
            if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
              marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
                values = values.concat(marked.walkTokens(token[childTokens], callback));
              });
            } else if (token.tokens) {
              values = values.concat(marked.walkTokens(token.tokens, callback));
            }
          }
        }
      };
      for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done; ) {
        _loop4();
      }
      return values;
    };
    marked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);
    marked.Parser = Parser;
    marked.parser = Parser.parse;
    marked.Renderer = Renderer;
    marked.TextRenderer = TextRenderer;
    marked.Lexer = Lexer;
    marked.lexer = Lexer.lex;
    marked.Tokenizer = Tokenizer;
    marked.Slugger = Slugger;
    marked.Hooks = Hooks;
    marked.parse = marked;
    var options = marked.options;
    var setOptions = marked.setOptions;
    var use = marked.use;
    var walkTokens = marked.walkTokens;
    var parseInline = marked.parseInline;
    var parse = marked;
    var parser = Parser.parse;
    var lexer = Lexer.lex;
    exports.Hooks = Hooks;
    exports.Lexer = Lexer;
    exports.Parser = Parser;
    exports.Renderer = Renderer;
    exports.Slugger = Slugger;
    exports.TextRenderer = TextRenderer;
    exports.Tokenizer = Tokenizer;
    exports.getDefaults = getDefaults;
    exports.lexer = lexer;
    exports.marked = marked;
    exports.options = options;
    exports.parse = parse;
    exports.parseInline = parseInline;
    exports.parser = parser;
    exports.setOptions = setOptions;
    exports.use = use;
    exports.walkTokens = walkTokens;
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _ = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function() {
          return _;
        });
      } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(exports);
  }
});

// node_modules/markdown-to-txt/dist/markdown-to-txt.js
var require_markdown_to_txt = __commonJS({
  "node_modules/markdown-to-txt/dist/markdown-to-txt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.markdownToTxt = void 0;
    var marked_1 = require_marked();
    var lodash_1 = require_lodash();
    var block = (text) => text + "\n\n";
    var escapeBlock = (text) => (0, lodash_1.escape)(text) + "\n\n";
    var line = (text) => text + "\n";
    var inline = (text) => text;
    var newline = () => "\n";
    var empty = () => "";
    var TxtRenderer = {
      // Block elements
      code: escapeBlock,
      blockquote: block,
      html: empty,
      heading: block,
      hr: newline,
      list: (text) => block(text.trim()),
      listitem: line,
      checkbox: empty,
      paragraph: block,
      table: (header, body) => line(header + body),
      tablerow: (text) => line(text.trim()),
      tablecell: (text) => text + " ",
      // Inline elements
      strong: inline,
      em: inline,
      codespan: inline,
      br: newline,
      del: inline,
      link: (_0, _1, text) => text,
      image: (_0, _1, text) => text,
      text: inline,
      // etc.
      options: {}
    };
    function markdownToTxt2(markdown, options) {
      const unmarked = (0, marked_1.marked)(markdown, Object.assign(Object.assign({}, options), { renderer: TxtRenderer }));
      const unescaped = (0, lodash_1.unescape)(unmarked);
      const trimmed = unescaped.trim();
      return trimmed;
    }
    exports.markdownToTxt = markdownToTxt2;
    exports.default = markdownToTxt2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  LEAF_VIEW_BUTTON_CLASS: () => LEAF_VIEW_BUTTON_CLASS,
  default: () => InfraNodusPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian18 = require("obsidian");

// src/settings/settingsTab.ts
var import_obsidian = require("obsidian");

// src/settings/index.ts
var SETTINGS = {
  INFRANODUS_API_KEY: "",
  AI_MODEL: "gpt-4o-mini",
  SINGLE_PAGE_GRAPH_PROCESSING: "[[Wiki Links]] and Concepts",
  MULTI_PAGE_GRAPH_PROCESSING: "[[Wiki Links]] Only",
  COLOR_SCHEME: "auto",
  LINK_PAGE_TO_MENTIONS: "paragraph",
  INCLUDE_LINKED_MENTIONS: "For empty pages only",
  INCLUDE_UNLINKED_MENTIONS: "For empty pages only",
  USE_OWN_UNLINKED_SEARCH: "no",
  DEFAULT_GRAPH_MODE: "topics",
  RELOADING_GRAPH: "automatic",
  ADD_LINKS: "End of statement",
  EXPORT_TYPE: "manual",
  EXPORT_GRAPH: "from_obsidian_*",
  CONTEXT_NAME: "from_obsidian_ai",
  WHEN_USING_LOCATE: "Do not force to Edit Mode",
  // RELOAD_WHEN_TO_READING: true,
  // Mobile Only
  MOBILE_OPEN_GRAPH_IN: "New tab",
  INFRANODUS_API_URL: "https://infranodus.com",
  INFRANODUS_GRAPH_URL: "https://graph.infranodus.com"
};

// src/settings/settingsTab.ts
var currentPlatform = import_obsidian.Platform.isMobileApp || import_obsidian.Platform.isMobile ? "mobile" : "desktop";
var InfraNodusSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const onChange = (async (key, value) => {
      await this.plugin.saveSettings({ [key]: value });
    }).bind(this);
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("InfraNodus API key").setDesc("Get your API key from InfraNodus > Subscription.").addText((text) => {
      const key = "INFRANODUS_API_KEY";
      text.setPlaceholder("Enter key").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("AI model").setDesc("Choose the AI model to use.").addDropdown((dropdown) => {
      const key = "AI_MODEL";
      dropdown.addOption("gpt-4o-mini", "GPT-4o (faster and shorter)").addOption("gpt-4", "GPT-4 (thoughtful but slower)").addOption("gpt-4o", "GPT-4o (newer and faster)").addOption(
        "gpt-3.5-turbo",
        "GPT-3.5 Turbo (older and weirder)"
      ).setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Link mentions to").setDesc(
      "How to generate the links between the pages mentioned in your document."
    ).addDropdown((dropdown) => {
      const key = "LINK_PAGE_TO_MENTIONS";
      dropdown.addOption(
        "paragraph",
        "each other, if in the same paragraph (default)"
      ).addOption(
        "parent_and_paragraph",
        "to parent page and others in the same paragraph"
      ).addOption(
        "parent_only",
        "to parent page only (Obsidian style)"
      ).setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Single page processing").setDesc(
      "Use [[wiki links]] and concepts for detailed results. Use [[wiki links]] only for sparser graphs."
    ).addDropdown((dropdown) => {
      const key = "SINGLE_PAGE_GRAPH_PROCESSING";
      dropdown.addOption(
        "[[Wiki Links]] and Concepts",
        "[[Wiki Links]] and Concepts"
      ).addOption("[[Wiki Links]] Only", "[[Wiki Links]] Only").addOption(
        "[[Wiki Links]] Prioritized",
        "[[Wiki Links]] Prioritized"
      ).addOption("Concepts only", "Concepts Only").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Multi page processing").setDesc(
      "Use [[wiki links]] only for big folders and vaults. Use [[wiki links]] and concepts for more detail."
    ).addDropdown((dropdown) => {
      const key = "MULTI_PAGE_GRAPH_PROCESSING";
      dropdown.addOption(
        "[[Wiki Links]] and Concepts",
        "[[Wiki Links]] and Concepts"
      ).addOption("[[Wiki Links]] Only", "[[Wiki Links]] Only").addOption(
        "[[Wiki Links]] Prioritized",
        "[[Wiki Links]] Prioritized"
      ).addOption("Concepts only", "Concepts Only").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Color scheme").setDesc("Choose the color scheme to use.").addDropdown((dropdown) => {
      const key = "COLOR_SCHEME";
      dropdown.addOption("auto", "Auto").addOption("light", "Light").addOption("dark", "Dark").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Include linked mentions").setDesc(
      "Including linked mentions helps navigate between ideas better but may be too detailed."
    ).addDropdown((dropdown) => {
      const key = "INCLUDE_LINKED_MENTIONS";
      dropdown.addOption("For empty pages only", "For empty pages only").addOption("For all pages", "For all pages").addOption("Never", "Never").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Include unlinked mentions").setDesc(
      "Including unlinked mentions helps discover new connections but can also be overwhelming."
    ).addDropdown((dropdown) => {
      const key = "INCLUDE_UNLINKED_MENTIONS";
      dropdown.addOption("For empty pages only", "For empty pages only").addOption("For all pages", "For all pages").addOption("Never", "Never").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Improve unlinked search").setDesc("Use aggressive partial matching when searching.").addDropdown((dropdown) => {
      const key = "USE_OWN_UNLINKED_SEARCH";
      dropdown.addOption("no", "No").addOption("yes", "Yes").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Updating graph").setDesc(
      "Set manual if you want the graph to reload only when you click the reload button."
    ).addDropdown((dropdown) => {
      const key = "RELOADING_GRAPH";
      dropdown.addOption("automatic", "Automatic").addOption("manual", "Manual (button)").addOption("into reading", "Entering reading mode").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Default graph layer").setDesc(
      "The default layer the graph should open on when loading the first time."
    ).addDropdown((dropdown) => {
      const key = "DEFAULT_GRAPH_MODE";
      dropdown.addOption("graph", "Graph").addOption("topics", "Topics").addOption("concepts", "Concepts").addOption("gaps", "Gaps").addOption("trends", "Trends").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Export type").setDesc(
      "Use manual export for more control. Automatic export works with big files."
    ).addDropdown((dropdown) => {
      const key = "EXPORT_TYPE";
      dropdown.addOption("manual", "Copy and paste (manual)").addOption("auto", "Automatic").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Export to graph name").setDesc(
      "Name of the graph to export data to, add * for page name, ** for vault name."
    ).addText((text) => {
      const key = "EXPORT_GRAPH";
      text.setPlaceholder("Enter context name").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("Export AI insights to graph name").setDesc(
      "Name of the graph where AI insights are saved, add * for page name, ** for vault name."
    ).addText((text) => {
      const key = "CONTEXT_NAME";
      text.setPlaceholder("Enter context name").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("When using locate").setDesc("Note: Locating works better in the Edit mode.").addDropdown((dropdown) => {
      const key = "WHEN_USING_LOCATE";
      dropdown.addOption(
        "Do not force to Edit Mode",
        "Do not force to Edit Mode"
      ).addOption("Force to Edit Mode", "Force to Edit Mode").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    if (currentPlatform === "mobile") {
      new import_obsidian.Setting(containerEl).setName("Open mobile graph in").setDesc("Choose where to open the graph on mobile.").addDropdown((dropdown) => {
        const key = "MOBILE_OPEN_GRAPH_IN";
        dropdown.addOption("Side view", "Side view").addOption("New tab", "New tab").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
      });
    }
    new import_obsidian.Setting(containerEl).setName("InfraNodus API URL").setDesc(
      "Developer mode. InfraNodus.Com is a default value, do not change."
    ).addDropdown((dropdown) => {
      const key = "INFRANODUS_API_URL";
      dropdown.addOption(
        "https://infranodus.com",
        "https://infranodus.com"
      ).addOption("http://localhost:3000", "http://localhost:3000").setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
    new import_obsidian.Setting(containerEl).setName("InfraNodus Graph URL").setDesc(
      "Developer mode. The default value is graph.infranodus.com, do not change."
    ).addDropdown((dropdown) => {
      const key = "INFRANODUS_GRAPH_URL";
      dropdown.addOption(
        "https://graph.infranodus.com",
        "https://graph.infranodus.com"
      ).addOption(
        "https://localhost:5173",
        "https://localhost:5173"
      ).addOption(
        "https://localhost:4173",
        "https://localhost:4173"
      ).setValue(SETTINGS[key]).onChange(async (value) => onChange(key, value));
    });
  }
};

// src/graph_view/index.ts
var import_obsidian15 = require("obsidian");
var import_client = __toESM(require_client());
var React4 = __toESM(require_react());

// src/graph_view/GraphView.tsx
var import_obsidian14 = require("obsidian");
var import_react9 = __toESM(require_react());

// src/infranodus/index.ts
var import_obsidian2 = require("obsidian");

// src/utils/statements.ts
function replaceAtWithBrackets(object) {
  if (Array.isArray(object)) {
    for (const i in object) {
      object[i] = replaceAtWithBrackets(object[i]);
    }
  } else if (typeof object === "object") {
    for (const key in object) {
      object[key] = replaceAtWithBrackets(object[key]);
    }
  } else if (typeof object === "string") {
    object = replaceAtWords(object);
  }
  return object;
}
function replaceAtWords(input) {
  return input.replace(/@(\w+)/g, "[[$1]]");
}
function filterStatements(params) {
  var _a, _b, _c, _d, _e;
  const wordsToSearch = ((_a = params.wordsToSearch) == null ? void 0 : _a.map((word) => {
    return word;
  })) || [];
  const wordsToHide = ((_b = params.wordsToHide) == null ? void 0 : _b.map((word) => {
    return word;
  })) || [];
  const topicIdsToFilter = params.topicsFiltered || [];
  const connectedWords = params.connectedWords || [];
  let filteredStatements = (_c = params.statements) == null ? void 0 : _c.filter((statement) => {
    const hashtags = statement.statementHashtags;
    if (wordsToHide.some((word) => hashtags.includes(word)))
      return false;
    if (wordsToSearch.every((word) => hashtags.includes(word)))
      return true;
    if (topicIdsToFilter && topicIdsToFilter.length > 0) {
      if (topicIdsToFilter.includes(statement.topStatementCommunity))
        return true;
    }
  });
  if (filteredStatements.length === 0 && wordsToSearch.length > 0) {
    filteredStatements = (_d = params.statements) == null ? void 0 : _d.filter((statement) => {
      const hashtags = statement.statementHashtags;
      if (wordsToSearch.some((word) => hashtags.includes(word)))
        return true;
    });
  }
  if (filteredStatements.length === 0 && wordsToSearch.length > 0 && connectedWords.length > 0) {
    filteredStatements = (_e = params.statements) == null ? void 0 : _e.filter((statement) => {
      const hashtags = statement.statementHashtags;
      if (connectedWords.some((word) => hashtags.includes(word)))
        return true;
    });
  }
  return filteredStatements;
}

// src/infranodus/index.ts
var MAX_CONTEXT_SIZE = 54e3;
var InfraNodus = class {
  static async genericPost(url, body, moreFields) {
    const auth_token = SETTINGS.INFRANODUS_API_KEY;
    if (url.startsWith("/"))
      url = url.slice(1);
    const response = await (0, import_obsidian2.requestUrl)({
      method: "POST",
      url: `${SETTINGS.INFRANODUS_API_URL}/${url}`,
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${auth_token}`
      },
      body: JSON.stringify(body),
      ...moreFields
    });
    try {
      const data = await response.json;
      return { data };
    } catch (e) {
      console.error(e);
      throw e;
    }
  }
  static async generateRelatedStatements(params) {
    const infraNodusInquiryMode = "aiSearch";
    const queryToSearch = params.query;
    const textToProcess = params.text;
    const similarityThreshold = params.similarityThreshold ? parseFloat(params.similarityThreshold) : 0.3;
    const response = await this.genericPost("api/v1/aiSearch", {
      mode: infraNodusInquiryMode,
      embeddingType: "query",
      text: textToProcess,
      searchQuery: queryToSearch,
      numberOfResults: 10,
      similarityThreshold
    });
    return response;
  }
  static async getGraphAndStatements(params) {
    const body = {
      name: params.name,
      text: params.statements && params.statements.length > 0 ? "" : params.text
    };
    if (params.statements) {
      body.statements = params.statements;
    }
    if (params.contextSettings === "[[Wiki Links]] and Concepts") {
      body.contextSettings = {
        partOfSpeechToProcess: "HASHTAGS_AND_WORDS",
        doubleSquarebracketsProcessing: "PROCESS_AS_HASHTAGS"
      };
    }
    if (params.contextSettings === "[[Wiki Links]] Only") {
      body.contextSettings = {
        partOfSpeechToProcess: "HASHTAGS_ONLY",
        doubleSquarebracketsProcessing: "PROCESS_AS_HASHTAGS"
      };
    }
    if (params.contextSettings === "[[Wiki Links]] Prioritized") {
      body.contextSettings = {
        partOfSpeechToProcess: "WORDS_IF_NO_HASHTAGS",
        doubleSquarebracketsProcessing: "PROCESS_AS_HASHTAGS"
      };
    }
    if (params.contextSettings === "Concepts only") {
      body.contextSettings = {
        partOfSpeechToProcess: "HASHTAGS_AND_WORDS",
        doubleSquarebracketsProcessing: "EXCLUDE"
      };
    }
    if (params.stopwords && params.stopwords.length > 0) {
      body.contextSettings = {
        ...body.contextSettings,
        lemmatizeHashtags: true,
        stopwords: params.stopwords
      };
    }
    if (params.categories && params.categories.length > 0) {
      body.categories = params.categories;
      body.contextSettings = {
        ...body.contextSettings,
        categoriesAsMentions: true,
        mentionsProcessing: "CONNECT_TO_ALL_CONCEPTS",
        squareBracketsProcessing: "IGNORE_BRACKETS"
      };
    }
    if (params.linkPageToMentions == "parent_only") {
      body.contextSettings = {
        ...body.contextSettings,
        mentionsProcessing: "CONNECT_TO_CONCEPTS_ONLY"
      };
    }
    const response = await this.genericPost(
      "api/v1/graphAndStatements?doNotSave=true&addStats=true&dotGraph=true&optimize=develop",
      body
    );
    return replaceAtWithBrackets(response);
  }
  static async getGraphAiAdvice(params) {
    return await this.genericPost("api/v1/graphAiAdvice", {
      nodes: params.nodes,
      edges: params.edges,
      graph: params.graph
    });
  }
  static extractDataFromGraphData(params) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B;
    if (!params.graph_data) {
      throw new Error(
        "Could not retrieve data from InfraNodus. Please, check connection or your API key."
      );
    }
    const topics_answer = params.graph_data;
    const error = (_a = params.graph_data) == null ? void 0 : _a.error;
    if (error && error.includes("login")) {
      throw new Error(
        "Please, update your API key in the InfraNodus graph view settings."
      );
    } else if (!params.graph_data.entriesAndGraphOfContext) {
      throw new Error(
        "Could not parse the response from InfraNodus topics identifier. Please, check if there is any content on this page, check your text processing settings, and make sure your API key is up to date."
      );
    }
    const top_clusters = ((_f = (_e = (_d = (_c = (_b = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _b.graph) == null ? void 0 : _c.graphologyGraph) == null ? void 0 : _d.attributes) == null ? void 0 : _e.top_clusters) == null ? void 0 : _f.map(
      (cluster) => {
        cluster.words = cluster.nodes.map(
          (node) => node == null ? void 0 : node.nodeName
        );
        cluster.id = cluster.community;
        return cluster;
      }
    )) || [];
    const top_words = (_k = (_j = (_i = (_h = (_g = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _g.graph) == null ? void 0 : _h.graphologyGraph) == null ? void 0 : _i.attributes) == null ? void 0 : _j.top_nodes) != null ? _k : [];
    const gaps_extracted = ((_o = (_n = (_m = (_l = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _l.graph) == null ? void 0 : _m.graphologyGraph) == null ? void 0 : _n.attributes) == null ? void 0 : _o.gaps) || [];
    const dot_graph = ((_s = (_r = (_q = (_p = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _p.graph) == null ? void 0 : _q.graphologyGraph) == null ? void 0 : _r.attributes) == null ? void 0 : _s.dotGraph) || "";
    const bigrams = ((_w = (_v = (_u = (_t = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _t.graph) == null ? void 0 : _u.graphologyGraph) == null ? void 0 : _v.attributes) == null ? void 0 : _w.bigrams) || [];
    const dot_graph_clusters = ((_A = (_z = (_y = (_x = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _x.graph) == null ? void 0 : _y.graphologyGraph) == null ? void 0 : _z.attributes) == null ? void 0 : _A.dotGraphByCluster) || {};
    const all_statements = ((_B = topics_answer == null ? void 0 : topics_answer.entriesAndGraphOfContext) == null ? void 0 : _B.statements) || [];
    const top_statements_for_topics_extracted = top_clusters ? top_clusters.map((topic) => {
      const topStatementId = topic.topStatementId;
      const topStatement = all_statements.find(
        (statement) => statement.id == topStatementId || parseInt(statement.id) == topStatementId
      );
      return {
        ...topStatement,
        topStatementOfCommunity: topic.community
      };
    }) : [];
    const top_statements = top_statements_for_topics_extracted;
    const all_statements_with_top = [];
    let statements_as_string = "";
    all_statements == null ? void 0 : all_statements.forEach((statement) => {
      const topStatements = top_statements_for_topics_extracted.filter(
        (topStatement) => topStatement.id == statement.id
      );
      if (topStatements.length > 0) {
        topStatements.forEach((topStatement) => {
          all_statements_with_top.push({
            ...statement,
            topStatementOfCommunity: topStatement.topStatementOfCommunity
          });
        });
        return;
      }
      statements_as_string += statement.content + "\n";
      all_statements_with_top.push(statement);
    });
    const all_relations = topics_answer && topics_answer.entriesAndGraphOfContext && topics_answer.entriesAndGraphOfContext.graph.graphologyGraph && topics_answer.entriesAndGraphOfContext.graph.graphologyGraph.edges ? topics_answer.entriesAndGraphOfContext.graph.graphologyGraph.edges : [];
    const contentExistsButNoAnalysis = !top_clusters.length && statements_as_string ? true : false;
    if (contentExistsButNoAnalysis) {
      params.setError("content-empty");
      throw new Error(
        `Could not convert the content of the page into a graph. `
      );
    }
    return {
      top_clusters,
      gaps_extracted,
      all_statements_with_top,
      top_statements,
      all_relations,
      statements_as_string,
      top_words,
      dot_graph,
      dot_graph_clusters,
      bigrams
    };
  }
  static extractTopicsArrayFromTopicsAnswer(params) {
    const newTopicsArray = params.top_clusters.map(
      (cluster, index) => {
        const words = cluster.nodes.map((node) => node.nodeName);
        return {
          id: cluster.community,
          sortId: index,
          numberRatio: cluster.numberRatio,
          bcRatio: cluster.bcRatio,
          words
          // aiName,
          // aiDescription,
        };
      }
    ).filter((topic) => topic !== null);
  }
  static async generateAiNamesForTopics(params) {
    const { prompt, promptContext } = InfraNodus.generatePromptForAiTopics({
      topics_answer: params.graph_data,
      top_statements: params.top_statements
    });
    const topicsText = await this.genericPost("api/v1/aiAdvice", {
      mode: "topics",
      prompt: "",
      promptGraph: "",
      promptContext,
      language: params.language == "USER" ? "" : params.language,
      topicalClusters: prompt != null ? prompt : []
    });
    const aiTopicsLines = topicsText.data.choices[0].text.split("\n");
    const topics = params.top_clusters.map((topic, index) => {
      const tempTopicArray = aiTopicsLines && aiTopicsLines[index] ? aiTopicsLines[index].split(". ") : [];
      let aiName = tempTopicArray[1] ? tempTopicArray[1] : aiTopicsLines[index];
      if (aiName.startsWith('"'))
        aiName = aiName.slice(1);
      if (aiName.endsWith('"'))
        aiName = aiName.slice(0, -1);
      return {
        id: topic.id || topic.community,
        name: aiName,
        description: ""
      };
    });
    return topics;
  }
  static generatePromptForAdvice(params) {
    var _a;
    let currentContextSize = 0;
    const { topics, topStatementsForTopics, allStatements } = params;
    const topicIdsToUse = topics.map(
      (topic) => topic.community || topic.id
    );
    const dotGraphClusters = params.dotGraphClusters;
    const { dotGraphByTopic, dotGraphConnectors } = InfraNodus.generateDotGraphByTopic({
      topicsFiltered: topicIdsToUse,
      topicsExtracted: topics,
      wordsToSearch: params.wordsToSearch,
      dotGraphByCluster: dotGraphClusters
    });
    const dotGraphPrompt = dotGraphByTopic ? Object.keys(dotGraphByTopic).map((clusterId) => {
      return dotGraphByTopic[clusterId].join("; ");
    }).filter((x) => x !== void 0).join("; \n") + (dotGraphConnectors ? `
${dotGraphConnectors}` : "") : "";
    const chronologicalTopStatements = topStatementsForTopics.sort((a, b) => {
      return a.id - b.id;
    }).filter(
      (statement) => topicIdsToUse.includes(statement.topStatementOfCommunity)
    ).map((statement) => statement.content).join("\n\n");
    const typeOfSummaryToGenerate = params.currentGraphPanel == "topics" && topics && topics.length > 2 ? "graph summary" : "summary";
    const dotGraphClustersPrompt = topics.map((topic) => {
      if (!dotGraphClusters[topic.id])
        return "";
      const statementToAdd = topStatementsForTopics.filter(
        (statement) => statement.topStatementOfCommunity == topic.id
      ).map((statement) => statement.content).join("\n\n");
      return `[cluster ${topic.id}]: ${topic.aiName} ${dotGraphClusters[topic.id].join("; ")} ${statementToAdd ? `
${statementToAdd}` : ""}`;
    }).filter((n) => n).join("\n");
    const bigramsWithWeight = (params == null ? void 0 : params.bigrams) || [];
    const bigramsThatContainKeywords = bigramsWithWeight && bigramsWithWeight.length > 0 ? bigramsWithWeight.filter(
      (bigram) => params.wordsToSearch.some(
        (word) => bigram.split(" [weight")[0].toLowerCase().includes(word.toLowerCase())
      )
    ) : [];
    const bigramsForKeywords = (bigramsThatContainKeywords == null ? void 0 : bigramsThatContainKeywords.slice(0, 10).map((bigram) => bigram.split(" [weight")[0])) || [];
    const userPromptToUse = typeOfSummaryToGenerate == "summary" ? params.wordsToSearch && params.wordsToSearch.length > 0 ? params.wordsToSearch.join(" ") + "\n" + bigramsForKeywords.join("\n ") + "\n " + chronologicalTopStatements : chronologicalTopStatements : typeOfSummaryToGenerate == "graph summary" ? dotGraphClustersPrompt : params.wordsToSearch && params.wordsToSearch.length > 0 ? params.wordsToSearch.join(" ") + "\n" + bigramsForKeywords.join("") : topics.map(
      (topic) => `"[cluster ${topic.id}]: ${topic.words.slice(0, 9).join(", ")}"`
    ).join(" and ");
    currentContextSize += userPromptToUse.length;
    const totalTopicsNumber = topics.length;
    const topStatementsToAddToContext = {};
    const allStatementsOfTopics = {};
    allStatements.forEach((statement) => {
      topicIdsToUse.forEach((topicId) => {
        if (statement.topStatementOfCommunity == topicId && params.adviceMode != "summary") {
          if (!topStatementsToAddToContext[topicId])
            topStatementsToAddToContext[topicId] = [];
          topStatementsToAddToContext[topicId].push(
            statement.content
          );
        }
        if (statement.topStatementCommunity == topicId) {
          if (!allStatementsOfTopics[topicId])
            allStatementsOfTopics[topicId] = [];
          allStatementsOfTopics[topicId].push(statement.content);
        }
      });
    });
    const conceptsInTopics = topics.map(
      (topic) => `{topic: ${topic.id}, concepts: "${topic.words.slice(0, 9).join(", ")}"}`
    ).join(" | ");
    const dotGraph = dotGraphPrompt || conceptsInTopics;
    currentContextSize += dotGraph.length;
    const maxPromptSizeForModel = ((_a = SETTINGS) == null ? void 0 : _a.AI_MODEL.includes("gpt-4")) ? MAX_CONTEXT_SIZE : Math.floor(MAX_CONTEXT_SIZE / 4);
    const defaultSizePerTopic = params.adviceMode == "summary" ? 5e3 : 1500;
    const maxSizePerTopic = Math.min(
      Math.floor(
        (maxPromptSizeForModel - currentContextSize) / totalTopicsNumber
      ),
      defaultSizePerTopic
    );
    const additionalPromptContext = topics.map((topic, index) => {
      let cumulativeLengthOfTopic = 0;
      const topStatements = topStatementsToAddToContext[topic.id] ? topStatementsToAddToContext[topic.id].filter(
        (statement) => {
          cumulativeLengthOfTopic += statement.length;
          if (cumulativeLengthOfTopic > maxSizePerTopic)
            return false;
          return true;
        }
      ) : [];
      const additionalStatements = allStatementsOfTopics[topic.id] ? allStatementsOfTopics[topic.id].filter(
        (statement) => {
          cumulativeLengthOfTopic += statement.length;
          if (cumulativeLengthOfTopic > maxSizePerTopic)
            return false;
          return true;
        }
      ) : [];
      const statements = [...topStatements, ...additionalStatements];
      return "[cluster " + topic.id + ']:"\n' + topic.words.slice(0, 9).join(", ") + '":\n ' + statements.join(" ") + '"';
    }).join("\n<---->\n");
    return {
      prompt: userPromptToUse,
      promptGraph: dotGraph,
      promptContext: additionalPromptContext
    };
  }
  static generatePromptForAiTopics(params) {
    var _a, _b, _c, _d, _e, _f, _g;
    const dotGraphByCluster = ((_e = (_d = (_c = (_b = (_a = params.topics_answer) == null ? void 0 : _a.entriesAndGraphOfContext) == null ? void 0 : _b.graph) == null ? void 0 : _c.graphologyGraph) == null ? void 0 : _d.attributes) == null ? void 0 : _e.dotGraphByCluster) || {};
    const topClusters = ((_g = (_f = params.topics_answer) == null ? void 0 : _f.entriesAndGraphOfContext) == null ? void 0 : _g.graph.graphologyGraph.attributes.top_clusters) || [];
    const topStatements = params.top_statements;
    const promptContext = topStatements.map((statement) => {
      return `[cluster ${statement.topStatementOfCommunity}]: ${statement.content}`;
    }).join("\n");
    const topClustersPrompt = topClusters.map((topic) => {
      return {
        text: `"${topic.nodes.map((node) => node.nodeName).slice(0, 9).join(", ")}"`,
        id: topic.id,
        community: topic.id,
        dotGraph: dotGraphByCluster[topic.id] || ""
      };
    });
    return {
      prompt: topClustersPrompt,
      promptContext
    };
  }
  static generateDotGraphByTopic({
    topicsFiltered,
    topicsExtracted,
    wordsToSearch,
    dotGraphByCluster
  }) {
    const dotGraphByTopic = topicsFiltered && topicsFiltered.length > 0 ? topicsFiltered.map((id) => dotGraphByCluster[id]) : topicsExtracted.map((topic) => {
      const topicClusters = dotGraphByCluster[topic.id] || [];
      const clustersToReturn = topicClusters.map((cluster) => {
        if (!wordsToSearch || wordsToSearch && wordsToSearch.length === 0) {
          return cluster;
        }
        if (wordsToSearch && wordsToSearch.length > 0 && wordsToSearch.some(
          (word) => cluster.includes(word)
        )) {
          return cluster;
        }
      }).filter((cluster) => cluster).join("; ");
      return clustersToReturn;
    }).filter((cluster) => cluster);
    const dotGraphConnectors = Object.keys(dotGraphByCluster).map((id) => {
      if (id != "inter_cluster" && id != "top_nodes") {
        return null;
      }
      const extraClusters = dotGraphByCluster[id].slice(0, 4);
      const clustersToReturn = extraClusters.map((cluster) => {
        if ((!wordsToSearch || wordsToSearch && wordsToSearch.length === 0) && (!topicsFiltered || topicsFiltered && topicsFiltered.length === 0)) {
          return cluster;
        }
        if (wordsToSearch && wordsToSearch.length > 0 && wordsToSearch.some(
          (word) => cluster.includes(word)
        )) {
          return cluster;
        }
        if (topicsFiltered && topicsFiltered.length > 0) {
          let clusterToReturn = "";
          topicsExtracted.forEach((topic) => {
            if (!topicsFiltered.includes(topic.id))
              return;
            if (topic.words.some(
              (word) => cluster.includes(word)
            )) {
              clusterToReturn = cluster;
            }
          });
          return clusterToReturn;
        }
      }).filter((cluster) => cluster).join(", ");
      return clustersToReturn;
    }).filter((cluster) => cluster).join("\n\n");
    return {
      dotGraphByTopic,
      dotGraphConnectors
    };
  }
  // Code got from `src/background/providers/infranodus.ts - (from extension code)
  // Use the `sendDataToPort` function - (from extension code)
  static async generateAdvice(params) {
    var _a, _b, _c, _d, _e;
    if (!params.language)
      params.language = "en";
    const infraNodusInquiryMode = params.type === "chatResponse" ? "response" : params.type;
    const simplePrompt = params.prompt;
    const chatPrompt = [];
    if (infraNodusInquiryMode == "response") {
      chatPrompt.push({ role: "user", content: simplePrompt });
    }
    return await this.genericPost("api/v1/aiAdvice", {
      mode: infraNodusInquiryMode != null ? infraNodusInquiryMode : "",
      type: (_a = params.type) != null ? _a : "",
      prompt: chatPrompt.length > 0 ? chatPrompt : simplePrompt,
      promptGraph: (_b = params.promptGraph) != null ? _b : "",
      promptContext: (_c = params.promptContext) != null ? _c : "",
      language: params.language == "USER" ? "" : params.language,
      modelToUse: SETTINGS.AI_MODEL,
      extendedMode: "true",
      app: "obsidian_plugin",
      source: (_d = params.source) != null ? _d : "",
      modal: (_e = params.modal) != null ? _e : ""
    });
  }
  // public static async generateTopics(text: string) {
  // 	const response1 = await InfraNodus.getGraphAndStatements({
  // 		name: "Obsidian Plugin",
  // 		text: text,
  // 	});
  // 	const graph_data = response1.data;
  // 	const topics_answer = graph_data;
  // 	const prompt = InfraNodus.generatePromptForAiTopics({ topics_answer });
  // 	const response = await InfraNodus.generateAdvice({
  // 		prompt,
  // 		language: "en",
  // 	});
  // 	const topics: string = (response as any).data.choices[0].text;
  // 	return { topics, graph_data };
  // }
  static async exportText(params) {
    try {
      const postResult = await this.genericPost(
        "api/v1/graphAndStatements?doNotSave=false&addStats=true",
        {
          name: params.contextName,
          text: params.text,
          categories: params.tags
        },
        { credentials: "include" }
      );
      return { success: true };
    } catch (err) {
      console.error("Error when submitting content to InfraNodus", err);
      return { error: true };
    }
  }
};

// src/graph_view/components/GraphViewOverlay.tsx
var import_react4 = __toESM(require_react());

// node_modules/@primer/octicons-react/dist/index.esm.mjs
var import_react = __toESM(require_react(), 1);
var sizeMap = {
  small: 16,
  medium: 32,
  large: 64
};
function createIconComponent(name, defaultClassName, getSVGData) {
  var svgDataByHeight = getSVGData();
  var heights = Object.keys(svgDataByHeight);
  var Icon = /* @__PURE__ */ import_react.default.forwardRef(function(_ref, forwardedRef) {
    var ariaLabel = _ref["aria-label"], arialabelledby = _ref["aria-labelledby"], tabIndex = _ref.tabIndex, _ref$className = _ref.className, className = _ref$className === void 0 ? defaultClassName : _ref$className, _ref$fill = _ref.fill, fill = _ref$fill === void 0 ? "currentColor" : _ref$fill, _ref$size = _ref.size, size = _ref$size === void 0 ? 16 : _ref$size, _ref$verticalAlign = _ref.verticalAlign, verticalAlign = _ref$verticalAlign === void 0 ? "text-bottom" : _ref$verticalAlign, id = _ref.id, title = _ref.title;
    var height = sizeMap[size] || size;
    var naturalHeight = closestNaturalHeight(heights, height);
    var naturalWidth = svgDataByHeight[naturalHeight].width;
    var width = height * (naturalWidth / naturalHeight);
    var path = svgDataByHeight[naturalHeight].path;
    var labelled = ariaLabel || arialabelledby;
    var role = labelled ? "img" : void 0;
    return /* @__PURE__ */ import_react.default.createElement("svg", {
      ref: forwardedRef,
      "aria-hidden": labelled ? void 0 : "true",
      tabIndex,
      focusable: tabIndex >= 0 ? "true" : "false",
      "aria-label": ariaLabel,
      "aria-labelledby": arialabelledby,
      className,
      role,
      viewBox: "0 0 ".concat(naturalWidth, " ").concat(naturalHeight),
      width,
      height,
      fill,
      id,
      style: {
        display: "inline-block",
        userSelect: "none",
        verticalAlign,
        overflow: "visible"
      }
    }, title ? /* @__PURE__ */ import_react.default.createElement("title", null, title) : null, path);
  });
  Icon.displayName = name;
  return Icon;
}
function closestNaturalHeight(naturalHeights, height) {
  return naturalHeights.map(function(naturalHeight) {
    return parseInt(naturalHeight, 10);
  }).reduce(function(acc, naturalHeight) {
    return naturalHeight <= height ? naturalHeight : acc;
  }, naturalHeights[0]);
}
var ArrowUpIcon = /* @__PURE__ */ createIconComponent("ArrowUpIcon", "octicon octicon-arrow-up", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M3.47 7.78a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0l4.25 4.25a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018L9 4.81v7.44a.75.75 0 0 1-1.5 0V4.81L4.53 7.78a.75.75 0 0 1-1.06 0Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M18.655 10.405a.75.75 0 0 1-1.06 0l-4.97-4.97v14.44a.75.75 0 0 1-1.5 0V5.435l-4.97 4.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l6.25-6.25a.75.75 0 0 1 1.06 0l6.25 6.25a.75.75 0 0 1 0 1.06Z"
      })
    }
  };
});
var CheckIcon = /* @__PURE__ */ createIconComponent("CheckIcon", "octicon octicon-check", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M21.03 5.72a.75.75 0 0 1 0 1.06l-11.5 11.5a.747.747 0 0 1-1.072-.012l-5.5-5.75a.75.75 0 1 1 1.084-1.036l4.97 5.195L19.97 5.72a.75.75 0 0 1 1.06 0Z"
      })
    }
  };
});
var ChevronLeftIcon = /* @__PURE__ */ createIconComponent("ChevronLeftIcon", "octicon octicon-chevron-left", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M9.78 12.78a.75.75 0 0 1-1.06 0L4.47 8.53a.75.75 0 0 1 0-1.06l4.25-4.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L6.06 8l3.72 3.72a.75.75 0 0 1 0 1.06Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M15.28 5.22a.75.75 0 0 1 0 1.06L9.56 12l5.72 5.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215l-6.25-6.25a.75.75 0 0 1 0-1.06l6.25-6.25a.75.75 0 0 1 1.06 0Z"
      })
    }
  };
});
var ChevronRightIcon = /* @__PURE__ */ createIconComponent("ChevronRightIcon", "octicon octicon-chevron-right", function() {
  return {
    "12": {
      "width": 12,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M4.7 10c-.2 0-.4-.1-.5-.2-.3-.3-.3-.8 0-1.1L6.9 6 4.2 3.3c-.3-.3-.3-.8 0-1.1.3-.3.8-.3 1.1 0l3.3 3.2c.3.3.3.8 0 1.1L5.3 9.7c-.2.2-.4.3-.6.3Z"
      })
    },
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M8.72 18.78a.75.75 0 0 1 0-1.06L14.44 12 8.72 6.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018l6.25 6.25a.75.75 0 0 1 0 1.06l-6.25 6.25a.75.75 0 0 1-1.06 0Z"
      })
    }
  };
});
var CommentDiscussionIcon = /* @__PURE__ */ createIconComponent("CommentDiscussionIcon", "octicon octicon-comment-discussion", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.75 1h8.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 10.25 10H7.061l-2.574 2.573A1.458 1.458 0 0 1 2 11.543V10h-.25A1.75 1.75 0 0 1 0 8.25v-5.5C0 1.784.784 1 1.75 1ZM1.5 2.75v5.5c0 .138.112.25.25.25h1a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h3.5a.25.25 0 0 0 .25-.25v-5.5a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25Zm13 2a.25.25 0 0 0-.25-.25h-.5a.75.75 0 0 1 0-1.5h.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 14.25 12H14v1.543a1.458 1.458 0 0 1-2.487 1.03L9.22 12.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.22 2.22v-2.19a.75.75 0 0 1 .75-.75h1a.25.25 0 0 0 .25-.25Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"
      }))
    }
  };
});
var CopyIcon = /* @__PURE__ */ createIconComponent("CopyIcon", "octicon octicon-copy", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"
      }))
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M7.024 3.75c0-.966.784-1.75 1.75-1.75H20.25c.966 0 1.75.784 1.75 1.75v11.498a1.75 1.75 0 0 1-1.75 1.75H8.774a1.75 1.75 0 0 1-1.75-1.75Zm1.75-.25a.25.25 0 0 0-.25.25v11.498c0 .139.112.25.25.25H20.25a.25.25 0 0 0 .25-.25V3.75a.25.25 0 0 0-.25-.25Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.995 10.749a1.75 1.75 0 0 1 1.75-1.751H5.25a.75.75 0 1 1 0 1.5H3.745a.25.25 0 0 0-.25.25L3.5 20.25c0 .138.111.25.25.25h9.5a.25.25 0 0 0 .25-.25v-1.51a.75.75 0 1 1 1.5 0v1.51A1.75 1.75 0 0 1 13.25 22h-9.5A1.75 1.75 0 0 1 2 20.25l-.005-9.501Z"
      }))
    }
  };
});
var CrossReferenceIcon = /* @__PURE__ */ createIconComponent("CrossReferenceIcon", "octicon octicon-cross-reference", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M2.75 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h4.5a.25.25 0 0 0 .25-.25v-2.5a.75.75 0 0 1 1.5 0v2.5A1.75 1.75 0 0 1 13.25 13H9.06l-2.573 2.573A1.458 1.458 0 0 1 4 14.543V13H2.75A1.75 1.75 0 0 1 1 11.25v-7.5C1 2.784 1.784 2 2.75 2h5.5a.75.75 0 0 1 0 1.5ZM16 1.25v4.146a.25.25 0 0 1-.427.177L14.03 4.03l-3.75 3.75a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l3.75-3.75-1.543-1.543A.25.25 0 0 1 11.604 1h4.146a.25.25 0 0 1 .25.25Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M16.5 2.25a.75.75 0 0 1 .75-.75h5.5a.75.75 0 0 1 .75.75v5.5a.75.75 0 0 1-1.5 0V4.06l-6.22 6.22a.75.75 0 1 1-1.06-1.06L20.94 3h-3.69a.75.75 0 0 1-.75-.75Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.75.75 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25v-6a.75.75 0 0 1 1.5 0v6a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.457 1.457 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75V4.25c0-.966.784-1.75 1.75-1.75h11a.75.75 0 0 1 0 1.5h-11Z"
      }))
    }
  };
});
var GearIcon = /* @__PURE__ */ createIconComponent("GearIcon", "octicon octicon-gear", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M8 0a8.2 8.2 0 0 1 .701.031C9.444.095 9.99.645 10.16 1.29l.288 1.107c.018.066.079.158.212.224.231.114.454.243.668.386.123.082.233.09.299.071l1.103-.303c.644-.176 1.392.021 1.82.63.27.385.506.792.704 1.218.315.675.111 1.422-.364 1.891l-.814.806c-.049.048-.098.147-.088.294.016.257.016.515 0 .772-.01.147.038.246.088.294l.814.806c.475.469.679 1.216.364 1.891a7.977 7.977 0 0 1-.704 1.217c-.428.61-1.176.807-1.82.63l-1.102-.302c-.067-.019-.177-.011-.3.071a5.909 5.909 0 0 1-.668.386c-.133.066-.194.158-.211.224l-.29 1.106c-.168.646-.715 1.196-1.458 1.26a8.006 8.006 0 0 1-1.402 0c-.743-.064-1.289-.614-1.458-1.26l-.289-1.106c-.018-.066-.079-.158-.212-.224a5.738 5.738 0 0 1-.668-.386c-.123-.082-.233-.09-.299-.071l-1.103.303c-.644.176-1.392-.021-1.82-.63a8.12 8.12 0 0 1-.704-1.218c-.315-.675-.111-1.422.363-1.891l.815-.806c.05-.048.098-.147.088-.294a6.214 6.214 0 0 1 0-.772c.01-.147-.038-.246-.088-.294l-.815-.806C.635 6.045.431 5.298.746 4.623a7.92 7.92 0 0 1 .704-1.217c.428-.61 1.176-.807 1.82-.63l1.102.302c.067.019.177.011.3-.071.214-.143.437-.272.668-.386.133-.066.194-.158.211-.224l.29-1.106C6.009.645 6.556.095 7.299.03 7.53.01 7.764 0 8 0Zm-.571 1.525c-.036.003-.108.036-.137.146l-.289 1.105c-.147.561-.549.967-.998 1.189-.173.086-.34.183-.5.29-.417.278-.97.423-1.529.27l-1.103-.303c-.109-.03-.175.016-.195.045-.22.312-.412.644-.573.99-.014.031-.021.11.059.19l.815.806c.411.406.562.957.53 1.456a4.709 4.709 0 0 0 0 .582c.032.499-.119 1.05-.53 1.456l-.815.806c-.081.08-.073.159-.059.19.162.346.353.677.573.989.02.03.085.076.195.046l1.102-.303c.56-.153 1.113-.008 1.53.27.161.107.328.204.501.29.447.222.85.629.997 1.189l.289 1.105c.029.109.101.143.137.146a6.6 6.6 0 0 0 1.142 0c.036-.003.108-.036.137-.146l.289-1.105c.147-.561.549-.967.998-1.189.173-.086.34-.183.5-.29.417-.278.97-.423 1.529-.27l1.103.303c.109.029.175-.016.195-.045.22-.313.411-.644.573-.99.014-.031.021-.11-.059-.19l-.815-.806c-.411-.406-.562-.957-.53-1.456a4.709 4.709 0 0 0 0-.582c-.032-.499.119-1.05.53-1.456l.815-.806c.081-.08.073-.159.059-.19a6.464 6.464 0 0 0-.573-.989c-.02-.03-.085-.076-.195-.046l-1.102.303c-.56.153-1.113.008-1.53-.27a4.44 4.44 0 0 0-.501-.29c-.447-.222-.85-.629-.997-1.189l-.289-1.105c-.029-.11-.101-.143-.137-.146a6.6 6.6 0 0 0-1.142 0ZM11 8a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM9.5 8a1.5 1.5 0 1 0-3.001.001A1.5 1.5 0 0 0 9.5 8Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M16 12a4 4 0 1 1-8 0 4 4 0 0 1 8 0Zm-1.5 0a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M12 1c.266 0 .532.009.797.028.763.055 1.345.617 1.512 1.304l.352 1.45c.019.078.09.171.225.221.247.089.49.19.728.302.13.061.246.044.315.002l1.275-.776c.603-.368 1.411-.353 1.99.147.402.349.78.726 1.128 1.129.501.578.515 1.386.147 1.99l-.776 1.274c-.042.069-.058.185.002.315.112.238.213.481.303.728.048.135.142.205.22.225l1.45.352c.687.167 1.249.749 1.303 1.512.038.531.038 1.063 0 1.594-.054.763-.616 1.345-1.303 1.512l-1.45.352c-.078.019-.171.09-.221.225-.089.248-.19.491-.302.728-.061.13-.044.246-.002.315l.776 1.275c.368.603.353 1.411-.147 1.99-.349.402-.726.78-1.129 1.128-.578.501-1.386.515-1.99.147l-1.274-.776c-.069-.042-.185-.058-.314.002a8.606 8.606 0 0 1-.729.303c-.135.048-.205.142-.225.22l-.352 1.45c-.167.687-.749 1.249-1.512 1.303-.531.038-1.063.038-1.594 0-.763-.054-1.345-.616-1.512-1.303l-.352-1.45c-.019-.078-.09-.171-.225-.221a8.138 8.138 0 0 1-.728-.302c-.13-.061-.246-.044-.315-.002l-1.275.776c-.603.368-1.411.353-1.99-.147-.402-.349-.78-.726-1.128-1.129-.501-.578-.515-1.386-.147-1.99l.776-1.274c.042-.069.058-.185-.002-.314a8.606 8.606 0 0 1-.303-.729c-.048-.135-.142-.205-.22-.225l-1.45-.352c-.687-.167-1.249-.749-1.304-1.512a11.158 11.158 0 0 1 0-1.594c.055-.763.617-1.345 1.304-1.512l1.45-.352c.078-.019.171-.09.221-.225.089-.248.19-.491.302-.728.061-.13.044-.246.002-.315l-.776-1.275c-.368-.603-.353-1.411.147-1.99.349-.402.726-.78 1.129-1.128.578-.501 1.386-.515 1.99-.147l1.274.776c.069.042.185.058.315-.002.238-.112.481-.213.728-.303.135-.048.205-.142.225-.22l.352-1.45c.167-.687.749-1.249 1.512-1.304C11.466 1.01 11.732 1 12 1Zm-.69 1.525c-.055.004-.135.05-.161.161l-.353 1.45a1.832 1.832 0 0 1-1.172 1.277 7.147 7.147 0 0 0-.6.249 1.833 1.833 0 0 1-1.734-.074l-1.274-.776c-.098-.06-.186-.036-.228 0a9.774 9.774 0 0 0-.976.976c-.036.042-.06.131 0 .228l.776 1.274c.314.529.342 1.18.074 1.734a7.147 7.147 0 0 0-.249.6 1.831 1.831 0 0 1-1.278 1.173l-1.45.351c-.11.027-.156.107-.16.162a9.63 9.63 0 0 0 0 1.38c.004.055.05.135.161.161l1.45.353a1.832 1.832 0 0 1 1.277 1.172c.074.204.157.404.249.6.268.553.24 1.204-.074 1.733l-.776 1.275c-.06.098-.036.186 0 .228.301.348.628.675.976.976.042.036.131.06.228 0l1.274-.776a1.83 1.83 0 0 1 1.734-.075c.196.093.396.176.6.25a1.831 1.831 0 0 1 1.173 1.278l.351 1.45c.027.11.107.156.162.16a9.63 9.63 0 0 0 1.38 0c.055-.004.135-.05.161-.161l.353-1.45a1.834 1.834 0 0 1 1.172-1.278 6.82 6.82 0 0 0 .6-.248 1.831 1.831 0 0 1 1.733.074l1.275.776c.098.06.186.036.228 0 .348-.301.675-.628.976-.976.036-.042.06-.131 0-.228l-.776-1.275a1.834 1.834 0 0 1-.075-1.733c.093-.196.176-.396.25-.6a1.831 1.831 0 0 1 1.278-1.173l1.45-.351c.11-.027.156-.107.16-.162a9.63 9.63 0 0 0 0-1.38c-.004-.055-.05-.135-.161-.161l-1.45-.353c-.626-.152-1.08-.625-1.278-1.172a6.576 6.576 0 0 0-.248-.6 1.833 1.833 0 0 1 .074-1.734l.776-1.274c.06-.098.036-.186 0-.228a9.774 9.774 0 0 0-.976-.976c-.042-.036-.131-.06-.228 0l-1.275.776a1.831 1.831 0 0 1-1.733.074 6.88 6.88 0 0 0-.6-.249 1.835 1.835 0 0 1-1.173-1.278l-.351-1.45c-.027-.11-.107-.156-.162-.16a9.63 9.63 0 0 0-1.38 0Z"
      }))
    }
  };
});
var IterationsIcon = /* @__PURE__ */ createIconComponent("IterationsIcon", "octicon octicon-iterations", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M2.5 7.25a4.75 4.75 0 0 1 9.5 0 .75.75 0 0 0 1.5 0 6.25 6.25 0 1 0-6.25 6.25H12v2.146c0 .223.27.335.427.177l2.896-2.896a.25.25 0 0 0 0-.354l-2.896-2.896a.25.25 0 0 0-.427.177V12H7.25A4.75 4.75 0 0 1 2.5 7.25Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M2.5 10.5a8 8 0 1 1 16 0 .75.75 0 0 0 1.5 0 9.5 9.5 0 1 0-9.5 9.5h10.94l-2.72 2.72a.75.75 0 1 0 1.06 1.06l3.735-3.735c.44-.439.44-1.151 0-1.59L19.78 14.72a.75.75 0 0 0-1.06 1.06l2.72 2.72H10.5a8 8 0 0 1-8-8Z"
      })
    }
  };
});
var PlusCircleIcon = /* @__PURE__ */ createIconComponent("PlusCircleIcon", "octicon octicon-plus-circle", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7.25-3.25v2.5h2.5a.75.75 0 0 1 0 1.5h-2.5v2.5a.75.75 0 0 1-1.5 0v-2.5h-2.5a.75.75 0 0 1 0-1.5h2.5v-2.5a.75.75 0 0 1 1.5 0Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M12.75 7.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Z"
      }))
    }
  };
});
var QuoteIcon = /* @__PURE__ */ createIconComponent("QuoteIcon", "octicon octicon-quote", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.75 2.5h10.5a.75.75 0 0 1 0 1.5H1.75a.75.75 0 0 1 0-1.5Zm4 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5Zm0 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5ZM2.5 7.75v6a.75.75 0 0 1-1.5 0v-6a.75.75 0 0 1 1.5 0Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M3 6.25a.75.75 0 0 1 .75-.75h13.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 6.25Zm5 6.063a.75.75 0 0 1 .75-.75h11.5a.75.75 0 0 1 0 1.5H8.75a.75.75 0 0 1-.75-.75Zm0 5.937a.75.75 0 0 1 .75-.75h11.5a.75.75 0 0 1 0 1.5H8.75a.75.75 0 0 1-.75-.75ZM3.75 11a.75.75 0 0 1 .75.75v7a.75.75 0 0 1-1.5 0v-7a.75.75 0 0 1 .75-.75Z"
      })
    }
  };
});
var RepoPullIcon = /* @__PURE__ */ createIconComponent("RepoPullIcon", "octicon octicon-repo-pull", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1 2.5A2.5 2.5 0 0 1 3.5 0h8.75a.75.75 0 0 1 .75.75V6a.75.75 0 0 1-1.5 0V1.5h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 3.5 9h3a.75.75 0 0 1 0 1.5h-3a1 1 0 0 0 0 2h3a.75.75 0 0 1 0 1.5h-3A2.5 2.5 0 0 1 1 11.5v-9Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M12.21 13.479a.75.75 0 1 0 1.061 1.061l2.504-2.505a.75.75 0 0 0 0-1.061L13.271 8.47a.75.75 0 0 0-1.061 1.06l1.224 1.225H8.75a.75.75 0 1 0 0 1.5h4.685l-1.225 1.224Z"
      }))
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.875 2.875a2.5 2.5 0 0 1 2.5-2.5h14a.75.75 0 0 1 .75.75v9.125a.75.75 0 0 1-1.5 0V1.875H4.375a1 1 0 0 0-1 1v11.208a2.486 2.486 0 0 1 1-.208h5.937a.75.75 0 1 1 0 1.5H4.375a1 1 0 0 0-1 1v1.75a1 1 0 0 0 1 1h6a.75.75 0 0 1 0 1.5h-6a2.5 2.5 0 0 1-2.5-2.5V2.875Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M18.643 20.484a.749.749 0 1 0 1.061 1.06l3.757-3.757a.75.75 0 0 0 0-1.06l-3.757-3.757a.75.75 0 0 0-1.061 1.06l2.476 2.477H13a.75.75 0 0 0 0 1.5h8.12l-2.477 2.477Z"
      }))
    }
  };
});
var SparkleFillIcon = /* @__PURE__ */ createIconComponent("SparkleFillIcon", "octicon octicon-sparkle-fill", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M7.53 1.282a.5.5 0 0 1 .94 0l.478 1.306a7.492 7.492 0 0 0 4.464 4.464l1.305.478a.5.5 0 0 1 0 .94l-1.305.478a7.492 7.492 0 0 0-4.464 4.464l-.478 1.305a.5.5 0 0 1-.94 0l-.478-1.305a7.492 7.492 0 0 0-4.464-4.464L1.282 8.47a.5.5 0 0 1 0-.94l1.306-.478a7.492 7.492 0 0 0 4.464-4.464Z"
      })
    }
  };
});
var SyncIcon = /* @__PURE__ */ createIconComponent("SyncIcon", "octicon octicon-sync", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M1.705 8.005a.75.75 0 0 1 .834.656 5.5 5.5 0 0 0 9.592 2.97l-1.204-1.204a.25.25 0 0 1 .177-.427h3.646a.25.25 0 0 1 .25.25v3.646a.25.25 0 0 1-.427.177l-1.38-1.38A7.002 7.002 0 0 1 1.05 8.84a.75.75 0 0 1 .656-.834ZM8 2.5a5.487 5.487 0 0 0-4.131 1.869l1.204 1.204A.25.25 0 0 1 4.896 6H1.25A.25.25 0 0 1 1 5.75V2.104a.25.25 0 0 1 .427-.177l1.38 1.38A7.002 7.002 0 0 1 14.95 7.16a.75.75 0 0 1-1.49.178A5.5 5.5 0 0 0 8 2.5Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M3.38 8A9.502 9.502 0 0 1 12 2.5a9.502 9.502 0 0 1 9.215 7.182.75.75 0 1 0 1.456-.364C21.473 4.539 17.15 1 12 1a10.995 10.995 0 0 0-9.5 5.452V4.75a.75.75 0 0 0-1.5 0V8.5a1 1 0 0 0 1 1h3.75a.75.75 0 0 0 0-1.5H3.38Zm-.595 6.318a.75.75 0 0 0-1.455.364C2.527 19.461 6.85 23 12 23c4.052 0 7.592-2.191 9.5-5.451v1.701a.75.75 0 0 0 1.5 0V15.5a1 1 0 0 0-1-1h-3.75a.75.75 0 0 0 0 1.5h2.37A9.502 9.502 0 0 1 12 21.5c-4.446 0-8.181-3.055-9.215-7.182Z"
      })
    }
  };
});
var XIcon = /* @__PURE__ */ createIconComponent("XIcon", "octicon octicon-x", function() {
  return {
    "12": {
      "width": 12,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M2.22 2.22a.749.749 0 0 1 1.06 0L6 4.939 8.72 2.22a.749.749 0 1 1 1.06 1.06L7.061 6 9.78 8.72a.749.749 0 1 1-1.06 1.06L6 7.061 3.28 9.78a.749.749 0 1 1-1.06-1.06L4.939 6 2.22 3.28a.749.749 0 0 1 0-1.06Z"
      })
    },
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M5.72 5.72a.75.75 0 0 1 1.06 0L12 10.94l5.22-5.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L13.06 12l5.22 5.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L12 13.06l-5.22 5.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L10.94 12 5.72 6.78a.75.75 0 0 1 0-1.06Z"
      })
    }
  };
});
var XCircleIcon = /* @__PURE__ */ createIconComponent("XCircleIcon", "octicon octicon-x-circle", function() {
  return {
    "16": {
      "width": 16,
      "path": /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M2.344 2.343h-.001a8 8 0 0 1 11.314 11.314A8.002 8.002 0 0 1 .234 10.089a8 8 0 0 1 2.11-7.746Zm1.06 10.253a6.5 6.5 0 1 0 9.108-9.275 6.5 6.5 0 0 0-9.108 9.275ZM6.03 4.97 8 6.94l1.97-1.97a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l1.97 1.97a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-1.97 1.97a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L6.94 8 4.97 6.03a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018Z"
      })
    },
    "24": {
      "width": 24,
      "path": /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M9.036 7.976a.75.75 0 0 0-1.06 1.06L10.939 12l-2.963 2.963a.75.75 0 1 0 1.06 1.06L12 13.06l2.963 2.964a.75.75 0 0 0 1.061-1.06L13.061 12l2.963-2.964a.75.75 0 1 0-1.06-1.06L12 10.939 9.036 7.976Z"
      }), /* @__PURE__ */ import_react.default.createElement("path", {
        d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Z"
      }))
    }
  };
});

// src/utils/clipboard.ts
async function copyToClipboard(params) {
  try {
    await navigator.clipboard.writeText(params.text);
  } catch (err) {
    console.error(
      "Failed to copy: ",
      err.message || err,
      "for text: ",
      params.text
    );
  }
}

// src/graph_view/lib/generateAiAdvice.ts
function getTopicsForAdviceMode(params) {
  const gaps = params.extractedGraphData.gaps_extracted;
  const gapsMap = gaps.map((gap, index) => {
    return {
      id: index + 1,
      communities: [gap.from.community, gap.to.community]
    };
  });
  const topicsFiltered = params.stateRef.current.topicsFiltered;
  const topicsExtracted = params.extractedGraphData.top_clusters;
  const wordsToSearch = params.wordsToSearch;
  if (params.adviceMode === "question") {
    if (topicsFiltered.length == 0) {
      return genericTopics(wordsToSearch);
    } else if (topicsFiltered.length > 0) {
      return topicsExtracted.filter(
        (topic) => topicsFiltered.includes(topic.id)
      );
    }
  } else if (params.adviceMode === "develop") {
    if (topicsFiltered.length == 0) {
      return genericTopics(wordsToSearch);
    } else if (topicsFiltered.length > 0) {
      return topicsExtracted.filter(
        (topic) => topicsFiltered.includes(topic.id)
      );
    }
  } else if (params.adviceMode === "summary") {
    if (topicsFiltered.length == 0) {
      if (wordsToSearch && wordsToSearch.length > 0) {
        const topicsWithWordsToSearch = topicsExtracted.filter(
          (topic) => wordsToSearch.some(
            (word) => {
              var _a;
              return (_a = topic.words) == null ? void 0 : _a.includes(word.toLowerCase());
            }
          )
        );
        return topicsWithWordsToSearch;
      }
      return topicsExtracted;
    } else if (topicsFiltered.length > 0) {
      return topicsExtracted.filter(
        (topic) => topicsFiltered.includes(topic.id)
      );
    }
  }
  return [];
  function genericTopics(wordsToSearch2) {
    return params.extractedGraphData.top_clusters.filter(
      (topic, index) => {
        if (wordsToSearch2 && wordsToSearch2.length > 0) {
          const wordExists = wordsToSearch2.find(
            (word) => {
              var _a;
              return (_a = topic.words) == null ? void 0 : _a.includes(word.toLowerCase());
            }
          );
          if (wordExists)
            return true;
        }
        if (gapsMap && gapsMap.length === 0 && index <= 4)
          return true;
        const gapExists = gapsMap.find(
          (gap) => gap.communities.includes(topic.community)
        );
        if (gapExists)
          return true;
      }
    );
  }
}
async function generateAiAdvice(params) {
  if (params.adviceMode === "none")
    params.adviceMode = "question";
  const topicsToUse = getTopicsForAdviceMode(params);
  if (!topicsToUse || topicsToUse.length === 0) {
    throw new Error(
      "Could not retrieve topics to analyze. Please, check your settings or try with another document."
    );
  }
  const topicsFiltered = params.stateRef.current.topicsFiltered;
  const prompt = InfraNodus.generatePromptForAdvice({
    adviceMode: params.adviceMode,
    topics: topicsToUse,
    allStatements: params.extractedGraphData.all_statements_with_top,
    topStatementsForTopics: params.extractedGraphData.top_statements || [],
    dotGraph: params.extractedGraphData.dot_graph || "",
    dotGraphClusters: params.extractedGraphData.dot_graph_clusters || [],
    userSettings: params.userSettings,
    currentGraphPanel: params.currentGraphPanel,
    wordsToSearch: params.wordsToSearch,
    bigrams: params.extractedGraphData.bigrams || []
  });
  const aiAdviceMode = params.currentGraphPanel == "topics" && !topicsFiltered && !params.wordsToSearch.length || topicsFiltered && topicsFiltered.length == 0 && !params.wordsToSearch.length && params.currentGraphPanel == "topics" && params.adviceMode == "summary" ? "graph summary" : params.adviceMode;
  if (aiAdviceMode == "graph summary")
    params.setTextToShow(
      "ai generating summary for each topic...\n(switch to concepts view or select topics for faster, shorter results)"
    );
  if (aiAdviceMode == "summary" && topicsToUse.length > 2)
    params.setTextToShow("ai generating summary...");
  if (aiAdviceMode == "develop")
    params.setTextToShow("ai generating idea...");
  if (aiAdviceMode == "question")
    params.setTextToShow("ai generating question...");
  const adviceParameters = {
    prompt: prompt.prompt,
    promptGraph: prompt.promptGraph,
    promptContext: params.adviceMode != "summary" && params.beyondContext ? "" : prompt.promptContext,
    type: aiAdviceMode,
    language: "USER",
    source: aiAdviceMode,
    modal: params.modal
  };
  const adviceResponse = await InfraNodus.generateAdvice(adviceParameters);
  const adviceData = adviceResponse.data;
  if (adviceData.error) {
    const error = adviceData.errorCode == "prompt_too_long" ? "Sorry, the the prompt was too long for the AI model selected. Please, change the model or try again with another text." : adviceData.error;
    throw new Error(error);
  }
  const choices = adviceData == null ? void 0 : adviceData.choices;
  if (!choices || choices && choices.length == 0) {
    throw new Error(
      "Could not generate any AI advice. Please, try again later or try with another text."
    );
  }
  const choicesText = choices.map((choice) => choice.text);
  return choicesText;
}

// src/graph_view/components/GraphViewOverlayChat.tsx
var import_obsidian4 = require("obsidian");

// node_modules/jwt-decode/build/esm/index.js
var InvalidTokenError = class extends Error {
};
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {
    let code = p.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
function base64UrlDecode(str) {
  let output = str.replace(/-/g, "+").replace(/_/g, "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw new Error("base64 string is not of the correct length");
  }
  try {
    return b64DecodeUnicode(output);
  } catch (err) {
    return atob(output);
  }
}
function jwtDecode(token, options) {
  if (typeof token !== "string") {
    throw new InvalidTokenError("Invalid token specified: must be a string");
  }
  options || (options = {});
  const pos = options.header === true ? 0 : 1;
  const part = token.split(".")[pos];
  if (typeof part !== "string") {
    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
  }
  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e) {
    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);
  }
  try {
    return JSON.parse(decoded);
  } catch (e) {
    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);
  }
}

// src/graph_view/components/GraphViewOverlayChat.tsx
var import_react3 = __toESM(require_react());

// src/components/GraphNameModal.tsx
var import_obsidian3 = require("obsidian");
var GraphNameModal = class extends import_obsidian3.Modal {
  constructor(app2, initialGraphName, onSubmit) {
    super(app2);
    this.graphName = initialGraphName;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Export the Data to InfraNodus" });
    new import_obsidian3.Setting(contentEl).setName("Confirm the InfraNodus graph name").addText(
      (text) => text.setValue(this.graphName).onChange((value) => {
        this.graphName = value;
      })
    );
    new import_obsidian3.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.graphName);
      })
    ).addButton(
      (btn) => btn.setButtonText("Cancel").onClick(() => {
        this.close();
        this.onSubmit(null);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/graph.ts
function encodeInfraNodusGraphName(graphName, graphPrefix, vaultName) {
  let encodedName = graphName.replace(/[\s%&=?#/\\]/g, "_");
  encodedName = encodeURIComponent(encodedName);
  const graphNameToReturn = getGraphName(encodedName, graphPrefix, vaultName);
  return graphNameToReturn.replace(/%[0-9A-Fa-f]{2}/g, "_").slice(0, 32) || "from_obsidian_plugin";
}
function makeNameSafe(name) {
  return name.replace(/[\s%&=?#/\\]/g, "_");
}
function getGraphName(encodedName, graphPrefix, vaultName) {
  if (!graphPrefix) {
    return `${vaultName}_${encodedName}`;
  }
  if (graphPrefix.includes("*")) {
    if (graphPrefix.includes("**")) {
      return graphPrefix.replace("**", makeNameSafe(vaultName));
    }
    return graphPrefix.replace("*", makeNameSafe(encodedName));
  }
  if (graphPrefix === "page_name") {
    return "from_obsidian_" + makeNameSafe(encodedName);
  }
  if (graphPrefix === "obsidian_files") {
    return "obsidian_files";
  }
  return graphPrefix;
}

// src/components/ToggleButton.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ToggleButton = (params) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", { className: "flex items-center cursor-pointer", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "relative", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "input",
      {
        type: "checkbox",
        className: "sr-only",
        checked: params.toggle,
        onChange: params.onClick
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "div",
      {
        className: `block bg-gray-400 dark:bg-gray-600 w-8 h-5 rounded-full ${params.toggle ? "bg-green-400 dark:bg-green-400" : ""}`
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "div",
      {
        className: `dot absolute left-1 top-1 bg-white w-3 h-3 rounded-full transition ${params.toggle ? "translate-x-full" : ""}`
      }
    )
  ] }) });
};

// src/components/InfoTootip.tsx
var React2 = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_jsx_runtime2 = (
  // <div className="relative inline-block">
  // <>
  // 	<div ref={childRef}>{children}</div>
  // </>
  __toESM(require_jsx_runtime())
);
var InfoTooltip = React2.forwardRef(
  ({
    text,
    direction = "bottom",
    distance = 4,
    children,
    isAbsolute = false
  }, ref) => {
    const tooltipRef = (0, import_react2.useRef)(null);
    const childRef = (0, import_react2.useRef)(null);
    (0, import_react2.useEffect)(() => {
      const div = document.createElement("div");
      div.style.position = "absolute";
      div.style.zIndex = "10";
      div.style.visibility = "hidden";
      div.style.padding = "0.5rem";
      div.style.fontSize = "0.75rem";
      div.style.color = "white";
      div.style.transitionProperty = "opacity";
      div.style.transitionDuration = "0.3s";
      div.style.backgroundColor = "rgba(0, 0, 0, 1)";
      div.style.borderRadius = "0.25rem";
      div.style.opacity = "0";
      div.style.maxWidth = "250px";
      div.innerHTML = text;
      document.body.appendChild(div);
      tooltipRef.current = div;
    }, [children]);
    (0, import_react2.useEffect)(() => {
      const tooltip = tooltipRef.current;
      const child = childRef.current;
      if (!tooltip || !child)
        return;
      const firstChild = React2.Children.toArray(
        children
      )[0];
      const clonedChild = React2.cloneElement(firstChild, {
        ref: childRef
      });
      let timeout = null;
      const handleMouseEnter = () => {
        timeout = setTimeout(() => {
          matchLocationWithDirection(
            child,
            tooltip,
            direction,
            distance
          );
          tooltip.style.visibility = "visible";
          tooltip.style.opacity = "1";
        }, 300);
      };
      const handleMouseLeave = () => {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        tooltip.style.visibility = "hidden";
        tooltip.style.opacity = "0";
      };
      child.addEventListener("mouseenter", handleMouseEnter);
      child.addEventListener("mouseleave", handleMouseLeave);
      return () => {
        tooltip.remove();
        child.removeEventListener("mouseenter", handleMouseEnter);
        child.removeEventListener("mouseleave", handleMouseLeave);
      };
    }, [direction, distance, children]);
    const matchLocationWithDirection = (child, tooltip, direction2, distance2) => {
      const childRect = child.getBoundingClientRect();
      const tooltipRect = tooltip.getBoundingClientRect();
      switch (direction2) {
        case "left":
          tooltip.style.left = `${childRect.left - tooltipRect.width - distance2}px`;
          tooltip.style.top = `${childRect.top + childRect.height / 2 - tooltipRect.height / 2}px`;
          break;
        case "right":
          tooltip.style.left = `${childRect.right + distance2}px`;
          tooltip.style.top = `${childRect.top + childRect.height / 2 - tooltipRect.height / 2}px`;
          break;
        case "top":
          tooltip.style.top = `${childRect.top - tooltipRect.height - distance2}px`;
          tooltip.style.left = `${childRect.left - tooltipRect.width / 2}px`;
          break;
        case "bottom":
          tooltip.style.top = `${childRect.bottom + distance2}px`;
          tooltip.style.left = `${childRect.left - (tooltipRect.width - childRect.width) / 2}px`;
          break;
        default:
          throw new Error("Invalid direction");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: isAbsolute ? React2.cloneElement(
      React2.Children.toArray(
        children
      )[0],
      { ref: childRef }
    ) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { ref: childRef, children }) });
  }
);

// src/graph_view/components/GraphViewOverlayChat.tsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _lastId = 0;
var generateId = () => `chatmessage-${++_lastId}`;
async function processInput(search, similarityThreshold, statements) {
  const extractedStatements = await InfraNodus.generateRelatedStatements({
    query: search,
    similarityThreshold,
    text: statements
  });
  return extractedStatements.data;
}
var AiChatTextContext = (params) => {
  const { aiChatClusters, toggleChatContext, navigator: navigator2, beyondContext } = params;
  const filteredTopics = (aiChatClusters == null ? void 0 : aiChatClusters.filtered_topics) && (aiChatClusters == null ? void 0 : aiChatClusters.filtered_topics.length) > 0 ? aiChatClusters == null ? void 0 : aiChatClusters.filtered_topics : [];
  const allTopics = (aiChatClusters == null ? void 0 : aiChatClusters.all_topics) && (aiChatClusters == null ? void 0 : aiChatClusters.all_topics.length) > 0 ? aiChatClusters == null ? void 0 : aiChatClusters.all_topics : [];
  const concepts = (aiChatClusters == null ? void 0 : aiChatClusters.concepts) && (aiChatClusters == null ? void 0 : aiChatClusters.concepts.length) > 0 ? aiChatClusters == null ? void 0 : aiChatClusters.concepts : [];
  const [copied, setCopied] = (0, import_react3.useState)(false);
  (0, import_react3.useEffect)(() => {
    if (!copied)
      return;
    const timer = setTimeout(() => setCopied(false), 500);
    return () => clearTimeout(timer);
  }, [copied]);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative flex w-full", children: [
    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative flex w-full ", children: [
      beyondContext && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col mt-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "text-sm font-bold", children: "AI will not take the context into account" }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "div",
          {
            id: "chatContext",
            className: "flex flex-col gap-1 max-h-[30vh] overflow-y-scroll mb-2",
            children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              "div",
              {
                className: "flex items-center",
                children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "text-sm", children: 'You have "go beyond this context" switch enabled, so the AI will not take the graph into account.' })
              },
              "no-context"
            )
          }
        )
      ] }),
      !beyondContext && filteredTopics.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col mt-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "text-sm font-bold", children: "AI will focus on selected topics:" }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "div",
          {
            id: "chatContext",
            className: "flex flex-col gap-1 max-h-[30vh] overflow-y-scroll mb-2",
            children: filteredTopics.map((topic, index) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("span", { className: "font-semibold", children: [
                topic.aiName,
                ":"
              ] }),
              " ",
              `(${topic.words.slice(0, 9).join(", ")})`
            ] }) }, index))
          }
        )
      ] }),
      !beyondContext && allTopics.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col mt-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "text-sm font-bold", children: "AI will focus on all topics:" }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "div",
          {
            id: "chatContext",
            className: "flex flex-col gap-1 max-h-[30vh] overflow-y-scroll mb-2",
            children: allTopics.map((topic, index) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex items-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("span", { className: "font-semibold", children: [
                topic.aiName,
                ":"
              ] }),
              " ",
              `(${topic.words.slice(0, 9).join(", ")})`
            ] }) }, index))
          }
        )
      ] }),
      !beyondContext && concepts.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col mt-0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "text-sm font-bold", children: "AI will focus on these concepts:" }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "div",
          {
            id: "chatContext",
            className: "flex flex-col gap-1 max-h-[30vh] overflow-y-scroll mb-2",
            children: concepts.join(", ")
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-row absolute top-0 right-0 gap-1", children: [
      !beyondContext && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        "div",
        {
          className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-900 dark:hover:bg-gray-800 rounded px-1 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
          onClick: () => {
            var _a, _b;
            const shadowRoot = (_a = document.querySelector(
              "div#infranodus-shadowroot-container"
            )) == null ? void 0 : _a.shadowRoot;
            const contextContent = ((_b = shadowRoot == null ? void 0 : shadowRoot.querySelector("div#chatContext")) == null ? void 0 : _b.innerHTML) || "";
            navigator2.clipboard.writeText(contextContent);
            setCopied(true);
          },
          children: copied ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16, className: "px-0.5" }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyIcon, { size: 16, className: "px-1" })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        "div",
        {
          className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-900 dark:hover:bg-gray-800 rounded px-1 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
          onClick: () => {
            toggleChatContext();
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(XIcon, { size: 16, className: "px-0.5" })
        }
      )
    ] })
  ] });
};
var GraphViewOverlayChat = (params) => {
  var _a, _b, _c;
  let extractedGraphData = params.stateRef.current.extractedGraphData;
  const globalChatHistory = (_a = params.chatHistory) != null ? _a : [];
  const allStatements = extractedGraphData.all_statements_with_top;
  const topicsExtracted = extractedGraphData.top_clusters;
  const topicsFiltered = params.topicsFiltered;
  const wordsToSearch = params.wordsToSearch;
  const statementsFilteredFromSearch = params.filteredStatements;
  const dotGraphByCluster = (_b = extractedGraphData.dot_graph_clusters) != null ? _b : { none: [] };
  const bigrams = extractedGraphData.bigrams;
  const topWords = extractedGraphData.top_words;
  const containerRef = (0, import_react3.useRef)(null);
  const chatMessagesContainerRef = (0, import_react3.useRef)(null);
  const vaultName = params.app.vault.getName();
  let similarityThreshold = "0.3";
  const defaultChatTextString = (_c = params.startingChat) != null ? _c : "";
  const currentPlatform8 = import_obsidian4.Platform.isMobileApp || import_obsidian4.Platform.isMobile ? "mobile" : "desktop";
  const [chatHistory, setChatHistory] = (0, import_react3.useState)(globalChatHistory);
  const [isLoadingAiMessage, setIsLoadingAiMessage] = (0, import_react3.useState)(false);
  const [inputValue, setInputValue] = (0, import_react3.useState)(defaultChatTextString.trim());
  const [chatResponse, setChatResponse] = (0, import_react3.useState)();
  const [graphContext, setGraphContext] = (0, import_react3.useState)("");
  const [conceptualContext, setConceptualContext] = (0, import_react3.useState)(
    ""
  );
  const [aiChatClusters, setAiChatClusters] = (0, import_react3.useState)({});
  const [foundStatements, setFoundStatements] = (0, import_react3.useState)([]);
  const [shownReferences, setShownReferences] = (0, import_react3.useState)([]);
  const [copied, setCopied] = (0, import_react3.useState)(false);
  const [error, setError] = (0, import_react3.useState)(null);
  const [exporting, setExporting] = (0, import_react3.useState)(false);
  const [beyondContext, setBeyondContext] = (0, import_react3.useState)(false);
  const [showSubprompt, setShowSubprompt] = (0, import_react3.useState)(false);
  const [subpromptValue, setSubpromptValue] = (0, import_react3.useState)("");
  const [subpromptOptions, setSubpromptOptions] = (0, import_react3.useState)([]);
  const [showDropdown, setShowDropdown] = (0, import_react3.useState)(false);
  const dropdownRef = (0, import_react3.useRef)(null);
  const toggleBeyondContext = () => {
    setBeyondContext((prev) => !prev);
  };
  const exportToInfraNodus = {
    type: SETTINGS.EXPORT_TYPE,
    graphName: SETTINGS.CONTEXT_NAME
  };
  const auth_token = SETTINGS.INFRANODUS_API_KEY;
  const decodedToken = auth_token ? jwtDecode(auth_token) : {};
  const [currentUser, setCurrentUser] = (0, import_react3.useState)(
    decodedToken && decodedToken.user ? decodedToken.user.id : ""
  );
  (0, import_react3.useEffect)(() => {
    globalChatHistory.forEach(({ id }) => animateChatMessageIn(id));
    if (localStorage.getItem("chatBeyondContext") == "true") {
      setBeyondContext(true);
    }
    if (localStorage.getItem("chatSubpromptOptions") && localStorage.getItem("chatSubpromptOptions") !== "null") {
      setSubpromptOptions(
        JSON.parse(localStorage.getItem("chatSubpromptOptions"))
      );
    } else {
      setSubpromptOptions([
        "elaborate on this statement:",
        "challege this idea:",
        "generate an interesting question:",
        "summarize it:",
        "check if it's true:"
      ]);
    }
  }, []);
  (0, import_react3.useEffect)(() => {
    localStorage.setItem(
      "chatBeyondContext",
      JSON.stringify(beyondContext)
    );
  }, [beyondContext]);
  (0, import_react3.useEffect)(() => {
    localStorage.setItem(
      "chatSubpromptOptions",
      JSON.stringify(subpromptOptions)
    );
  }, [subpromptOptions]);
  const animateChatMessageIn = (0, import_react3.useCallback)(
    async (id) => {
      var _a2;
      await new Promise((resolve) => setTimeout(resolve, 0));
      const chatMessage = (_a2 = containerRef.current) == null ? void 0 : _a2.querySelector("#" + id);
      chatMessage == null ? void 0 : chatMessage.classList.remove("-translate-y-[10px]");
      chatMessage == null ? void 0 : chatMessage.classList.remove("opacity-0");
    },
    [containerRef.current]
  );
  (0, import_react3.useEffect)(() => {
    generateGraphContext();
  }, [wordsToSearch, topicsFiltered, topicsExtracted, dotGraphByCluster]);
  function generateGraphContext() {
    const chatClusters = {
      filtered_topics: [],
      concepts: [],
      all_topics: []
    };
    const conceptsInTopics = topicsFiltered && topicsFiltered.length > 0 && topicsExtracted ? topicsFiltered.map(
      (id) => {
        var _a2;
        return `{topic: ${id}, concepts: "${(_a2 = topicsExtracted.find((topic) => {
          if (topic.id === id) {
            chatClusters["filtered_topics"].push(topic);
            return true;
          }
        })) == null ? void 0 : _a2.words.slice(0, 9).join(", ")}"}`;
      }
    ).join(";\n") : wordsToSearch && wordsToSearch.length > 0 ? `${wordsToSearch.map((word) => {
      chatClusters["concepts"].push(word);
      return word;
    }).join(", ")}` : `${topicsExtracted.map((topic) => {
      chatClusters["all_topics"].push(topic);
      return `{topic: ${topic.id}, concepts: "${topic.words.slice(0, 9).join(", ")}"}`;
    }).join(";\n")}`;
    const dotGraphByTopic = topicsFiltered && topicsFiltered.length > 0 ? topicsFiltered.map((id) => dotGraphByCluster[id]).join("\n") : topicsExtracted.map((topic) => {
      const topicClusters = dotGraphByCluster[topic.id];
      const clustersToReturn = topicClusters.map((cluster) => {
        if (!wordsToSearch || wordsToSearch && wordsToSearch.length === 0) {
          return cluster;
        }
        if (wordsToSearch && wordsToSearch.length > 0 && wordsToSearch.some(
          (word) => cluster.includes(word)
        )) {
          return cluster;
        }
      }).filter((cluster) => cluster).join(", ");
      return clustersToReturn;
    }).filter((cluster) => cluster).join("\n");
    const dotGraphConnectors = Object.keys(dotGraphByCluster).map((id) => {
      if (id != "inter_cluster" && id != "top_nodes") {
        return null;
      }
      const extraClusters = dotGraphByCluster[id].slice(0, 4);
      const clustersToReturn = extraClusters.map((cluster) => {
        if ((!wordsToSearch || wordsToSearch && wordsToSearch.length === 0) && (!topicsFiltered || topicsFiltered && topicsFiltered.length === 0)) {
          return cluster;
        }
        if (wordsToSearch && wordsToSearch.length > 0 && wordsToSearch.some(
          (word) => cluster.includes(word)
        )) {
          return cluster;
        }
        if (topicsFiltered && topicsFiltered.length > 0) {
          let clusterToReturn = "";
          topicsExtracted.forEach((topic) => {
            if (!topicsFiltered.includes(topic.id))
              return;
            if (topic.words.some(
              (word) => cluster.includes(word)
            )) {
              clusterToReturn = cluster;
            }
          });
          return clusterToReturn;
        }
      }).filter((cluster) => cluster).join(", ");
      return clustersToReturn;
    }).filter((cluster) => cluster).join("\n");
    const dotGraph = dotGraphByTopic + dotGraphConnectors;
    const contextToUse = dotGraph || conceptsInTopics;
    setAiChatClusters(chatClusters);
    setConceptualContext(conceptsInTopics);
    setGraphContext(contextToUse);
  }
  async function addChatMessage() {
    if (isLoadingAiMessage)
      return;
    if (!inputValue || inputValue.length == 0)
      return;
    setIsLoadingAiMessage(true);
    const id1 = generateId();
    const id2 = generateId();
    const chatMessageToAdd = subpromptValue ? `${subpromptValue}
${inputValue}` : inputValue;
    if (showSubprompt)
      setShowSubprompt(false);
    globalChatHistory.push({
      type: "user",
      message: chatMessageToAdd,
      id: id1
    });
    globalChatHistory.push({
      type: "ai",
      status: "loading",
      message: "searching text and generating answer...",
      id: id2
    });
    setInputValue("");
    setChatHistory([...globalChatHistory]);
    animateChatMessageIn(id1);
    setTimeout(() => animateChatMessageIn(id2), 100);
    const statementsArray = allStatements.map(
      (statement) => statement.content
    );
    try {
      let extractedStatements = beyondContext ? [] : await processInput(
        inputValue,
        similarityThreshold,
        statementsArray
      );
      const maxRecursion = 5;
      const currentRecursion = 0;
      while (currentRecursion < maxRecursion) {
        if (extractedStatements.length !== 0)
          break;
        const newSimilarityThreshold = "0.01";
        similarityThreshold = newSimilarityThreshold;
        extractedStatements = await processInput(
          inputValue,
          newSimilarityThreshold,
          statementsArray
        );
      }
      const listOfStatements = extractedStatements.map((statement) => statement.matchedContent).join(" \n ");
      let lastStatementId = 0;
      const statementsWithIds = extractedStatements.map(
        (statement, index) => {
          lastStatementId = index + 1;
          return {
            id: index + 1,
            content: statement.matchedContent,
            similarity: statement.similarity.toFixed(2)
          };
        }
      );
      const filteredStatements = statementsFilteredFromSearch.map(
        (statement, index) => {
          return {
            id: lastStatementId + index + 1,
            content: statement.content,
            similarity: 1
          };
        }
      );
      const allStatementsForChat = [
        ...filteredStatements,
        ...statementsWithIds
      ];
      const chatHistoryToAdd = globalChatHistory.map((obj, index) => {
        return { type: obj.type, message: obj.message };
      });
      chatHistoryToAdd.pop();
      chatHistoryToAdd.pop();
      setFoundStatements(allStatementsForChat);
      setShownReferences([]);
      const existingContextPrompt = !beyondContext ? " \n\n <--- answer the question above considering the context & previous conversation we had below ---> \n  \n <--- context as a json list, containing the corresponding id for each statement ---> \n " + JSON.stringify(allStatementsForChat) : " \n\n <--- answer the question above considering the previous conversation we had below ---> \n ";
      const addLinksPrompt = !beyondContext ? " \n <--- each response you provide should be followed with the separator |||| and the ids of the context statements above where you got the information from in square brackets each, e.g.   \n \n first response text |||| [2]\n \n second response text |||| [7][9]\n \n third response text |||| [3][6]\n \n\n" : "";
      const metaPrompt = subpromptValue ? `${subpromptValue}
` : "";
      const previousConversationPrompt = " \n <--- previous conversation as a json list, in order (first message is first element in list) ---> \n\n" + JSON.stringify(chatHistoryToAdd) + "\n\n";
      const promptToGenerate = metaPrompt + inputValue + existingContextPrompt + previousConversationPrompt + addLinksPrompt;
      const promptForGraph = beyondContext ? "" : graphContext;
      const response = await InfraNodus.generateAdvice({
        prompt: promptToGenerate,
        promptGraph: promptForGraph,
        promptContext: "",
        type: "chatResponse",
        source: "ai_chat",
        modal: "submit"
      });
      setChatResponse(response.data);
    } catch (error2) {
    }
    setIsLoadingAiMessage(false);
  }
  function clearChatHistory() {
    globalChatHistory.length = 0;
    setChatHistory([]);
  }
  function toggleReference(ref, e) {
    e.preventDefault();
    if (!ref || ref == "0")
      return;
    if (shownReferences.includes(ref)) {
      setShownReferences(shownReferences.filter((r) => r !== ref));
    } else {
      setShownReferences([ref]);
    }
  }
  function onTextAreaKeyDown(e) {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      addChatMessage();
    }
  }
  (0, import_react3.useEffect)(() => {
    if (chatHistory.length === 0)
      return;
    const textResponse = chatResponse && chatResponse.choices && chatResponse.choices[0] ? chatResponse.choices[0].message.content : "";
    setIsLoadingAiMessage(false);
    if (!textResponse)
      return;
    globalChatHistory.pop();
    const id = generateId();
    const chatMessageContent = textResponse.split("||||")[0] || textResponse;
    const chatMessageReferences = textResponse && textResponse.length > 1 ? textResponse.split("||||")[1] : "";
    const referenceRegex = /\[(\d+)\]/g;
    const chatMessageReferancesArray = chatMessageReferences ? Array.from(
      chatMessageReferences.matchAll(referenceRegex),
      (m) => m[1]
    ) : [];
    const updatedChatHistory = [...globalChatHistory];
    globalChatHistory.push({
      type: "ai",
      message: chatMessageContent,
      id
    });
    updatedChatHistory.push({
      type: "ai",
      message: chatMessageContent,
      references: chatMessageReferancesArray,
      id
    });
    setChatHistory(updatedChatHistory);
    setTimeout(() => animateChatMessageIn(id), 100);
  }, [chatResponse]);
  (0, import_react3.useEffect)(() => {
    if (shownReferences.length === 0) {
      const updatedChatHistory2 = [...chatHistory];
      const newChatHistory = updatedChatHistory2.filter(
        (message) => message.type !== "ref"
      );
      setChatHistory(newChatHistory);
      return;
    }
    const updatedChatHistory = [...chatHistory];
    const updatedRefs = [];
    shownReferences.forEach((ref) => {
      const matchedStatement = foundStatements.find(
        (statement) => statement.id === parseInt(ref)
      );
      const refId = generateId();
      updatedRefs.push(refId);
      updatedChatHistory.push({
        type: "ref",
        message: matchedStatement.content,
        id: refId
      });
    });
    setChatHistory(updatedChatHistory);
    setTimeout(
      () => updatedRefs.forEach((ref) => animateChatMessageIn(ref)),
      100
    );
  }, [shownReferences]);
  (0, import_react3.useEffect)(() => {
    const chatContainer = chatMessagesContainerRef.current;
    if (!chatContainer)
      return;
    chatContainer.scrollTop = chatContainer.scrollHeight;
  }, [chatHistory]);
  (0, import_react3.useEffect)(() => {
    if (!copied)
      return;
    const timer = setTimeout(() => setCopied(false), 500);
    return () => clearTimeout(timer);
  }, [copied]);
  const [showChatContext, setShowChatContext] = (0, import_react3.useState)(false);
  function toggleChatContext() {
    setShowChatContext(!showChatContext);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
    error && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "text-sm font-bold", children: error }),
    /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
      "div",
      {
        className: "absolute p-2 z-10 top-2 left-12 right-3 @[420px]/main:w-[376px] flex flex-col items-stretch text-black dark:text-white bg-gray-300 dark:bg-gray-800 pt-2 rounded ",
        ref: containerRef,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-row gap-2 ml-auto mb-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
              "div",
              {
                className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-950 dark:hover:bg-[#101722] rounded px-2 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
                onClick: () => toggleChatContext(),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(QuoteIcon, { size: 16 }),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-[13px] -ml-1 font-semibold", children: "Context" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
              "div",
              {
                className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-950 dark:hover:bg-[#101722] rounded px-2 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
                onClick: () => clearChatHistory(),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(IterationsIcon, { size: 16 }),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-[13px] -ml-1 font-semibold", children: "Clear" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
              "div",
              {
                className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-950 dark:hover:bg-[#101722] rounded px-2 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
                onClick: () => {
                  const chatHistoryText = chatHistory.reduce(
                    (acc, { message, type }) => {
                      return acc + type + ": " + message + "\n\n";
                    },
                    ""
                  );
                  navigator.clipboard.writeText(chatHistoryText);
                  setCopied(true);
                },
                children: [
                  copied ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyIcon, { size: 16 }),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-[13px] -ml-1  font-semibold", children: "Copy" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
              "div",
              {
                className: "bg-gray-350 hover:bg-gray-400 dark:bg-gray-950 dark:hover:bg-[#101722] rounded px-2 flex flex-row gap-2 items-center h-7 transition-colors cursor-pointer",
                onClick: () => params.closeChat(),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(XIcon, { size: 16 }),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-[13px] -ml-1 font-semibold", children: "Close" })
                ]
              }
            )
          ] }),
          showChatContext && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "flex flex-row gap-1", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            "div",
            {
              className: `relative flex w-full flex-col gap-1 rounded px-2 py-2 mt-0 bg-gray-400 dark:bg-gray-950 border border-gray-600 dark:border-gray-900 text-black dark:text-white text-sm overflow-hidden`,
              children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                AiChatTextContext,
                {
                  aiChatClusters,
                  toggleChatContext,
                  navigator,
                  beyondContext
                }
              )
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            "div",
            {
              className: "min-h-[30vh] max-h-[40vh] overflow-y-auto flex flex-col gap-4 w-full mt-auto py-2",
              ref: chatMessagesContainerRef,
              children: chatHistory.map(
                ({ id, type, message, references, status }, index) => /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                  "div",
                  {
                    id: id.toString(),
                    className: `group transition-all transform duration-500 -translate-y-[10px] opacity-0 flex flex-row items-center gap-2 max-w-[280px] text-black dark:text-white ${type === "user" ? "ml-auto" : "mr-auto"}`,
                    children: [
                      type != "ai" && type != "ref" && status !== "loading" && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col items-center gap-1 transition-opacity opacity-0 group-hover:opacity-100", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => {
                              navigator.clipboard.writeText(
                                message
                              );
                              setCopied(true);
                            },
                            children: copied ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyIcon, { size: 16 })
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => {
                              goToInfraNodus({
                                text: message,
                                previousMessage: "",
                                graphContext,
                                currentUser,
                                exportToInfraNodus,
                                setExporting,
                                vaultName
                              });
                            },
                            children: exporting ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                              CrossReferenceIcon,
                              {
                                size: 14
                              }
                            )
                          }
                        )
                      ] }),
                      /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                        "span",
                        {
                          className: `rounded ${currentPlatform8 == "mobile" ? "text-sm" : "text-base"}  p-2 px-4 bg-gray-400 dark:bg-gray-900 relative ${status === "loading" && "animate-pulse"}`,
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("span", { children: [
                              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                                "span",
                                {
                                  className: `${type == "ref" ? "cursor-pointer" : ""}`,
                                  onClick: () => {
                                    scrollToText(message);
                                  },
                                  children: message
                                }
                              ),
                              references == null ? void 0 : references.map((ref, index2) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                                "a",
                                {
                                  href: "#/",
                                  onClick: (e) => toggleReference(ref, e),
                                  children: [
                                    "[",
                                    ref,
                                    "]"
                                  ]
                                }
                              ) }, index2))
                            ] }),
                            type === "ai" && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                              "span",
                              {
                                className: `absolute bottom-[1px] right-1 text-sm text-gray-700 dark:text-gray-400`,
                                children: "ai"
                              }
                            ),
                            type === "ref" && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                              "span",
                              {
                                className: `absolute bottom-[1px] right-1 text-sm text-gray-700 dark:text-gray-400`,
                                children: "ref"
                              }
                            )
                          ]
                        }
                      ),
                      type === "ai" && status !== "loading" && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col items-center gap-1 transition-opacity opacity-0 group-hover:opacity-100", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => {
                              navigator.clipboard.writeText(
                                message
                              );
                              setCopied(true);
                            },
                            children: copied ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyIcon, { size: 16 })
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => {
                              goToInfraNodus({
                                text: message,
                                previousMessage: chatHistory[index - 1].message,
                                graphContext,
                                currentUser,
                                exportToInfraNodus,
                                setExporting,
                                vaultName
                              });
                            },
                            children: exporting ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CrossReferenceIcon, { size: 14 })
                          }
                        )
                      ] }),
                      type === "ref" && /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-col items-center gap-1 transition-opacity opacity-0 group-hover:opacity-100", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => {
                              navigator.clipboard.writeText(
                                message
                              );
                              setCopied(true);
                            },
                            children: copied ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CopyIcon, { size: 16 })
                          }
                        ),
                        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          "div",
                          {
                            className: "cursor-pointer",
                            onClick: () => goToInfraNodus({
                              text: message,
                              currentUser,
                              exportToInfraNodus,
                              setExporting,
                              vaultName
                            }),
                            children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CrossReferenceIcon, { size: 14 })
                          }
                        )
                      ] })
                    ]
                  },
                  id
                )
              )
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative w-full flex flex-col", children: [
            showSubprompt && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "relative w-full flex items-center gap-2 pt-2 mb-2", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative w-full", ref: dropdownRef, children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                "input",
                {
                  className: "relative w-full rounded-md px-4 py-1.5 text-base text-black dark:text-white font-normal bg-gray-350 dark:bg-gray-900 border-0 border-b border-gray-300 dark:border-gray-600 focus:border-gray-400 dark:focus:border-gray-500 focus:outline-none transition-colors placeholder:text-gray-400 dark:placeholder:text-gray-500",
                  value: subpromptValue,
                  onChange: (e) => setSubpromptValue(e.target.value),
                  onFocus: () => setShowDropdown(true),
                  onBlur: () => {
                    subpromptValue && setSubpromptOptions((prev) => [
                      .../* @__PURE__ */ new Set([
                        ...prev,
                        subpromptValue
                      ])
                    ]);
                    setShowDropdown(false);
                  },
                  placeholder: "add an instruction to the prompt below",
                  style: {
                    fontWeight: "normal",
                    boxSizing: "border-box"
                  }
                }
              ),
              showDropdown && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "absolute z-50 w-fit mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg max-h-60 overflow-auto", children: subpromptOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                "div",
                {
                  className: `px-3 py-2 text-base cursor-pointer bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-black dark:text-white font-normal flex justify-between items-center ${option.toLowerCase().includes(
                    subpromptValue.toLowerCase()
                  ) ? "bg-gray-50 dark:bg-gray-750" : ""}`,
                  onMouseDown: (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    setSubpromptValue(option);
                    setShowDropdown(false);
                  },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { children: option }),
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                      "div",
                      {
                        className: "ml-2 px-1 text-gray-700 hover:text-black bg-white dark:bg-gray-800 dark:text-gray-200 dark:hover:text-white",
                        onMouseDown: (e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          setSubpromptOptions(
                            (prev) => prev.filter(
                              (item) => item !== option
                            )
                          );
                        },
                        children: "\xD7"
                      }
                    )
                  ]
                },
                option
              )) })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
              "form",
              {
                className: "relative flex flex-row items-end w-full gap-1 rounded bg-gray-350 dark:bg-gray-900",
                onSubmit: (e) => {
                  e.preventDefault();
                  addChatMessage();
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                    "button",
                    {
                      className: `absolute top-2 right-2 px-1 py-1 rounded bg-gray-400 hover:bg-gray-500 dark:hover:bg-gray-700 dark:bg-gray-600 outline-none border-0 transition-colors cursor-pointer  ${isLoadingAiMessage && "cursor-not-allowed"}`,
                      onClick: (e) => {
                        e.preventDefault();
                        setShowSubprompt(!showSubprompt);
                      },
                      children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PlusCircleIcon, { size: 14, fill: "white" })
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                    "textarea",
                    {
                      className: "w-full p-2 m-2 text-base text-black bg-transparent border-0 outline-none resize-none dark:text-white",
                      placeholder: "Enter your question to chat with this content",
                      rows: 4,
                      value: inputValue,
                      onChange: (e) => {
                        setInputValue(e.target.value);
                      },
                      disabled: isLoadingAiMessage,
                      onKeyDown: onTextAreaKeyDown,
                      style: {
                        fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"'
                      },
                      children: defaultChatTextString
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                    "button",
                    {
                      className: `p-3 rounded bg-gray-400 hover:bg-gray-500 dark:hover:bg-gray-700 dark:bg-gray-600 outline-none border-0 transition-colors cursor-pointer mb-2 mr-2 ${isLoadingAiMessage && "cursor-not-allowed"}`,
                      type: "submit",
                      children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ArrowUpIcon, { size: 18, fill: "white" })
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex flex-row items-center gap-2 p-2 border-t-[1px] border-solid border-transparent border-t-black", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(InfoTooltip, { text: "Generate ideas beyond the context of this graph", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                ToggleButton,
                {
                  toggle: beyondContext,
                  onClick: () => {
                    toggleBeyondContext();
                  }
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "text-[13px]", children: "go beyond this context" })
            ] })
          ] })
        ]
      }
    )
  ] });
};
function scrollToText(text) {
  if (!text) {
    console.error("No text provided");
    return;
  }
  const walker = document.createTreeWalker(
    document.body,
    NodeFilter.SHOW_TEXT,
    null
  );
  let node;
  while (node = walker.nextNode()) {
    if (node && node.parentElement && node.parentElement.closest("#infranodus-shadowroot-container")) {
      continue;
    }
    if (node && node.nodeValue && node.parentElement && node.nodeValue.includes(text.slice(0, 100))) {
      const rect = node.parentElement.getBoundingClientRect();
      const topPosition = rect.top + window.pageYOffset - 100;
      window.scrollTo({ top: topPosition, behavior: "smooth" });
      return;
    }
  }
}
async function goToInfraNodus({
  text,
  previousMessage = void 0,
  graphContext = null,
  currentUser = void 0,
  exportToInfraNodus = void 0,
  setExporting,
  vaultName = ""
}) {
  const contextName = SETTINGS.CONTEXT_NAME;
  const linkToOpen = `${SETTINGS.INFRANODUS_API_URL}/import/editor?text=${encodeURIComponent(
    text
  )}&context=${encodeURIComponent(contextName)}`;
  if (exportToInfraNodus && exportToInfraNodus.type === "auto") {
    const graphTags = [
      `context: ${SETTINGS.CONTEXT_NAME}`,
      `source: chat respose`
    ];
    let graphName = encodeInfraNodusGraphName(
      exportToInfraNodus.graphName,
      SETTINGS.CONTEXT_NAME,
      vaultName
    );
    graphName = await new Promise((resolve) => {
      new GraphNameModal(app, graphName, resolve).open();
    }) || "";
    if (!graphName) {
      return;
    }
    setExporting(true);
    const exportStatus = await InfraNodus.exportText({
      contextName: graphName,
      text,
      tags: graphTags
    });
    if (exportStatus.error) {
      alert(
        `There was an error saving to the ${graphName} graph in InfraNodus. Reload the page and try again or change your extension setting.`
      );
    } else {
      alert(`Saved to the ${graphName} graph in InfraNodus`);
    }
    setExporting(false);
  } else {
    window.open(linkToOpen, "_blank");
  }
}

// src/components/IconButton.tsx
var React3 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var IconButton = React3.forwardRef(
  (props, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      "div",
      {
        ref,
        className: `${props.width ? `w-${props.width}` : ""} flex flex-row items-center justify-end p-2 transition-colors bg-gray-300 rounded cursor-pointer dark:bg-gray-800 hover:bg-gray-350 dark:hover:bg-gray-700`,
        onClick: () => props.onClick(),
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("span", { className: "flex flex-row items-center justify-end text-black dark:text-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            props.icon,
            {
              size: 16,
              className: `${props.className ? props.className : ""}`
            }
          ),
          props.label && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "ml-2 text-sm", children: props.label })
        ] })
      }
    );
  }
);

// src/graph_view/components/GraphViewOverlay.tsx
var import_obsidian8 = require("obsidian");

// src/graph_view/lib/jumpToStatement.ts
var import_obsidian7 = require("obsidian");

// src/utils/files.ts
var import_obsidian5 = require("obsidian");

// src/utils/observer.ts
var attributeElementsFunctionMap = /* @__PURE__ */ new Map();
var attributeObserver = new MutationObserver((mutations) => {
  var _a;
  for (const mutation of mutations) {
    if (!mutation.target) {
      attributeObserver.disconnect();
      attributeElementsFunctionMap.delete(mutation.target);
    }
    if (mutation.type !== "attributes")
      continue;
    if (attributeElementsFunctionMap.has(mutation.target)) {
      (_a = attributeElementsFunctionMap.get(mutation.target)) == null ? void 0 : _a(
        mutation
      );
    }
  }
});
function unObserveElementAttributes(element) {
  if (Array.isArray(element)) {
    for (const el of element) {
      attributeElementsFunctionMap.delete(el);
    }
  } else {
    attributeElementsFunctionMap.delete(element);
  }
}
function observerElementAttributes(params) {
  if (attributeElementsFunctionMap.has(params.element)) {
  }
  attributeElementsFunctionMap.set(params.element, params.onAttributeChange);
  attributeObserver.observe(params.element, { attributes: true });
}
var visibilityElementsFunctionMap = /* @__PURE__ */ new Map();
var visibilityObserver = new IntersectionObserver((entries) => {
  var _a;
  for (const entry of entries) {
    (_a = visibilityElementsFunctionMap.get(entry.target)) == null ? void 0 : _a(
      entry.isIntersecting
    );
  }
});
function observerElementVisibility(params) {
  if (visibilityElementsFunctionMap.has(params.element)) {
  }
  visibilityElementsFunctionMap.set(
    params.element,
    params.onVisibilityChange
  );
  visibilityObserver.observe(params.element);
}
function unObserveAll() {
  attributeObserver.disconnect();
  attributeElementsFunctionMap.clear();
  visibilityObserver.disconnect();
  visibilityElementsFunctionMap.clear();
}

// src/utils/files.ts
var import_markdown_to_txt = __toESM(require_markdown_to_txt());
async function getMentionsOfFile(app2, filePath, searchWords) {
  const file = app2.vault.getAbstractFileByPath(filePath);
  if (!file)
    return;
  const isFolder = file instanceof import_obsidian5.TFolder;
  if (!isFolder)
    await focusOrOpenFile(app2, file.path);
  if (searchWords.length === 0)
    return;
  searchWords = searchWords.map((word) => {
    if (word.startsWith("[[") && word.endsWith("]]")) {
      word = word.slice(2, -2);
      word = word.replace("_", " ");
    }
    return word;
  });
  const name = searchWords.join(" ");
  const elements = document.querySelectorAll(
    '.workspace-tab-header[data-type="search"]'
  );
  if (elements.length !== 1)
    return console.error("Could not find search button");
  const searchButton = elements[0];
  searchButton.click();
  const searchInput = document.querySelector(
    'input[type="search"][placeholder="Search..."]'
  );
  searchInput.value = `${name}`;
  searchInput.dispatchEvent(new Event("input", { bubbles: true }));
  setTimeout(async () => {
    const el = document.createElement("div");
    el.style.position = "absolute";
    el.style.display = "none";
    document.body.appendChild(el);
    searchInput.blur();
    el.focus();
    el.click();
    await new Promise((r) => setTimeout(r, 0));
    document.body.removeChild(el);
  }, 0);
  await new Promise((r) => setTimeout(r, 500));
}
async function openLeafWithPath(file, workspace) {
  let leaf;
  workspace.iterateAllLeaves((openLeaf) => {
    var _a;
    const isMarkdownView = openLeaf.view instanceof import_obsidian5.MarkdownView;
    const isInMainPane = openLeaf.getRoot() === workspace.rootSplit;
    if (openLeaf.view instanceof import_obsidian5.FileView && ((_a = openLeaf.view.file) == null ? void 0 : _a.path) === file.path && isMarkdownView && isInMainPane) {
      leaf = openLeaf;
      return true;
    }
  });
  if (leaf) {
    workspace.setActiveLeaf(leaf, { focus: true });
    workspace.setActiveLeaf(leaf);
    workspace.revealLeaf(leaf);
  } else {
    const currentLeaf = workspace.getLeaf();
    await currentLeaf.openFile(file, { active: true });
    leaf = currentLeaf;
  }
  await new Promise((r) => setTimeout(r, 250));
  return leaf;
}
async function fileWithText(params) {
  const { app: app2, textToFind, file } = params;
  if (file instanceof import_obsidian5.TFile) {
    const content = await app2.vault.read(file);
    if (content.contains(textToFind)) {
      return file;
    }
    return null;
  } else if (file instanceof import_obsidian5.TFolder) {
    for (const child of file.children) {
      const found = await fileWithText({ file: child, app: app2, textToFind });
      if (found)
        return found;
    }
  }
  return null;
}
async function findFileWithText(params) {
  try {
    let abstractFile = params.app.vault.getAbstractFileByPath(
      params.filePath
    );
    if (!abstractFile)
      abstractFile = params.app.vault.getRoot();
    const foundFileWithText = await fileWithText({
      app: params.app,
      textToFind: params.textToFind,
      file: abstractFile
    });
    if (foundFileWithText)
      return foundFileWithText;
    if (abstractFile.path === "/")
      return null;
    abstractFile = params.app.vault.getRoot();
    const newFileFound = await fileWithText({
      app: params.app,
      textToFind: params.textToFind,
      file: abstractFile
    });
    if (newFileFound)
      return newFileFound;
    return null;
  } catch (err) {
    console.error("[findFileWithText]", err);
    return null;
  }
  return null;
}
async function focusOrOpenFile(app2, filePath, textToFind) {
  const workspace = app2.workspace;
  const file = app2.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian5.TFile) {
    return await openLeafWithPath(file, workspace);
  } else if (file instanceof import_obsidian5.TFolder && textToFind) {
    async function fileWithText2(file2) {
      if (file2 instanceof import_obsidian5.TFile) {
        const content = (await app2.vault.read(file2)).toLowerCase();
        if (content.contains(textToFind)) {
          return file2;
        }
        return null;
      } else if (file2 instanceof import_obsidian5.TFolder) {
        for (const child of file2.children) {
          const found = await fileWithText2(child);
          if (found)
            return found;
        }
      }
      return null;
    }
    textToFind = textToFind.toLowerCase().trim();
    const fileFound = await fileWithText2(file);
    if (!fileFound)
      return;
    return await openLeafWithPath(fileFound, workspace);
  } else {
    console.error(`File not found: ${filePath}`);
  }
}
async function unhighlightStatements(app2, statements) {
  const workspace = app2.workspace;
  const elementsUnhighlighted = [];
  workspace.iterateAllLeaves((openLeaf) => {
    if (!(openLeaf.view instanceof import_obsidian5.FileView))
      return;
    const html = openLeaf.view.containerEl.querySelectorAll(
      ".infranodus-plugin-yellow-highlight"
    );
    for (const element of Array.from(html)) {
      for (const st of statements) {
        const statement = condenseText(st, true);
        const textContent = condenseText(
          element.textContent || "",
          true
        );
        if (!textContent.contains(statement))
          continue;
        element.classList.remove("infranodus-plugin-yellow-highlight");
        elementsUnhighlighted.push(element);
      }
    }
  });
  return elementsUnhighlighted;
}
function condenseText(text, all = false) {
  const modifiedText = text.replace(/\[{2,}([^\[\]]+)\]{2,}/g, "$1");
  let m = (0, import_markdown_to_txt.default)(modifiedText).toLowerCase().trim();
  if (all) {
    m = stripLatex(m);
    m = stripImages(m);
    m = stripMarkdownTable(m);
  }
  return m;
}
function stripLatex(text) {
  return text.replace(/\$[^$]+\$/g, "");
}
function stripImages(text) {
  const imagePattern = /\S+\.(png|jpg|jpeg|gif|svg)/gi;
  return text.replace(imagePattern, "");
}
function stripMarkdownTable(text) {
  text = text.replace(/\s/g, "");
  text = text.replace(/\|/g, "");
  text = text.toLowerCase();
  return text;
}
function findLowestElementWithText(element, text) {
  function _findLowestElementWithText(element2, text2, options = { all: false, haveTitle: false }) {
    var _a;
    if (element2.classList.contains("inline-title") && options.haveTitle)
      return null;
    const textContent = condenseText((_a = element2.innerText) != null ? _a : "", options.all);
    if (!textContent)
      return null;
    if (!textContent.contains(text2))
      return null;
    for (const child of Array.from(element2.children)) {
      const foundElement = _findLowestElementWithText(
        child,
        text2,
        options
      );
      if (foundElement)
        return foundElement;
    }
    return element2;
  }
  const fElBase = _findLowestElementWithText(element, text);
  if (fElBase)
    return fElBase;
  const fElAll = _findLowestElementWithText(
    element,
    condenseText(text, true),
    { all: true }
  );
  if (fElAll)
    return fElAll;
  const title = element.querySelector(".inline-title");
  const fElTitle = _findLowestElementWithText(title, text, {
    all: true,
    haveTitle: true
  });
  if (fElTitle)
    return fElTitle;
  return null;
}
async function findLineEntryInLeaf(leaf, options) {
  const view = leaf.view;
  const viewMode = view.getMode();
  const htmlContent = view.containerEl.querySelector(
    viewMode === "source" ? ".markdown-source-view" : ".markdown-reading-view"
  );
  if (!htmlContent)
    return console.error("No html content found");
  try {
    const editor = view.editor;
    const content = editor.getValue();
    const offset = content.indexOf(options.textContent);
    if (offset === -1) {
      console.error("Text content not found in the file");
      return;
    }
    const pos = editor.offsetToPos(offset);
    editor.setCursor(pos);
  } catch (err) {
    console.error("[no]", err);
  }
  let element = findLowestElementWithText(htmlContent, options.textContent);
  element == null ? void 0 : element.setAttribute("data-infranodus-highlight", "true");
  const scrollView = view.containerEl.querySelector(
    viewMode === "source" ? ".cm-scroller" : ".markdown-preview-view"
  );
  if (!element) {
    if (!scrollView) {
      throw new Error("NO SCROLL VIEW");
    } else {
    }
    scrollView.scrollTo({
      top: 0,
      behavior: "instant"
    });
    const originalScrollHeight = scrollView.scrollTop;
    let lastScrollHeight = originalScrollHeight + 50;
    let attempts = 0;
    const maxAttempts = 1e3;
    while (!element && attempts < maxAttempts) {
      scrollView.scrollTo({
        top: lastScrollHeight,
        behavior: "instant"
      });
      await new Promise((resolve) => setTimeout(resolve, 100));
      element = findLowestElementWithText(
        scrollView,
        options.textContent
      );
      if (element) {
        break;
      }
      lastScrollHeight += 100;
      attempts++;
      if (scrollView.scrollHeight - scrollView.scrollTop <= scrollView.clientHeight + 1) {
        break;
      }
    }
    if (!element) {
      scrollView.scrollTo(0, 0);
      return;
    }
  }
  if (!options.dontScroll && element) {
    element.scrollIntoView({
      behavior: "smooth",
      block: "center",
      inline: "center"
    });
    if (scrollView) {
      const rect = element.getBoundingClientRect();
      const containerRect = scrollView.getBoundingClientRect();
      let scrollAmount = 0;
      if (rect.top < containerRect.top) {
        scrollAmount = rect.top - containerRect.top;
      } else if (rect.bottom > containerRect.bottom) {
        scrollAmount = rect.bottom - containerRect.bottom;
      }
      if (scrollAmount !== 0) {
        const newScrollTop = scrollView.scrollTop + scrollAmount + 100;
        scrollView.scrollTo({
          top: newScrollTop,
          behavior: "instant"
        });
      }
    }
  }
  if (element) {
    const hclass = "infranodus-plugin-yellow-highlight";
    element.classList.add(hclass);
    observerElementAttributes({
      element,
      onAttributeChange: (mutation) => {
        if (element.classList.contains(hclass))
          return;
        element.classList.add(hclass);
      }
    });
  }
}
async function getLinkedUnlinkedMentionsOfFile(params) {
  if (!params.includeLinked && !params.includeUnlinked)
    return [];
  const regex = /\[\[([^\]]+)\]\]/g;
  const filePath = params.file.path;
  const filepathSanitized = sanitizeNavigateLinkFromName(filePath);
  const title = params.file.basename;
  const titleLink = `[[${title}]]`;
  const titleLower = title.toLowerCase();
  const titleSanitized = sanitizeNavigateLinkFromName(title);
  const statementMentions = [];
  let linkedCount = 0;
  let unlinkedCount = 0;
  let filesRead = 0;
  const activeFile = this.app.workspace.getActiveFile();
  if (params.includeLinked) {
    const backlinks = activeFile ? this.app.metadataCache.getBacklinksForFile(activeFile) : {};
    const backlinksData = backlinks.data;
    if (backlinksData && backlinksData.size > 0) {
      for (const [file, fileBacklinks] of backlinksData.entries()) {
        if (file == filePath)
          continue;
        const fileToOpen = this.app.vault.getAbstractFileByPath(file);
        if (!fileToOpen)
          continue;
        const fileContent = await this.app.vault.read(fileToOpen);
        fileBacklinks.forEach((fileBacklink) => {
          const { start, end } = fileBacklink.position;
          const surroundingText = extractSurroundingText(
            fileContent,
            start.offset,
            end.offset
          );
          if (surroundingText) {
            statementMentions.push(surroundingText);
          }
        });
      }
    }
  }
  if (params.includeUnlinked) {
    const root = params.app.vault.getRoot();
    await addUnlinkedToStatementMentions(root, params.useOwnUnlinkedSearch);
  }
  return statementMentions || [];
  async function addUnlinkedToStatementMentions(file, useOwnUnlinkedSearch = false) {
    if (file instanceof import_obsidian5.TFile) {
      if (!file.path.endsWith(".md"))
        return;
      if (params.excludePaths.includes(file.path))
        return;
      filesRead++;
      const contentToAdd = await params.app.vault.read(file);
      const statements = contentToAdd.split("\n");
      for (const statement of statements) {
        if (!statement)
          continue;
        const wordInStatement = useOwnUnlinkedSearch ? statement.toLowerCase().includes(titleLower) : new RegExp(`\\b${titleLower}\\b`, "gi").test(
          statement.toLowerCase()
        );
        if (wordInStatement && statementMentions.indexOf(statement) == -1) {
          statementMentions.push(statement);
        }
      }
    } else if (file instanceof import_obsidian5.TFolder) {
      const promises = file.children.map(
        (child) => addUnlinkedToStatementMentions(child, useOwnUnlinkedSearch)
      );
      await Promise.all(promises);
    }
  }
}
async function getContentsFromFilePath(params) {
  const { filePath, app: app2 } = params;
  if (!filePath || !app2)
    return;
  const abstractFile = app2.vault.getAbstractFileByPath(filePath);
  if (!abstractFile)
    return;
  if (abstractFile instanceof import_obsidian5.TFile) {
    let content = await app2.vault.read(abstractFile);
    if (!params.ignoreLinkedUnlinked) {
      const statementMentions = await getLinkedUnlinkedMentionsOfFile({
        app: app2,
        file: abstractFile,
        excludePaths: [filePath],
        includeLinked: SETTINGS.INCLUDE_LINKED_MENTIONS === "For all pages" || SETTINGS.INCLUDE_LINKED_MENTIONS === "For empty pages only" && !content.trim(),
        includeUnlinked: SETTINGS.INCLUDE_UNLINKED_MENTIONS === "For all pages" || SETTINGS.INCLUDE_UNLINKED_MENTIONS === "For empty pages only" && !content.trim(),
        useOwnUnlinkedSearch: SETTINGS.USE_OWN_UNLINKED_SEARCH === "yes"
      }) || [];
      statementMentions.forEach(
        (statement) => content += statement + "\n"
      );
    }
    const pageNames = [[abstractFile.basename]];
    return { content, pageNames };
  } else if (abstractFile instanceof import_obsidian5.TFolder) {
    const files = [];
    let content = "";
    const statements = [];
    const pageNames = [];
    async function readAbstractFile(file) {
      if (file instanceof import_obsidian5.TFile) {
        if (!file.path.endsWith(".md"))
          return;
        const contentToAdd = await app2.vault.read(file);
        content += contentToAdd + "\n\n";
        files.push({ path: file.path, content: contentToAdd });
        statements.push(contentToAdd);
        pageNames.push([file.basename]);
      } else if (file instanceof import_obsidian5.TFolder) {
        const promises = file.children.map(
          (child) => readAbstractFile(child)
        );
        await Promise.all(promises);
      }
    }
    await readAbstractFile(abstractFile);
    return { content, files, statements, pageNames };
  }
  return;
}
function sanitizeNavigateLinkFromName(link) {
  if (link.startsWith("[[") && link.endsWith("]]")) {
    link = link.slice(2, -2);
  }
  link = link.replace(/_/g, "");
  link = link.replace(/ /g, "");
  return link.toLowerCase().trim();
}
function findFileFromName(app2, name) {
  const filesFound = {
    base: null,
    lower: null,
    sanitized: null
  };
  const generateVariations = (str) => {
    const words = str.split(/[_\s-]+/);
    if (words.length <= 1)
      return [str];
    const separators = [" ", "-", "_"];
    const results = /* @__PURE__ */ new Set([str]);
    const generateCombinations = (wordArray, currentStr, position) => {
      if (position >= wordArray.length - 1) {
        results.add(currentStr);
        return;
      }
      for (const separator of separators) {
        generateCombinations(
          wordArray,
          currentStr + separator + wordArray[position + 1],
          position + 1
        );
      }
    };
    for (const separator of separators) {
      generateCombinations(words, words[0], 0);
    }
    return Array.from(results);
  };
  const variations = generateVariations(name);
  const fNames = variations.flatMap((v) => [v, v + ".md"]);
  const fNamesLow = fNames.map((n) => n.toLowerCase());
  const fNamesSanitized = fNames.map((n) => sanitizeNavigateLinkFromName(n));
  let count = 0;
  function findFile(file) {
    if (file instanceof import_obsidian5.TFile) {
      count++;
      const fn = file.name;
      if (fNames.includes(fn)) {
        filesFound.base = file;
        return;
      }
      const fnLow = fn.toLowerCase();
      if (fNamesLow.includes(fnLow)) {
        filesFound.lower = file;
        return;
      }
      const fnSan = sanitizeNavigateLinkFromName(fn);
      if (fNamesSanitized.includes(fnSan)) {
        filesFound.sanitized = file;
        return;
      }
    } else if (file instanceof import_obsidian5.TFolder) {
      for (const child of file.children) {
        findFile(child);
        if (filesFound.base)
          return;
      }
    }
  }
  findFile(app2.vault.getRoot());
  if (filesFound.base) {
    return filesFound.base;
  }
  if (filesFound.lower) {
    return filesFound.lower;
  }
  if (filesFound.sanitized) {
    return filesFound.sanitized;
  }
  return null;
}
function findFileFromPath(app2, path) {
  const root = app2.vault.getRoot();
  function findFile(file) {
    if (file instanceof import_obsidian5.TFile) {
      if (file.path.toLowerCase() === path)
        return file;
      return null;
    } else if (file instanceof import_obsidian5.TFolder) {
      for (const child of file.children) {
        const found = findFile(child);
        if (found)
          return found;
      }
    }
    return null;
  }
  return findFile(root);
}
function extractSurroundingText(content, start, end) {
  const beforeBacklink = content.slice(0, start);
  const afterBacklink = content.slice(end);
  const sentenceStart = beforeBacklink.lastIndexOf("\n") !== -1 ? beforeBacklink.lastIndexOf("\n") + 1 : 0;
  const sentenceEnd = afterBacklink.indexOf("\n") !== -1 ? end + afterBacklink.indexOf("\n") + 1 : content.length;
  return content.slice(sentenceStart, sentenceEnd).trim();
}

// src/utils/view.ts
var import_obsidian6 = require("obsidian");
function getMarkdownViewOfPath(params) {
  try {
    let view = null;
    params.app.workspace.iterateAllLeaves((leaf) => {
      if (view)
        return;
      if (!(leaf.view instanceof import_obsidian6.MarkdownView))
        return;
      const file = leaf.view.file;
      if (!file)
        return;
      if (file.path !== params.filePath)
        return;
      view = leaf.view;
    });
    return view;
  } catch (err) {
    console.error("Error getting markdown view of path", err);
    return null;
  }
}
async function setLeafMode(params) {
  try {
    const viewState = params.leaf.getViewState();
    viewState.state.mode = params.mode;
    await params.leaf.setViewState(viewState);
  } catch (err) {
    console.error("Error setting leaf mode", err);
  }
}

// src/graph_view/lib/jumpToStatement.ts
async function jumpToStatementAndOpenFile(params) {
  var _a;
  try {
    let textToJumpTo = "";
    let file = await findFileWithText({
      app: params.app,
      filePath: params.filePath,
      textToFind: params.statementToJumpTo
    });
    if (!file && params.statementsToShow && params.statementsToShow.length > 0) {
      const fileToJumpTo = params.iteration ? params.iteration % params.statementsToShow.length : 0;
      textToJumpTo = params.statementsToShow[fileToJumpTo];
      file = await findFileWithText({
        app: params.app,
        filePath: params.filePath,
        textToFind: textToJumpTo
      });
    }
    if (!file) {
      new import_obsidian7.Notice("Cannot find the statement in the original content.");
      throw new Error("File not found with statement");
    }
    const leaf = await openLeafWithPath(file, params.app.workspace);
    if (!leaf) {
      new import_obsidian7.Notice("Cannot find the page with the original content.");
      throw new Error("Leaf not found");
    }
    const noticeText = `Jumping to statement - ${textToJumpTo || params.statementToJumpTo}`;
    new import_obsidian7.Notice(noticeText);
    if (SETTINGS.WHEN_USING_LOCATE === "Force to Edit Mode") {
      await setLeafMode({ leaf, mode: "source" });
    }
    await findLineEntryInLeaf(leaf, {
      textContent: textToJumpTo || params.statementToJumpTo,
      filePath: (_a = file.path) != null ? _a : params.filePath,
      app: params.app
    });
  } catch (error) {
    console.error("[jumpToStatementAndOpenFile]", error);
  }
}

// src/graph_view/components/GraphViewOverlay.tsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var GraphViewOverlay = (params) => {
  let adviceMode = params.graphViewContext.adviceMode;
  let stateRef = params.graphViewContext.stateRef;
  let graphViewContext = params.graphViewContext;
  const { textToShow, setTextToShow } = params;
  const { showGraphContextAdvice } = params;
  const { filePath, app: app2 } = params.graphContext;
  const { overlayShowMode, setOverlayShowMode } = params;
  const vaultName = app2.vault.getName();
  const isFolder = filePath && !filePath.endsWith(".md");
  const topicsFiltered = params.topicsFiltered;
  const [isLoading, setIsLoading] = (0, import_react4.useState)(false);
  const [copied, setCopied] = (0, import_react4.useState)(false);
  const [copiedGraphText, setCopiedGraphText] = (0, import_react4.useState)(false);
  const [exportedGraph, setExportedGraph] = (0, import_react4.useState)(false);
  const [error, setError] = (0, import_react4.useState)("");
  const [beyondContext, setBeyondContext] = (0, import_react4.useState)(false);
  const navigateToStatement2 = params.navigateToStatement;
  const aiQuestionsList = (0, import_react4.useRef)([]);
  const aiQuestionsIndex = (0, import_react4.useRef)(0);
  const chatHistoryRef = (0, import_react4.useRef)([]);
  const [showingSettings, setShowingSettings] = (0, import_react4.useState)(false);
  const [jumpIteration, setJumpIteration] = (0, import_react4.useState)(0);
  const exportToInfraNodus = {
    type: SETTINGS.EXPORT_TYPE,
    graphName: SETTINGS.EXPORT_GRAPH
  };
  const [currentUser, setCurrentUser] = (0, import_react4.useState)(
    graphViewContext.currentUser ? graphViewContext.currentUser : ""
  );
  const currentPlatform8 = import_obsidian8.Platform.isMobileApp || import_obsidian8.Platform.isMobile ? "mobile" : "desktop";
  (0, import_react4.useEffect)(() => {
    if (overlayShowMode === "ai")
      showGraphAiAdvice({ modal: "graph_advice_button" });
  }, [overlayShowMode]);
  (0, import_react4.useEffect)(() => {
    if (!adviceMode)
      return;
    if (adviceMode === "none")
      return;
    if (overlayShowMode === "ai") {
      showGraphAiAdvice({ modal: "graph_advice_button" });
    } else if (overlayShowMode === "context" && adviceMode === "context") {
    } else
      setOverlayShowMode("ai");
  }, [adviceMode]);
  const toggleBeyondContext = () => {
    setBeyondContext((prev) => !prev);
  };
  (0, import_react4.useEffect)(() => {
    if (overlayShowMode == "ai") {
      showGraphAiAdvice({
        modal: "beyond_context"
      });
    }
  }, [beyondContext]);
  (0, import_react4.useEffect)(() => {
    if (error)
      setTimeout(() => setError(""), 5e3);
  }, [error]);
  async function showGraphAiAdvice({ modal }) {
    if (isLoading)
      return;
    setTextToShow("ai generating...");
    setIsLoading(true);
    if (adviceMode === "context") {
      graphViewContext.setAdviceMode("question");
      adviceMode = "question";
    }
    try {
      if (adviceMode === "none")
        graphViewContext.setAdviceMode("question");
      const choicesText = await generateAiAdvice({
        extractedGraphData: stateRef.current.extractedGraphData,
        beyondContext,
        adviceMode: adviceMode === "none" ? "question" : adviceMode,
        modal,
        stateRef,
        wordsToSearch: graphViewContext.wordsToSearch,
        userSettings: SETTINGS,
        currentGraphPanel: params.currentGraphPanel,
        setTextToShow
      });
      if (!choicesText) {
        new import_obsidian8.Notice(
          "No AI advice could be generated. Please, try again later or with another file.",
          0
        );
        setIsLoading(false);
        setOverlayShowMode(null);
        return;
      }
      aiQuestionsList.current = choicesText;
      aiQuestionsIndex.current = 0;
      setTextToShow(choicesText[0]);
    } catch (e) {
      console.error(e);
      new import_obsidian8.Notice(e, 0);
      setIsLoading(false);
      setOverlayShowMode(null);
    }
    setIsLoading(false);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
    error && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("p", { className: "text-sm font-bold", children: error }),
    /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "relative flex flex-col gap-4 pr-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "absolute z-10 flex flex-col items-start justify-start gap-2 mt-2 ml-2 text-black rounded w-fit dark:text-white", children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Generate AI Advice", direction: "right", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          IconButton,
          {
            icon: SparkleFillIcon,
            className: `text-violet-700 dark:text-violet-400`,
            onClick: () => {
              setOverlayShowMode("ai");
              if (!topicsFiltered && !graphViewContext) {
                params.sendDataToIframe("GAPS" /* GAPS */, 1);
                params.sendDataToIframe(
                  "GAPS_SHOW" /* GAPS_SHOW */,
                  1
                );
              }
              if (topicsFiltered && topicsFiltered.length == 0 && (graphViewContext == null ? void 0 : graphViewContext.wordsToSearch) && (graphViewContext == null ? void 0 : graphViewContext.wordsToSearch.length) == 0) {
                params.sendDataToIframe("GAPS" /* GAPS */, 1);
                params.sendDataToIframe(
                  "GAPS_SHOW" /* GAPS_SHOW */,
                  1
                );
              }
            },
            label: `${currentPlatform8 == "mobile" || overlayShowMode ? "" : "insights"}`
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Open AI Chat", direction: "right", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          IconButton,
          {
            icon: CommentDiscussionIcon,
            onClick: () => {
              setOverlayShowMode("aiChat");
            },
            label: `${currentPlatform8 == "mobile" || overlayShowMode ? "" : "ai chat"}`
          }
        ) }),
        !overlayShowMode || overlayShowMode && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, {})
      ] }),
      (overlayShowMode === "ai" || overlayShowMode === "context") && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "absolute z-10 top-2 left-12 @[420px]/main:w-[376px] flex flex-col items-stretch text-black dark:text-white bg-gray-300 dark:bg-gray-800 pt-2 rounded", children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex flex-row items-center justify-start gap-3 pl-4 pr-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Copy to clipboard", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            "span",
            {
              className: "cursor-pointer",
              onClick: () => {
                if (copied)
                  return;
                if (textToShow === "ai generating...")
                  return;
                copyToClipboard({
                  text: textToShow
                });
                setCopied(true);
                setTimeout(
                  () => setCopied(false),
                  2e3
                );
              },
              children: copied ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CheckIcon, { size: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CopyIcon, { size: 16 })
            }
          ) }),
          adviceMode == "context" && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, {}),
          adviceMode == "summary" && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Regenerate summary", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            "span",
            {
              className: "ml-4 cursor-pointer",
              onClick: () => {
                showGraphAiAdvice({
                  modal: "reload"
                });
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SyncIcon, { size: 16 })
            }
          ) }),
          (adviceMode == "question" || adviceMode == "develop") && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Cycle through AI responses", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            "span",
            {
              className: "ml-4 cursor-pointer",
              onClick: () => {
                if (aiQuestionsList.current.length === 0) {
                  return;
                }
                let newIndex = aiQuestionsIndex.current + 1;
                if (newIndex >= aiQuestionsList.current.length) {
                  showGraphAiAdvice({
                    modal: "reload"
                  });
                  aiQuestionsIndex.current = 0;
                  return;
                }
                aiQuestionsIndex.current = newIndex;
                setTextToShow(
                  aiQuestionsList.current[newIndex]
                );
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(SyncIcon, { size: 16 })
            }
          ) }),
          adviceMode == "context" && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
              "span",
              {
                className: `cursor-pointer`,
                onClick: () => {
                  showGraphContextAdvice("back");
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ChevronLeftIcon, { size: 16 })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
              "span",
              {
                className: `cursor-pointer -ml-2`,
                onClick: () => {
                  showGraphContextAdvice("next");
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ChevronRightIcon, { size: 16 })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
              "span",
              {
                className: "flex flex-row items-center gap-1 ml-4 text-sm font-bold cursor-pointer",
                onClick: async () => {
                  await jumpToStatementAndOpenFile({
                    app: app2,
                    filePath: filePath || "",
                    statementToJumpTo: textToShow,
                    statementsToShow: params.statementsToShow,
                    iteration: jumpIteration
                  });
                  setJumpIteration(jumpIteration + 1);
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
                    RepoPullIcon,
                    {
                      className: "mt-1",
                      size: 16
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { className: "ml-1", children: "open in context" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Paste to AI chat", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
            "span",
            {
              className: "flex flex-row items-center gap-1 ml-4 text-sm font-bold cursor-pointer",
              onClick: () => {
                setOverlayShowMode("aiChat");
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CommentDiscussionIcon, { size: 16 }),
                [
                  "summary",
                  "question",
                  "develop"
                ].includes(adviceMode) && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { children: "to chat" })
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Save this to InfraNodus", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
            "span",
            {
              className: "flex flex-row items-center gap-1 ml-4 text-sm font-bold cursor-pointer",
              onClick: () => {
                goToInfraNodus2({
                  textToShow,
                  contextName: filePath,
                  exportToInfraNodus,
                  adviceMode,
                  vaultName,
                  app: app2
                });
              },
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CrossReferenceIcon, { size: 16 }),
                adviceMode === "context" ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { children: "save" }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { children: "save clip" })
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            "span",
            {
              className: "flex flex-row items-center gap-1 ml-auto text-sm font-bold cursor-pointer",
              onClick: () => setOverlayShowMode(null),
              children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(XCircleIcon, { size: 16 })
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "span",
          {
            className: `max-h-64 m-4 overflow-y-auto text-base whitespace-pre-wrap font-semibold ${isLoading && "animate-pulse"}`,
            children: textToShow
          }
        ),
        (adviceMode == "question" || adviceMode == "develop") && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex flex-row items-center gap-2 p-2 border-t-[1px] border-solid border-transparent border-t-black", children: [
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(InfoTooltip, { text: "Generate ideas beyond the context of this graph", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            ToggleButton,
            {
              toggle: beyondContext,
              onClick: () => {
                toggleBeyondContext();
              }
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { className: "text-[13px]", children: "go beyond this context" })
        ] })
      ] }),
      overlayShowMode === "aiChat" && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        GraphViewOverlayChat,
        {
          startingChat: textToShow === "ai generating..." ? "" : textToShow,
          closeChat: () => setOverlayShowMode(null),
          stateRef,
          chatHistory: chatHistoryRef.current,
          wordsToSearch: graphViewContext.wordsToSearch,
          topicsFiltered,
          filteredStatements: params.filteredStatements,
          app: app2
        }
      )
    ] })
  ] });
};
async function goToInfraNodus2({
  textToShow = "",
  contextName = "",
  exportToInfraNodus = { type: "manual", graphName: "" },
  adviceMode = "",
  vaultName = "",
  //@ts-ignore
  app: app2
}) {
  if (!textToShow || textToShow === "ai generating...") {
    return;
  }
  const encodedText = encodeURIComponent(textToShow);
  const encodedContext = adviceMode != "context" ? encodeInfraNodusGraphName(
    contextName,
    SETTINGS.CONTEXT_NAME,
    vaultName
  ) : encodeInfraNodusGraphName(
    contextName,
    SETTINGS.EXPORT_GRAPH,
    vaultName
  );
  const linkToOpen = `${SETTINGS.INFRANODUS_API_URL}/import/editor?text=${encodedText}&context=${encodedContext}`;
  if (exportToInfraNodus && exportToInfraNodus.type === "auto") {
    const graphTags = [`context: ${encodedContext}`];
    let graphName = encodedContext;
    graphName = await new Promise((resolve) => {
      new GraphNameModal(app2, graphName, resolve).open();
    }) || "";
    if (!graphName) {
      return;
    }
    const dataToSave = {
      contextName: graphName,
      text: textToShow,
      tags: graphTags
    };
    const exportStatus = await InfraNodus.exportText(dataToSave);
    if (exportStatus.error) {
      alert(
        `There was an error saving to the ${graphName} graph in InfraNodus. Reload the page and try again or change your extension setting.`
      );
    } else {
      alert(`Saved to the ${graphName} graph in InfraNodus`);
    }
  } else {
    window.open(linkToOpen, "_blank");
  }
}

// src/graph_view/components/ErrorHandler.tsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var ErrorHandler = (params) => {
  var _a;
  const ctx = params.context;
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "absolute inset-0 z-[5] flex flex-col items-center justify-center p-10 bg-white dark:bg-black", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("span", { className: "text-lg text-gray-600 dark:text-gray-200", children: [
    params.error === "no-wiki-links" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("h2", { children: "No wiki links found" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "No [[wiki links]] were detected. You can open a page with [[wiki links]] or change the",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "settings",
            action: () => ctx.setShowingSettings(true),
            addSpacesAround: true
          }
        ),
        "to also process text in the documents."
      ] })
    ] }),
    params.error === "invalid-api-key" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("h2", { children: "Please, add your InfraNodus API key" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "Cannot connect to your InfraNodus account. This may be because your API key has expired or is incorrect. Please, go to",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "infranodus subscriptions",
            href: SETTINGS.INFRANODUS_API_URL + "/subscription",
            addSpacesAround: true
          }
        ),
        " ",
        "page to get your updated API key and add it to the",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "plugin settings",
            action: () => ctx.setShowingSettings(true),
            addSpaceLeft: true
          }
        ),
        ". If you don't have an account, you can create a free trial one on any tier and use this plugin straight away."
      ] })
    ] }),
    params.error === "no-content" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("h2", { children: "No content found" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "No content was found in the file. Please, make sure the file is not empty and contains text. Or check if you turned on the option to process linked and unlinked mentions in the",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "settings",
            action: () => ctx.setShowingSettings(true),
            addSpacesAround: true
          }
        ),
        "panel."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "Alternatively, if there is additional content in the file since it was loaded, you can",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "reload",
            action: () => params.graphContext.reloadGraph({
              filePath: params.graphContext.filePath || "",
              leaf: params.graphContext.app.workspace.getLeaf(),
              fromLayoutChange: true
            }),
            addSpacesAround: true
          }
        ),
        "the graph."
      ] })
    ] }),
    params.error === "content-empty" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("h2", { children: "Content processing issue" }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        'Could not generate an InfraNodus graph even though content is present. This may be due to your text processing settings. For instance, if you have "[[Wiki Links]] Only" turned on, but there are no [[wiki links]] on the analyzed page. Please, go to the',
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "plugin settings",
            action: () => ctx.setShowingSettings(true),
            addSpacesAround: true
          }
        ),
        "and check your setup or try another page."
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "Alternatively, if there is additional content in the file since it was loaded, you can",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "reload",
            action: () => params.graphContext.reloadGraph({
              filePath: params.graphContext.filePath || "",
              leaf: params.graphContext.app.workspace.getLeaf(),
              fromLayoutChange: true
            }),
            addSpacesAround: true
          }
        ),
        "the graph."
      ] })
    ] }),
    params.error === "generic-error" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("h2", { children: "Ooops, there was an error..." }),
      params.errorText == "net::ERR_CONNECTION_REFUSED" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "There was a problem connecting to InfraNodus.Com. Please, try again in a minute or contact our",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "support",
            addSpacesAround: true,
            href: "https://support.noduslabs.com/hc/en-us/requests/new"
          }
        ),
        "and describe what you were trying to do."
      ] }),
      params.errorText == "net::ERR_NAME_NOT_RESOLVED" && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("p", { children: [
        "Could not connect to the InfraNodus API domain. Please, check your connection, try again later, or contact our ",
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "support",
            addSpacesAround: true,
            href: "https://support.noduslabs.com/hc/en-us/requests/new"
          }
        ),
        "and describe what you were trying to do."
      ] }),
      params.errorText != "net::ERR_CONNECTION_REFUSED" && /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("p", { children: params.errorText || "An unknown error occured. Please try again later or with another page." }),
      ((_a = params.errorText) == null ? void 0 : _a.includes("API key")) && /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("br", {}),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          ActionLink,
          {
            text: "go to plugin settings",
            action: () => ctx.setShowingSettings(true),
            addSpacesAround: true
          }
        )
      ] })
    ] })
  ] }) });
};
var ActionLink = (params) => {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(import_jsx_runtime6.Fragment, { children: [
    (params.addSpacesAround || params.addSpaceLeft) && " ",
    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      "a",
      {
        className: "text-blue-500 underline cursor-pointer",
        onClick: params.action,
        href: params.href,
        children: params.text
      }
    ),
    (params.addSpacesAround || params.addSpaceRight) && " "
  ] });
};

// src/utils/arrays.ts
function arraysAreEqual(array1, array2) {
  return array1.length === array2.length && array1.every((value, index) => value === array2[index]);
}
function extractIndexToUse({ direction, currentElementNumber, arrayLength }) {
  const overshootFront = (direction == "next" || direction == "gap") && currentElementNumber == arrayLength;
  const overshootBack = direction == "back" && currentElementNumber == 1;
  const elementToShow = currentElementNumber == 0 || overshootFront ? 1 : overshootBack ? arrayLength : direction == "back" ? currentElementNumber - 1 : currentElementNumber + 1;
  const indexToUse = elementToShow - 1;
  return indexToUse;
}

// src/graph_view/lib/generateTextForContext.ts
function generateTextForContext(params, source) {
  const currentStatementShown = params.currentContextShown;
  let contentToShow = "";
  if (params.wordsToSearch.length > 0) {
    const statementsToShow = params.filteredStatements;
    const statementsTextToShow = statementsToShow.map(
      (statement) => statement.content
    );
    const indexToUse = extractIndexToUse({ direction: source, currentElementNumber: currentStatementShown, arrayLength: statementsTextToShow.length });
    const contentToShow2 = statementsTextToShow[indexToUse];
    return {
      contentToShow: `${contentToShow2}`,
      currentContextShown: indexToUse + 1,
      statementsToShow: statementsTextToShow
    };
  }
  if (params.topicsFiltered.length > 0) {
    const statementsOfSelectedTopics = params.extractedGraphData.all_statements_with_top ? params.extractedGraphData.all_statements_with_top.filter(
      (statement) => params.topicsFiltered.includes(
        statement.topStatementCommunity
      )
    ) : [];
    const topCommunityStatements = params.extractedGraphData.all_statements_with_top.filter(
      (statement) => params.topicsFiltered.includes(
        statement.topStatementOfCommunity
      )
    ).sort(
      (a, b) => a.id - b.id
    );
    const statementsTextToShow = [];
    statementsOfSelectedTopics.forEach(
      (statement) => {
        if (statementsTextToShow.includes(statement.content))
          return;
        statementsTextToShow.push(statement.content);
      }
    );
    if (!statementsOfSelectedTopics || statementsOfSelectedTopics.length == 0)
      return null;
    const indexToUse = extractIndexToUse({ direction: source, currentElementNumber: currentStatementShown, arrayLength: statementsOfSelectedTopics.length });
    const contentToShow2 = source == "gap" ? topCommunityStatements.map((statement) => statement.content).join("\n\nand\n\n") : statementsTextToShow[indexToUse];
    return {
      contentToShow: `${contentToShow2}`,
      currentContextShown: indexToUse + 1,
      statementsToShow: statementsTextToShow
    };
  }
  if (params.topicsFiltered.length == 0 && params.wordsToSearch.length == 0) {
    const allStatements = params.extractedGraphData.all_statements_with_top;
    if (!allStatements || allStatements.length == 0)
      return null;
    const statementsTextToShow = [];
    allStatements.forEach(
      (statement) => {
        if (statementsTextToShow.includes(statement.content))
          return;
        statementsTextToShow.push(statement.content);
      }
    );
    const indexToUse = extractIndexToUse({ direction: source, currentElementNumber: currentStatementShown, arrayLength: allStatements.length });
    const contentToShow2 = statementsTextToShow[indexToUse];
    return {
      contentToShow: `${contentToShow2}`,
      currentContextShown: indexToUse + 1,
      statementsToShow: statementsTextToShow
    };
  }
  return null;
}

// src/graph_view/components/GraphViewOverlaySettings.tsx
var import_react6 = __toESM(require_react());

// src/graph_view/lib/saveSettings.ts
var import_obsidian9 = require("obsidian");
var EVENT_SETTINGS_SAVED = "infranodusCustomSettingsSaved";
var EVENT_SAVE_SETTINGS = "infranodusCustomSaveSettings";
async function saveSettings(settings) {
  let resolved = false;
  try {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (resolved)
          return;
        console.error("[TIMEOUT] for saving settings");
        reject(new Error("Timeout error on saving data"));
        document.removeEventListener(
          EVENT_SETTINGS_SAVED,
          onSettingsSaved
        );
      }, 1e3);
      const onSettingsSaved = (event) => {
        resolve();
        resolved = true;
        document.removeEventListener(
          EVENT_SETTINGS_SAVED,
          onSettingsSaved
        );
        new import_obsidian9.Notice("Settings saved");
      };
      document.addEventListener(EVENT_SETTINGS_SAVED, onSettingsSaved);
      const dispatchedStatus = document.dispatchEvent(
        new CustomEvent(EVENT_SAVE_SETTINGS, {
          detail: settings
        })
      );
    });
  } catch (err) {
    console.log("Error when saving settings", err);
  }
}

// src/graph_view/components/settingsOverlay/SettingsTextField.tsx
var import_console = require("console");
var import_obsidian10 = require("obsidian");
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var currentPlatform2 = import_obsidian10.Platform.isMobileApp || import_obsidian10.Platform.isMobile ? "mobile" : "desktop";
var SettingsTextField = (params) => {
  if (currentPlatform2 === "desktop") {
    (0, import_console.assert)(params.type === "text");
  }
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex flex-row justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-base font-semibold", children: params.name }),
    params.link ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("a", { className: "text-base", href: params.link, children: "get it here" }) : null,
    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
      "input",
      {
        value: params.value,
        className: "px-1 py-1 bg-transparent border-0 border-b-[1px] outline-none text-black dark:text-white",
        onChange: (e) => {
          var _a;
          if (params.onChange) {
            (_a = params.onChange) == null ? void 0 : _a.call(params, e.target.value);
          }
        },
        placeholder: params.description,
        style: {
          fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"'
        }
      }
    )
  ] });
};

// src/graph_view/components/settingsOverlay/SettingsDropdownField.tsx
var import_console2 = require("console");
var import_obsidian11 = require("obsidian");
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var currentPlatform3 = import_obsidian11.Platform.isMobileApp || import_obsidian11.Platform.isMobile ? "mobile" : "desktop";
var SettingsDropdownField = (params) => {
  if (currentPlatform3 === "desktop") {
    (0, import_console2.assert)(params.type === "dropdown");
    (0, import_console2.assert)(params.dropdownOptions);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex flex-col items-start w-full gap-1", children: [
    /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex flex-row justify-between w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "flex flex-row items-center gap-1", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-base font-semibold", children: params.name }) }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        "select",
        {
          className: "px-1.5 py-1 bg-gray-350 dark:bg-gray-700 rounded outline-none h-min text-black dark:text-white",
          onChange: (e) => {
            if (!params.onChange)
              return;
            params.onChange(e.target.value);
          },
          style: {
            fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"'
          },
          value: params.value,
          children: params.dropdownOptions.map((option) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("option", { value: option.value, children: option.label }, option.label))
        }
      )
    ] }),
    params.note && params.noteTriggers && params.noteTriggers.contains(params.value) && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-sm", children: params.note })
  ] });
};

// src/graph_view/components/settingsOverlay/SettingsToggleField.tsx
var import_console3 = require("console");
var import_react5 = __toESM(require_react());
var import_obsidian12 = require("obsidian");
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var currentPlatform4 = import_obsidian12.Platform.isMobileApp || import_obsidian12.Platform.isMobile ? "mobile" : "desktop";
var SettingsToggleField = (params) => {
  if (currentPlatform4 === "desktop") {
    (0, import_console3.assert)(params.type === "text");
  }
  const [toggle, setToggle] = (0, import_react5.useState)(!!params.value);
  (0, import_react5.useEffect)(() => setToggle(!!params.value), [params.value]);
  return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex flex-row justify-between", children: [
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "text-base font-semibold", children: params.name }),
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      ToggleButton,
      {
        toggle,
        onClick: () => {
          var _a;
          if (params.onChange) {
            (_a = params.onChange) == null ? void 0 : _a.call(params, !toggle);
          }
          setToggle(!toggle);
        }
      }
    )
  ] });
};

// src/graph_view/components/GraphViewOverlaySettings.tsx
var import_obsidian13 = require("obsidian");
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_react7 = __toESM(require_react());
var graphProcessingDropdownOptions = [
  {
    value: "[[Wiki Links]] and Concepts",
    label: "[[Wiki Links]] and Concepts"
  },
  {
    value: "[[Wiki Links]] Only",
    label: "[[Wiki Links]] Only"
  },
  {
    value: "[[Wiki Links]] Prioritized",
    label: "[[Wiki Links]] Prioritized"
  },
  { value: "Concepts only", label: "Concepts Only" }
];
var currentPlatform5 = import_obsidian13.Platform.isMobileApp || import_obsidian13.Platform.isMobile ? "mobile" : "desktop";
var GraphViewOverlaySettings = (params) => {
  const [savingSettings, setSavingSettings] = (0, import_react6.useState)(false);
  const [settingsFields, setSettingsFields] = (0, import_react6.useState)([
    {
      name: "API Key",
      key: "INFRANODUS_API_KEY",
      link: `${SETTINGS.INFRANODUS_API_URL}/subscription`,
      description: "Get your API key from InfraNodus > Subscription",
      value: "",
      type: "text"
    },
    {
      name: "AI Model",
      key: "AI_MODEL",
      description: "Choose the AI model to use.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        {
          value: "gpt-4o-mini",
          label: "GPT-4o-mini (faster and shorter)"
        },
        { value: "gpt-4", label: "GPT-4 (thoughtful but slower)" },
        { value: "gpt-4o", label: "GPT-4o (newer and faster)" },
        {
          value: "gpt-3.5-turbo",
          label: "GPT-3.5 Turbo\xA0(older and weirder)"
        }
      ]
    },
    params.isFolder ? {
      name: "Multi Page Processing",
      key: "MULTI_PAGE_GRAPH_PROCESSING",
      description: "What method of processing to use for multi page graphs.",
      value: "",
      type: "dropdown",
      dropdownOptions: graphProcessingDropdownOptions,
      note: "Note, that it may take a long time to process both page links and concepts for multiple documents. We recommend to use it on smaller subsets of pages",
      noteTriggers: [
        "[[Wiki Links]] and Concepts",
        "Concepts only"
      ]
    } : {
      name: "Single Page Processing",
      key: "SINGLE_PAGE_GRAPH_PROCESSING",
      description: "What method of processing to use for single page graphs.",
      value: "",
      type: "dropdown",
      note: "Note, that in case you prioritize the display of [[wiki links]], we won't show the [[ ]] syntax in the graph.",
      noteTriggers: [
        "[[Wiki Links]] Only",
        "[[Wiki Links]] Prioritized"
      ],
      dropdownOptions: graphProcessingDropdownOptions
    },
    {
      name: "Color Scheme",
      key: "COLOR_SCHEME",
      description: "Choose the color scheme to use.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        { value: "light", label: "Light" },
        { value: "dark", label: "Dark" },
        { value: "auto", label: "Auto" }
      ]
    },
    {
      name: "Link mentions to",
      key: "LINK_PAGE_TO_MENTIONS",
      description: "How to generate the links between the pages mentioned in your document.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        {
          value: "paragraph",
          label: "each other if in the same paragraph (default)"
        },
        {
          value: "parent_and_paragraph",
          label: "to parent page and if in the same paragraph"
        },
        {
          value: "parent_only",
          label: "to parent page only (Obsidian style)"
        }
      ],
      note: "By default, we link mentions that are mentioned in the same paragraph to emphasize the context. You can also choose standard Obsidian or mixed behavior.",
      noteTriggers: ["paragraph"]
    },
    {
      name: "Include Linked Mentions",
      key: "INCLUDE_LINKED_MENTIONS",
      description: "Choose when to include linked mentions.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        {
          value: "For empty pages only",
          label: "For empty pages only"
        },
        { value: "For all pages", label: "For all pages" },
        { value: "Never", label: "Never" }
      ]
    },
    {
      name: "Include Unlinked Mentions",
      key: "INCLUDE_UNLINKED_MENTIONS",
      description: "Choose when to include unlinked mentions.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        {
          value: "For empty pages only",
          label: "For empty pages only"
        },
        { value: "For all pages", label: "For all pages" },
        { value: "Never", label: "Never" }
      ]
    },
    {
      name: "Improve unlinked search",
      key: "USE_OWN_UNLINKED_SEARCH",
      description: "Count a text match to a page's name as an unlinked mention.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        { value: "no", label: "No" },
        { value: "yes", label: "Yes" }
      ],
      note: "We will use a more aggressive algorithm of finding related mentions that includes partial matches.",
      noteTriggers: ["yes"]
    },
    {
      name: "Reloading Graph",
      key: "RELOADING_GRAPH",
      description: "Choose how to reload the graph.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        { value: "automatic", label: "Automatic" },
        { value: "manual", label: "Manual (button)" },
        { value: "into reading", label: "Entering reading mode" }
      ]
    },
    // {
    // 	name: "Add Links",
    // 	key: "ADD_LINKS",
    // 	description: "Choose where to add generated links.",
    // 	value: "",
    // 	type: "dropdown",
    // 	dropdownOptions: [
    // 		{ value: "End of statement", label: "End of statement" },
    // 		{ value: "Lemmatization", label: "Lemmatization" },
    // 		{ value: "Only exact words", label: "Only exact words" },
    // 	],
    // 	note: "Lemmatization alters the existing text to make it more suitable for linking.",
    // 	noteTriggers: ["Lemmatization"],
    // },
    {
      name: "Default Graph Layer Shown",
      key: "DEFAULT_GRAPH_MODE",
      description: "What should be the default graph view shown.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        { value: "graph", label: "Graph" },
        { value: "topics", label: "Topics" },
        { value: "concepts", label: "Concepts" },
        { value: "gaps", label: "Gaps" },
        { value: "trends", label: "Trends" }
      ]
    },
    {
      name: "InfraNodus Data Export",
      key: "EXPORT_TYPE",
      description: "How should we export your data",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        { value: "manual", label: "Copy and paste (manual)" },
        { value: "auto", label: "Automatic" }
      ],
      note: "More control with manual export, but doesn't work for big files.",
      noteTriggers: ["manual", "auto"]
    },
    {
      name: "Export Graph Name Prefix",
      key: "EXPORT_GRAPH",
      description: "What graph in InfraNodus should we export your text data to",
      value: "",
      type: "text",
      note: "This is the name of the graph where text data are saved. Add * for the page name, ** for the vault name."
    },
    {
      name: "Save AI Insights to Graph Name",
      key: "CONTEXT_NAME",
      description: "What graph in InfraNodus should we export your AI insights to",
      value: "",
      type: "text",
      note: "This is the name of the graph where AI insights are saved. Add * for the page name, ** for the vault name."
    },
    {
      name: "When Using Locate",
      key: "WHEN_USING_LOCATE",
      description: "Choose what to do when using the locate feature.",
      value: "",
      type: "dropdown",
      dropdownOptions: [
        {
          value: "Do not force to Edit Mode",
          label: "Do not force to Edit Mode"
        },
        {
          value: "Force to Edit Mode",
          label: "Force to Edit Mode"
        }
      ],
      note: "Note: Locating works better in the Edit mode",
      noteTriggers: ["Do not force to Edit Mode"]
    }
    // {
    // 	name: "Reload When Into Reading View",
    // 	key: "RELOAD_WHEN_TO_READING",
    // 	description:
    // 		"Reload the graph when the reading mode is toggled from the editor.",
    // 	value: "",
    // 	type: "toggle",
    // },
  ]);
  (0, import_react6.useEffect)(() => {
    if (currentPlatform5 === "mobile") {
      settingsFields.push({
        name: "Open Mobile Graph In",
        key: "MOBILE_OPEN_GRAPH_IN",
        description: "Choose where to open the graph on mobile.",
        value: "",
        type: "dropdown",
        dropdownOptions: [
          { value: "Side view", label: "Side view" },
          { value: "New tab", label: "New tab" }
        ]
      });
    }
    for (const field of settingsFields) {
      const settingsVal = SETTINGS[field.key];
      if (settingsVal)
        field.value = settingsVal;
    }
    setSettingsFields([...settingsFields]);
  }, []);
  async function saveLocalSettings() {
    if (savingSettings)
      return;
    setSavingSettings(true);
    try {
      const settings = {};
      for (const field of settingsFields) {
        if (!field.key)
          continue;
        settings[field.key] = field.value;
      }
      await saveSettings(settings);
      await params.reloadGraph();
    } catch (err) {
      console.error("Error saving settings", err.message, err);
      new import_obsidian13.Notice("Error saving settings. Please try again.");
      new import_obsidian13.Notice(err.message, 2e4);
    }
    setSavingSettings(false);
  }
  async function setIndividualField(param) {
    for (const field of settingsFields) {
      if (field.key !== param.key)
        continue;
      field.value = param.value;
    }
    setSettingsFields([...settingsFields]);
  }
  const maxHeight = `${window.innerHeight - 200}px`;
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
    "div",
    {
      className: `${currentPlatform5 == "desktop" ? "p-4" : "p-2"} absolute z-10 min-h-44  overflow-y-auto flex flex-col gap-2 items-stretch text-black dark:text-white bg-gray-300 dark:bg-gray-800 rounded text-base  ${currentPlatform5 === "desktop" ? "bottom-3 right-0 max-w-[450px] w-auto @[470px]/main:w-full @[470px]/main:right-3 left-0 @[470px]/main:left-auto" : "bottom-0 right-0"}`,
      style: {
        maxHeight: `${maxHeight}`,
        width: currentPlatform5 === "mobile" ? Math.min(params.graphContext.maxWidth - 16, 450) : void 0
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex flex-row justify-between", children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "font-bold font-lg text-lg", children: "InfraNodus Plugin Settings" }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "cursor-pointer", onClick: params.closeSettings, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(XCircleIcon, { size: 16 }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "my-1" }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "div",
          {
            className: "px-2 py-2 mt-auto text-lg ml-auto rounded cursor-pointer bg-gray-350 dark:bg-gray-700 whitespace-nowrap hover:bg-gray-400 dark:hover:bg-gray-600",
            onClick: () => saveLocalSettings(),
            children: "Save Settings"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "my-1" }),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("div", { className: "flex flex-col gap-4", children: settingsFields.map((field, index) => /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { children: [
          field.type === "text" && /* @__PURE__ */ (0, import_react7.createElement)(
            SettingsTextField,
            {
              ...field,
              key: "",
              onChange: (val) => setIndividualField({
                ...field,
                value: val
              })
            }
          ),
          field.type === "dropdown" && /* @__PURE__ */ (0, import_react7.createElement)(
            SettingsDropdownField,
            {
              ...field,
              key: "",
              onChange: (val) => setIndividualField({
                ...field,
                value: val
              })
            }
          ),
          field.type === "toggle" && /* @__PURE__ */ (0, import_react7.createElement)(
            SettingsToggleField,
            {
              ...field,
              key: "",
              onChange: (val) => setIndividualField({
                ...field,
                value: val
              })
            }
          )
        ] }, field.key)) })
      ]
    }
  );
};

// src/graph_view/lib/handleErrors.ts
function handleGraphDataError(params) {
  console.log("[handleGraphDataError]", params.graphDataResponse);
  if (params.graphDataResponse.error === "Please, log in to access the page you requested.") {
    console.log("[handleGraphDataError] Setting error to invalid-api-key");
    params.setError("invalid-api-key");
    throw new Error("No API key found");
  }
  if (params.graphDataResponse.error == "Your session has expired. Please, log in again.") {
    console.log("[handleGraphDataError] Setting error to invalid-api-key");
    params.setError("invalid-api-key");
    throw new Error("API key is not up to date");
  }
  if (params.isFolder && SETTINGS.MULTI_PAGE_GRAPH_PROCESSING === "[[Wiki Links]] Only" || !params.isFolder && SETTINGS.SINGLE_PAGE_GRAPH_PROCESSING === "[[Wiki Links]] Only") {
    console.log("[handleGraphDataError] Checking for wiki links");
    const hasWikiLinks = _checkForWikiLinks(params.statements);
    if (!hasWikiLinks) {
      params.setError("no-wiki-links");
      throw new Error("No wiki links found");
    }
  }
}
function _checkForWikiLinks(statements) {
  for (const str of statements) {
    if (str.indexOf("[[") === -1)
      continue;
    if (str.indexOf("]]") === -1)
      continue;
    return true;
  }
  return false;
}

// src/graph_view/components/LoadingView.tsx
var import_react8 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var stateMessages = /* @__PURE__ */ new Map([
  ["initializing", { texts: ["Initializing..."], weight: 1 }],
  [
    "getting-content",
    {
      weight: 2,
      texts: [
        "Getting content from file system...",
        "Extracting statements from content..."
      ]
    }
  ],
  [
    "generating-graph",
    {
      weight: 8,
      texts: [
        "Generating graph from content...",
        "Processing statements...",
        "Generating relations..."
      ]
    }
  ],
  [
    "waiting-iframe",
    {
      weight: 9.9,
      texts: ["Rendering graph..."]
    }
  ]
]);
function getMaxProgressOfLoadingState(loadingState) {
  var _a;
  const weight = ((_a = stateMessages.get(loadingState)) == null ? void 0 : _a.weight) || 0;
  return weight * 10;
}
function getSpeedForProgressOnWeight(params) {
  if (params.loadingState === "waiting-iframe") {
    return 3;
  }
  const progress = params.currentProgress / params.maxProgress;
  const speed = 1 - Math.pow(progress, 2);
  return speed;
}
var LoadingView = (params) => {
  var _a;
  const [progress, setProgress] = (0, import_react8.useState)(0);
  const [textIndex, setTextIndex] = (0, import_react8.useState)(0);
  (0, import_react8.useEffect)(() => {
    const progressInterval = setInterval(() => {
      const maxProgress = getMaxProgressOfLoadingState(
        params.loadingState
      );
      if (progress >= maxProgress) {
        clearInterval(progressInterval);
      } else {
        setProgress((prevProgress) => {
          const newProgress = prevProgress + getSpeedForProgressOnWeight({
            loadingState: params.loadingState,
            currentProgress: prevProgress,
            maxProgress
          });
          return Math.min(newProgress, maxProgress);
        });
      }
    }, 50);
    const progressTextInterval = setInterval(() => {
      setTextIndex((prevIndex) => {
        var _a2;
        const texts = ((_a2 = stateMessages.get(params.loadingState)) == null ? void 0 : _a2.texts) || [];
        return (prevIndex + 1) % texts.length;
      });
    }, 3e3);
    return () => {
      clearInterval(progressInterval);
      clearInterval(progressTextInterval);
    };
  }, [params.loadingState]);
  const currentTexts = ((_a = stateMessages.get(params.loadingState)) == null ? void 0 : _a.texts) || [];
  const currentText = currentTexts[textIndex % currentTexts.length];
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "absolute inset-0 z-[5] flex flex-col items-center justify-center dark:bg-black bg-opacity-50 bg-white", children: [
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "mb-4 text-lg text-gray-600 dark:text-gray-200 animate-pulse", children: "Loading InfraNodus Graph..." }),
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "w-64 h-4 overflow-hidden bg-gray-200 rounded-full", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      "div",
      {
        className: "h-full transition-all duration-500 ease-out bg-blue-500",
        style: { width: `${progress}%` }
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "h-6 mt-2 text-sm text-gray-500 dark:text-gray-400", children: currentText })
  ] });
};

// src/graph_view/GraphView.tsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var GraphView = (params) => {
  var _a, _b, _c, _d, _e;
  const GRAPH_BASE_URL = SETTINGS.INFRANODUS_GRAPH_URL;
  const GRAPH_URL = `${GRAPH_BASE_URL}?iframe=true&action=true&app=obsidian`;
  const { filePath, app: app2, contentString, sourcePath } = params.graphContext;
  const cleanFilePath = filePath && filePath.endsWith(".md") ? filePath.slice(0, -3) : filePath;
  const isFolder = filePath && !filePath.endsWith(".md") ? true : false;
  const vaultName = app2.vault.getName();
  const [colorScheme, setColorScheme] = (0, import_react9.useState)(SETTINGS.COLOR_SCHEME);
  const [useOwnUnlinkedSearch, setUseOwnUnlinkedSearch] = (0, import_react9.useState)(
    SETTINGS.USE_OWN_UNLINKED_SEARCH
  );
  const graphLink = SETTINGS.DEFAULT_GRAPH_MODE ? `${GRAPH_URL}&mode=${SETTINGS.DEFAULT_GRAPH_MODE}` : GRAPH_URL;
  const obsidianColorSchemeRef = (0, import_react9.useRef)("light");
  const [graphData, setGraphData] = (0, import_react9.useState)();
  const [isSearchingWords, setIsSearchingWords] = (0, import_react9.useState)(false);
  const [wordsToSearch, setWordsToSearch] = (0, import_react9.useState)(
    (_b = (_a = params.initialData) == null ? void 0 : _a.wordsToSearch) != null ? _b : []
  );
  const [connectedWords, setConnectedWords] = (0, import_react9.useState)([]);
  const [wordsToHide, setWordsToHide] = (0, import_react9.useState)([]);
  const [isHidingWords, setIsHidingWords] = (0, import_react9.useState)(false);
  const [gapShown, setGapShown] = (0, import_react9.useState)(false);
  const [topicsFiltered, setTopicsFiltered] = (0, import_react9.useState)([]);
  const [adviceMode, setAdviceMode] = (0, import_react9.useState)("none");
  const [overlayShowMode, setOverlayShowMode] = (0, import_react9.useState)(null);
  const [showIframe, setShowIframe] = (0, import_react9.useState)(true);
  const [isLoadingIframe, setIsLoadingIframe] = (0, import_react9.useState)(false);
  const [error, setError] = (0, import_react9.useState)();
  const [errorText, setErrorText] = (0, import_react9.useState)("");
  const [loadingState, setLoadingState] = (0, import_react9.useState)("initializing");
  const contentRef = (0, import_react9.useRef)();
  const pageNamesRef = (0, import_react9.useRef)([]);
  const statementsRef = (0, import_react9.useRef)([]);
  const loadedIframeRef = (0, import_react9.useRef)(false);
  const iframIsReadyRef = (0, import_react9.useRef)(false);
  const filteredStatementsRef = (0, import_react9.useRef)([]);
  const extractedGraphDataRef = (0, import_react9.useRef)();
  const lastSelectedWordRef = (0, import_react9.useRef)(
    (_e = (_d = (_c = params.initialData) == null ? void 0 : _c.wordsToSearch) == null ? void 0 : _d[0]) != null ? _e : null
  );
  const [currentContextShown, setCurrentContextShown] = (0, import_react9.useState)(0);
  const [textToShow, setTextToShow] = (0, import_react9.useState)("");
  const [statementsToShow, setStatementsToShow] = (0, import_react9.useState)([]);
  const [showingSettings, setShowingSettings] = (0, import_react9.useState)(false);
  const [showingReloadButton, setShowingReloadButton] = (0, import_react9.useState)(true);
  const [currentGraphPanel, setCurrentGraphPanel] = (0, import_react9.useState)(
    SETTINGS.DEFAULT_GRAPH_MODE
  );
  const auth_token = SETTINGS.INFRANODUS_API_KEY;
  let decodedToken = {};
  const exportToInfraNodus = {
    type: SETTINGS.EXPORT_TYPE,
    graphName: SETTINGS.EXPORT_GRAPH
  };
  if (auth_token) {
    try {
      decodedToken = jwtDecode(auth_token);
    } catch (error2) {
      console.error("Error decoding JWT:", error2);
      decodedToken = {};
    }
  }
  const [currentUser, setCurrentUser] = (0, import_react9.useState)(
    decodedToken && decodedToken.user ? decodedToken.user.id : ""
  );
  const iframeGraphUser = currentUser ? `&user=${currentUser}` : "";
  const statementToJumpToRef = (0, import_react9.useRef)({});
  const previousStatementToJumpToRef = (0, import_react9.useRef)("");
  const graph_iframe = (0, import_react9.useRef)();
  const graph_top_text = (0, import_react9.useRef)();
  const stateForMessagesRef = (0, import_react9.useRef)(void 0);
  (0, import_react9.useEffect)(() => {
    stateForMessagesRef.current = {
      wordsToSearch,
      wordsToHide,
      topicsFiltered,
      graphData,
      filteredStatements: filteredStatementsRef.current,
      lastSelectedWord: lastSelectedWordRef.current,
      extractedGraphData: extractedGraphDataRef.current
    };
  }, [
    wordsToHide,
    wordsToSearch,
    topicsFiltered,
    graphData,
    filteredStatementsRef.current,
    lastSelectedWordRef.current,
    extractedGraphDataRef.current
  ]);
  const [graphViewContext, setGraphViewContext] = (0, import_react9.useState)();
  (0, import_react9.useEffect)(() => {
    setGraphViewContext({
      stateRef: stateForMessagesRef,
      graphData,
      adviceMode,
      wordsToSearch,
      wordsToHide,
      gapShown,
      loadingState,
      currentUser,
      setAdviceMode,
      setWordsToSearch,
      setWordsToHide,
      setGapShown,
      setLoadingState
    });
  }, [
    stateForMessagesRef.current,
    graphData,
    adviceMode,
    wordsToSearch,
    wordsToHide,
    gapShown,
    loadingState
  ]);
  const currentPlatform8 = import_obsidian14.Platform.isMobileApp || import_obsidian14.Platform.isMobile ? "mobile" : "desktop";
  (0, import_react9.useEffect)(() => {
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      obsidianColorSchemeRef.current = "dark";
      if (colorScheme === "auto") {
        setColorScheme(obsidianColorSchemeRef.current);
      }
    } else {
      obsidianColorSchemeRef.current = "light";
      if (colorScheme === "auto") {
        setColorScheme(obsidianColorSchemeRef.current);
      }
    }
    const watchMedia = window.matchMedia("(prefers-color-scheme: dark)");
    const onMediaChange = (e) => {
      obsidianColorSchemeRef.current = e.matches ? "dark" : "light";
      if (colorScheme === "auto") {
        setColorScheme(obsidianColorSchemeRef.current);
      }
    };
    watchMedia.addEventListener("change", onMediaChange);
    return () => {
      watchMedia.removeEventListener("change", onMediaChange);
    };
  }, []);
  (0, import_react9.useEffect)(() => {
    var _a2;
    const allStatements = (_a2 = extractedGraphDataRef.current) == null ? void 0 : _a2.all_statements_with_top;
    const filteredStatements = filterStatements({
      statements: allStatements != null ? allStatements : [],
      wordsToSearch,
      wordsToHide,
      topicsFiltered,
      connectedWords
    });
    filteredStatementsRef.current = filteredStatements && filteredStatements.length > 0 ? filteredStatements : [];
  }, [wordsToHide, wordsToSearch, topicsFiltered, graphData, connectedWords]);
  function diff(a) {
    return (new Date().valueOf() - a.valueOf()) / 1e3;
  }
  (0, import_react9.useEffect)(() => {
    async function fetchGraphData() {
      var _a2, _b2, _c2, _d2;
      if (loadingState != "complete")
        setLoadingState("initializing");
      const start1 = new Date();
      if (!filePath && !contentString) {
        new import_obsidian14.Notice("No files or content provided for analysis");
        return console.log("No file path");
      }
      let content;
      let contentStatements = [];
      if (!contentRef.current && filePath) {
        setLoadingState("getting-content");
        content = await getContentsFromFilePath({
          app: app2,
          filePath: filePath || ""
        });
        contentRef.current = content == null ? void 0 : content.content;
        if (!(content == null ? void 0 : content.content)) {
          setError("no-content");
          throw new Error("No content in the file");
        }
        pageNamesRef.current = (content == null ? void 0 : content.pageNames) || [];
      }
      if (!contentRef.current && contentString) {
        contentRef.current = contentString;
      }
      if (!contentRef.current)
        return;
      if (!showIframe)
        return;
      const contentSize = contentRef.current.length;
      if (contentSize > 5e7) {
        new import_obsidian14.Notice(
          "The content is too large for analysis. Please, reduce the size or try with a different folder, bookmark group, or file."
        );
        return;
      }
      if (loadingState != "complete")
        setIsLoadingIframe(true);
      const statementsBefore = statementsRef.current;
      statementsRef.current = [];
      const regex = /\[\[([^\]]+)\]\]/g;
      contentStatements = (content == null ? void 0 : content.statements) || [];
      if (contentStatements.length > 0) {
        contentStatements.forEach((statement) => {
          statementsRef.current.push(statement);
        });
      } else {
        contentRef.current.split("\n").forEach((line) => {
          line = line.trim();
          if (!line)
            return;
          statementsRef.current.push(line);
        });
      }
      const start2 = new Date();
      if (loadingState != "complete")
        setLoadingState("generating-graph");
      const presetContextSettings = isFolder ? SETTINGS.MULTI_PAGE_GRAPH_PROCESSING : SETTINGS.SINGLE_PAGE_GRAPH_PROCESSING;
      const linkPageToMentions = SETTINGS.LINK_PAGE_TO_MENTIONS == "true" || SETTINGS.LINK_PAGE_TO_MENTIONS == "parent_and_paragraph" ? "parent_and_paragraph" : SETTINGS.LINK_PAGE_TO_MENTIONS == "false" || SETTINGS.LINK_PAGE_TO_MENTIONS == "paragraph" ? "paragraph" : "parent_only";
      const response = await InfraNodus.getGraphAndStatements({
        name: "Obsidian Plugin",
        text: statementsRef.current.join("\n"),
        statements: linkPageToMentions != "paragraph" && contentStatements && contentStatements.length > 0 ? contentStatements : [],
        contextSettings: presetContextSettings,
        stopwords: wordsToHide,
        categories: pageNamesRef.current && pageNamesRef.current.length > 0 && linkPageToMentions != "paragraph" ? pageNamesRef.current : [],
        linkPageToMentions
      });
      const graphData2 = response.data;
      if (graphData2.error) {
        handleGraphDataError({
          graphDataResponse: graphData2,
          statements: statementsRef.current,
          setError,
          isFolder
        });
      }
      const extracted = InfraNodus.extractDataFromGraphData({
        graph_data: graphData2,
        setError
      });
      extractedGraphDataRef.current = extracted;
      setGraphData(graphData2);
      const topicNames = (_a2 = extractedGraphDataRef.current) == null ? void 0 : _a2.top_clusters.map(
        (topic) => ({
          id: topic.community,
          name: topic.nodes.map((node) => node.nodeName).slice(0, 3).join(" ")
        })
      );
      if (loadingState != "complete")
        setLoadingState("waiting-iframe");
      const start3 = new Date();
      if (!loadedIframeRef.current) {
        while (!iframIsReadyRef.current) {
          await new Promise((resolve) => setTimeout(resolve, 50));
        }
        sendDataToIframe("LOAD_JSON", {
          entriesAndGraphOfContext: graphData2 == null ? void 0 : graphData2.entriesAndGraphOfContext,
          topicNames
        });
        loadedIframeRef.current = true;
        await new Promise((resolve) => setTimeout(resolve, 250));
        if (wordsToSearch.length > 0) {
          sendDataToIframe("UPDATE_SELECTED_NODES" /* SELECTED_NODES */, wordsToSearch);
        }
        if (wordsToHide.length > 0) {
          sendDataToIframe("UPDATE_REMOVED_NODES" /* REMOVED_NODES */, wordsToHide);
        }
      } else {
        sendDataToIframe("RECALCULATION", {
          entriesAndGraphOfContext: graphData2 == null ? void 0 : graphData2.entriesAndGraphOfContext
        });
      }
      if (loadingState != "complete")
        setIsLoadingIframe(false);
      setLoadingState("complete");
      new import_obsidian14.Notice("Graph loaded");
      try {
        const aiTopics = await InfraNodus.generateAiNamesForTopics({
          graph_data: graphData2,
          top_clusters: (_b2 = extractedGraphDataRef.current) == null ? void 0 : _b2.top_clusters,
          language: "USER",
          top_statements: (_c2 = extractedGraphDataRef.current) == null ? void 0 : _c2.top_statements
        });
        sendDataToIframe("TOPICS_UPDATE" /* TOPICS_UPDATE */, aiTopics);
        for (const aiTopic of aiTopics) {
          const topic = (_d2 = extractedGraphDataRef.current) == null ? void 0 : _d2.top_clusters.find(
            (topic2) => topic2.community == aiTopic.id
          );
          if (topic) {
            topic.aiName = aiTopic.name;
            topic.aiDescription = aiTopic.description;
          }
        }
      } catch (err) {
        console.log("Error generating AI topics", err.message, err);
      }
    }
    fetchGraphData().catch((err) => {
      setError((currentError) => {
        if (currentError)
          return currentError;
        setErrorText(err.message || "An unknown error occurred");
        return "generic-error";
      });
    });
  }, [wordsToHide]);
  function showGraphContextAdvice(params2) {
    setOverlayShowMode("context");
    setAdviceMode("context");
    const data = generateTextForContext(
      {
        wordsToSearch: params2.wordsToSearch,
        filteredStatements: stateForMessagesRef.current.filteredStatements,
        currentContextShown,
        extractedGraphData: extractedGraphDataRef.current,
        topicsFiltered: params2.topicsFiltered
      },
      params2.source || "next"
    );
    if (data) {
      setTextToShow(data.contentToShow);
      setCurrentContextShown(data.currentContextShown);
      setStatementsToShow(data.statementsToShow);
    }
  }
  (0, import_react9.useEffect)(() => {
    const onMessage = async (message) => {
      var _a2, _b2, _c2;
      if (message.source !== ((_a2 = graph_iframe.current) == null ? void 0 : _a2.contentWindow))
        return;
      const type = message.data.type;
      let payload = message.data.payload;
      const { wordsToSearch: wordsToSearch2, wordsToHide: wordsToHide2, topicsFiltered: topicsFiltered2, graphData: graphData2 } = stateForMessagesRef.current;
      switch (type) {
        case "READY" /* READY */:
          iframIsReadyRef.current = true;
          break;
        case "UPDATE_SELECTED_NODES" /* SELECTED_NODES */:
          if (!payload)
            payload = [];
          setIsSearchingWords(payload.length > 0);
          setCurrentGraphPanel("concepts");
          if (!arraysAreEqual(wordsToSearch2, payload)) {
            const newWordsToSearch = Array.from(
              new Set(payload)
            );
            const wordsUnselected = wordsToSearch2.filter(
              (word) => {
                if (newWordsToSearch.includes(word))
                  return false;
                if (lastSelectedWordRef.current === word) {
                  lastSelectedWordRef.current = newWordsToSearch[0];
                }
                return true;
              }
            );
            const _connectedWords = (_b2 = message.data.connectedNodes) != null ? _b2 : [];
            try {
              const allStatements = (_c2 = extractedGraphDataRef.current) == null ? void 0 : _c2.all_statements_with_top;
              const filteredStatements = filterStatements({
                statements: allStatements != null ? allStatements : [],
                wordsToSearch: wordsUnselected,
                wordsToHide: wordsToHide2,
                connectedWords: _connectedWords
              }).map((statement) => {
                var _a3;
                return (_a3 = statement.content) != null ? _a3 : "";
              });
              const elements = await unhighlightStatements(
                app2,
                filteredStatements
              );
              unObserveElementAttributes(elements);
              elements.forEach(
                (el) => el.classList.remove(
                  "infranodus-plugin-yellow-highlight"
                )
              );
            } catch (err) {
            }
            const newWordsSelected = newWordsToSearch.filter(
              (word) => {
                if (wordsToSearch2.includes(word))
                  return false;
                return true;
              }
            );
            if (newWordsSelected.length > 0) {
              lastSelectedWordRef.current = newWordsSelected[0];
            }
            setConnectedWords(_connectedWords);
            setWordsToSearch(newWordsToSearch);
          }
          break;
        case "UPDATE_REMOVED_NODES" /* REMOVED_NODES */:
          if (!payload)
            payload = [];
          setIsHidingWords(payload.length > 0);
          if (!arraysAreEqual(wordsToHide2, payload)) {
            const newWordsToHide = Array.from(
              new Set(payload)
            );
            setWordsToHide(newWordsToHide);
          }
          break;
        case "UPDATE_GROUPS" /* GROUPS */:
          setCurrentGraphPanel("topics");
          if (!arraysAreEqual(topicsFiltered2, payload)) {
            setTopicsFiltered(payload);
          }
          break;
        case "GAPS" /* GAPS */:
          setCurrentGraphPanel("gaps");
          if (gapShown !== payload) {
            setGapShown(payload);
          }
          break;
        case "EXTERNAL_ACTION" /* EXTERNAL_ACTION */:
          if (!payload)
            payload = [];
          if (payload.length > 0) {
            switch (payload) {
              case "question":
                setAdviceMode("none");
                setTimeout(() => {
                  setAdviceMode("question");
                }, 100);
                break;
              case "develop":
                setAdviceMode("none");
                setTimeout(() => {
                  setAdviceMode("develop");
                }, 100);
                break;
              case "summary":
              case "summarize":
                setAdviceMode("none");
                setTimeout(() => {
                  setAdviceMode("summary");
                }, 100);
                break;
              case "context_gap":
                setAdviceMode("context");
                setOverlayShowMode("context");
                showGraphContextAdvice({
                  wordsToSearch: wordsToSearch2,
                  source: "gap",
                  topicsFiltered: topicsFiltered2
                });
                if (!import_obsidian14.Platform.isMobileApp && !import_obsidian14.Platform.isMobile)
                  getMentionsOfFile(
                    app2,
                    filePath || "",
                    wordsToSearch2
                  );
                break;
              case "context":
                setAdviceMode("context");
                setOverlayShowMode("context");
                showGraphContextAdvice({
                  wordsToSearch: wordsToSearch2,
                  source: "next",
                  topicsFiltered: topicsFiltered2
                });
                if (!import_obsidian14.Platform.isMobileApp && !import_obsidian14.Platform.isMobile)
                  getMentionsOfFile(
                    app2,
                    filePath || "",
                    wordsToSearch2
                  );
                break;
              case "topics":
                setCurrentGraphPanel("topics");
                break;
              case "graph":
                setCurrentGraphPanel("graph");
                break;
              case "gap":
                setCurrentGraphPanel("gaps");
                break;
              case "trends":
                setCurrentGraphPanel("trends");
                break;
              case "concepts":
                setCurrentGraphPanel("concepts");
                break;
            }
          }
          if (payload.type) {
            if (payload.type == "statement" && payload.nodes && filteredStatementsRef.current && filteredStatementsRef.current.length > 0) {
              setAdviceMode("context");
              setOverlayShowMode("context");
              showGraphContextAdvice({
                wordsToSearch: wordsToSearch2,
                source: "next",
                topicsFiltered: topicsFiltered2
              });
              if (!import_obsidian14.Platform.isMobileApp && !import_obsidian14.Platform.isMobile)
                getMentionsOfFile(
                  app2,
                  filePath || "",
                  wordsToSearch2
                );
            }
            if (payload.clusters) {
              setAdviceMode("context");
              setOverlayShowMode("context");
              const sourceType = payload.mode == "locate_gaps" ? "gap" : "next";
              showGraphContextAdvice({
                wordsToSearch: wordsToSearch2,
                source: sourceType,
                topicsFiltered: topicsFiltered2
              });
              if (!import_obsidian14.Platform.isMobileApp && !import_obsidian14.Platform.isMobile)
                getMentionsOfFile(
                  app2,
                  filePath || "",
                  wordsToSearch2
                );
            }
            if (payload.type == "click") {
              const receivedNodes = payload.nodes;
              navigateToStatement({
                app: app2,
                filePath: filePath || "",
                filteredStatements: [],
                wordsToSearch: [
                  receivedNodes[receivedNodes.length - 1]
                ],
                graphContext: params.graphContext
              });
            }
          }
          if (!payload || payload && payload.length == 0) {
            setCurrentGraphPanel("graph");
          }
          break;
        default:
          break;
      }
    };
    window == null ? void 0 : window.addEventListener("message", onMessage);
    return () => {
      window == null ? void 0 : window.removeEventListener("message", onMessage);
    };
  }, []);
  (0, import_react9.useEffect)(() => {
    if (SETTINGS.RELOADING_GRAPH === "manual") {
      setShowingReloadButton(true);
      return;
    }
    let textCheck;
    let cleared = false;
    (async () => {
      var _a2, _b2;
      const oldText = (_b2 = (_a2 = await getContentsFromFilePath({
        app: app2,
        filePath: filePath || "",
        ignoreLinkedUnlinked: true
      })) == null ? void 0 : _a2.content.trim()) != null ? _b2 : "";
      textCheck = window.setInterval(async () => {
        var _a3, _b3;
        if (cleared) {
          window.clearInterval(textCheck);
          return;
        }
        const newText = (_b3 = (_a3 = await getContentsFromFilePath({
          app: app2,
          filePath: filePath || "",
          ignoreLinkedUnlinked: true
        })) == null ? void 0 : _a3.content.trim()) != null ? _b3 : "";
        if (cleared)
          return;
        if (newText !== oldText) {
          cleared = true;
          if (SETTINGS.RELOADING_GRAPH === "manual") {
            window.clearInterval(textCheck);
          } else if (SETTINGS.RELOADING_GRAPH === "automatic") {
            cleared = true;
            params.graphContext.reloadGraph().catch((_) => {
            });
            window.clearInterval(textCheck);
            return;
          } else if (SETTINGS.RELOADING_GRAPH === "into reading") {
            window.clearInterval(textCheck);
          }
          window.clearInterval(textCheck);
        }
      }, 3e3);
    })();
    return () => {
      cleared = true;
      window.clearInterval(textCheck);
    };
  }, []);
  function sendDataToIframe(type, payload) {
    var _a2, _b2;
    (_b2 = (_a2 = graph_iframe.current) == null ? void 0 : _a2.contentWindow) == null ? void 0 : _b2.postMessage(
      { type, payload },
      "*"
    );
  }
  const graphHeight = getGraphHeight({
    topTextElement: graph_top_text.current,
    maxHeight: params.graphContext.maxHeight,
    currentPlatform: currentPlatform8
  });
  const [exportedGraph, setExportedGraph] = (0, import_react9.useState)(false);
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
      "div",
      {
        className: "flex flex-col items-center pb-2",
        ref: graph_top_text,
        children: [
          filePath && (params.graphContext.isRoot ? `[ROOT] ${cleanFilePath}` : isFolder ? `[FOLDER] ${cleanFilePath}` : cleanFilePath),
          contentString && sourcePath
        ]
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: `relative ${colorScheme} @container/main`, children: [
      graphData && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        GraphViewOverlay,
        {
          graphViewContext,
          graphContext: params.graphContext,
          overlayShowMode,
          setOverlayShowMode,
          showGraphContextAdvice: (source) => showGraphContextAdvice({
            wordsToSearch,
            topicsFiltered,
            source
          }),
          setTextToShow,
          textToShow,
          statementsToShow,
          filteredStatements: filteredStatementsRef.current,
          topicsFiltered,
          navigateToStatement,
          sendDataToIframe,
          currentGraphPanel
        }
      ),
      showingSettings && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        GraphViewOverlaySettings,
        {
          graphContext: params.graphContext,
          closeSettings: () => setShowingSettings(false),
          isFolder,
          reloadGraph: params.graphContext.reloadGraph
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "absolute bottom-4 left-2 z-50 space-y-2", children: [
        (showingReloadButton && !showingSettings || error) && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(InfoTooltip, { text: "Reload graph", direction: "right", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          IconButton,
          {
            icon: SyncIcon,
            onClick: params.graphContext.reloadGraph
          }
        ) }),
        !showingSettings && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          InfoTooltip,
          {
            text: "Export content to InfraNodus",
            direction: "right",
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              IconButton,
              {
                icon: exportedGraph ? CheckIcon : CrossReferenceIcon,
                onClick: () => {
                  var _a2;
                  if (exportedGraph)
                    return;
                  setExportedGraph(true);
                  const statementsArray = ((_a2 = extractedGraphDataRef == null ? void 0 : extractedGraphDataRef.current) == null ? void 0 : _a2.all_statements_with_top) || [];
                  const contentToCopy = statementsArray.map((statement) => statement.content).join("\n");
                  goToInfraNodus3({
                    textToShow: contentToCopy,
                    contextName: filePath,
                    exportToInfraNodus,
                    vaultName
                  });
                  setTimeout(
                    () => setExportedGraph(false),
                    2e3
                  );
                }
              }
            )
          }
        ),
        !showingSettings && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(InfoTooltip, { text: "Plugin settings", direction: "right", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          IconButton,
          {
            icon: GearIcon,
            onClick: () => {
              setShowingSettings(true);
            }
          }
        ) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { id: "graph-container", className: "relative h-min mr-2", children: [
        showIframe && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "iframe",
          {
            id: "graph-iframe",
            ref: graph_iframe,
            src: graphLink + `&theme=${colorScheme === "auto" ? obsidianColorSchemeRef.current : colorScheme}` + iframeGraphUser,
            width: "100%",
            height: `${graphHeight}px`,
            title: "Infranodus 3D",
            allowFullScreen: true,
            className: "relative bg-gray-200 border-0 outline-none dark:bg-[#0d1117] px-1 py-1 rounded",
            scrolling: "no",
            allow: "clipboard-write",
            style: { overflow: "hidden" }
          }
        ),
        !showIframe && !error && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "div",
          {
            className: "w-full bg-gray-300 dark:bg-gray-800",
            style: { height: `${graphHeight}px` }
          }
        ),
        isLoadingIframe && !error && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(LoadingView, { loadingState }),
        !filePath && !contentString && !error && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "absolute inset-0 z-[5] flex flex-col items-center justify-center dark:bg-black bg-opacity-50 bg-white", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "text-lg text-gray-600 dark:text-gray-200 animate-pulse", children: "No file or content to analyze. Please, choose a specific file, folder, or search results." }) }),
        error && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          ErrorHandler,
          {
            graphContext: params.graphContext,
            error,
            errorText,
            setError,
            context: {
              setShowingSettings
            }
          }
        )
      ] })
    ] })
  ] });
};
function getGraphHeight(params) {
  const topTextElement = params.topTextElement;
  const maxHeight = params.maxHeight;
  if (!topTextElement)
    return 700;
  const topTextHeight = topTextElement.getBoundingClientRect().height;
  const toRemoveBottom = params.currentPlatform === "mobile" ? 80 : 50;
  const graphHeight = maxHeight - topTextHeight - toRemoveBottom;
  return graphHeight;
}
async function navigateToStatement(params) {
  var _a, _b;
  if (params.wordsToSearch.length === 0)
    return;
  const wordToSearch = params.wordsToSearch[0];
  let link = wordToSearch;
  if (wordToSearch.startsWith("[[") && wordToSearch.endsWith("]]")) {
    link = wordToSearch.slice(2, -2);
  }
  new import_obsidian14.Notice(`Navigating to file - ${link}`);
  let file = null;
  if (link.contains("|")) {
    let linkpath = link.split("|")[0];
    if (!linkpath.endsWith(".md"))
      linkpath += ".md";
    const abstractFile = findFileFromPath(params.app, linkpath);
    if (abstractFile)
      file = abstractFile;
  } else {
    let linkpath = link;
    const abstractFile = findFileFromName(params.app, linkpath);
    if (abstractFile)
      file = abstractFile;
  }
  if (!file) {
    const newLink = link.replace(/_/g, " ");
    const abstractFile = findFileFromName(params.app, link);
    if (abstractFile)
      file = abstractFile;
    if (!file) {
      new import_obsidian14.Notice("File not found, creating");
      let linkPath = newLink;
      if (linkPath.contains("|"))
        linkPath = newLink.split("|")[0];
      if (!linkPath.endsWith(".md"))
        linkPath += ".md";
      const newFile = await params.app.vault.create(linkPath, "");
      file = newFile;
    }
  }
  if (file) {
    const leaf = await openLeafWithPath(file, params.app.workspace);
    if (leaf) {
      const file2 = ((_a = leaf == null ? void 0 : leaf.view) != null ? _a : {}).file;
      await params.graphContext.reloadGraph(
        {
          leaf,
          filePath: (_b = file2 == null ? void 0 : file2.path) != null ? _b : params.filePath,
          fromLayoutChange: true,
          initialData: { wordsToSearch: params.wordsToSearch }
        },
        true
      );
    }
    return;
  }
}
async function goToInfraNodus3({
  textToShow = "",
  contextName = "",
  exportToInfraNodus = { type: "manual", graphName: "" },
  vaultName = ""
}) {
  if (!textToShow || textToShow === "ai generating...") {
    return;
  }
  const encodedText = encodeURIComponent(textToShow);
  const encodedContext = encodeInfraNodusGraphName(
    contextName,
    SETTINGS.EXPORT_GRAPH,
    vaultName
  );
  const linkToOpen = `${SETTINGS.INFRANODUS_API_URL}/import/editor?text=${encodedText}&context=${encodedContext}`;
  if (exportToInfraNodus && exportToInfraNodus.type === "auto") {
    const graphTags = [`context: ${encodedContext}`];
    let graphName = encodedContext;
    graphName = await new Promise((resolve) => {
      new GraphNameModal(app, graphName, resolve).open();
    }) || "";
    if (!graphName) {
      return;
    }
    const dataToSave = {
      contextName: graphName,
      text: textToShow,
      tags: graphTags
    };
    const exportStatus = await InfraNodus.exportText(dataToSave);
    if (exportStatus.error) {
      alert(
        `There was an error saving to the ${graphName} graph in InfraNodus. Reload the page and try again or change your extension setting.`
      );
    } else {
      alert(`Saved to the ${graphName} graph in InfraNodus`);
    }
  } else {
    window.open(linkToOpen, "_blank");
  }
}

// src/graph_view/EmptyGraphView.tsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var EmptyGraphView = () => {
  const colorScheme = getColorScheme();
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    "div",
    {
      id: "graph-container-empty",
      className: "bg-[#e6e7eb] dark:bg-[#0d1117] relative",
      children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "absolute inset-0 mt-8 z-10 flex flex-col items-center justify-center bg-black bg-opacity-50 top-8 dark:bg-white", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
        "span",
        {
          className: `text-xl  dark:text-white p-4 ${colorScheme === "dark" ? "text-white" : "text-black"}`,
          children: [
            "InfraNodus graph view: ",
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("br", {}),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("br", {}),
            "No file or data to refer to. Open a file and click the InfraNodus button or use the contextual menu on a file, a folder, search results, tags, or bookmarks."
          ]
        }
      ) })
    }
  );
};
function getColorScheme() {
  if (document.body.classList.contains("theme-dark")) {
    return "dark";
  }
  return "light";
}

// src/utils/guid.ts
function guidGenerator() {
  const S4 = function() {
    return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
  };
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
}

// src/graph_view/lib/openGraphSideView.ts
function graphContainerSidebarIsHidden() {
  const graphContainer = document.getElementById(
    INFRANODUS_GRAPH_SIDE_VIEW_ID
  );
  if (!graphContainer)
    return false;
  const isHidden = graphContainer.offsetParent === null;
  return isHidden;
}
async function openGraphSideView(app2) {
  const isHidden = graphContainerSidebarIsHidden();
  if (!isHidden)
    return console.log("Graph container is already open");
  const rightSplit = app2.workspace.rightSplit;
  if (rightSplit.collapsed)
    rightSplit.expand();
  const stillHidden = graphContainerSidebarIsHidden();
  if (!stillHidden)
    return console.log("Graph container is already open");
  const headerElement = document.getElementById(INFRANODUS_GRAPH_BUTTON_ID);
  if (!headerElement)
    return console.log("Header element not found");
  headerElement.click();
}

// src/graph_view/index.ts
var INFRANODUS_GRAPH_VIEW_TYPE = "infranodus-graph-view";
var INFRANODUS_GRAPH_SIDE_VIEW_ID = "infranodus-graph-side-view";
var INFRANODUS_GRAPH_BUTTON_ID = "infranodus-graph-button";
function onError(a, b, c, d, e) {
  new import_obsidian15.Notice(`message: ${a}`, 2e4);
  new import_obsidian15.Notice(`source: ${b}`, 2e4);
  new import_obsidian15.Notice(`error: ${e}`, 2e4);
  return true;
}
var currentPlatform6 = import_obsidian15.Platform.isMobileApp || import_obsidian15.Platform.isMobile ? "mobile" : "desktop";
var _InfraNodusGraphView = class extends import_obsidian15.ItemView {
  constructor(params) {
    var _a;
    super(params.leaf);
    this.id = guidGenerator();
    this.isFolder = false;
    this.isRoot = false;
    this.workspaceLayoutReady = false;
    this.previousCorrespondingViewDataMode = "";
    this.filePath = "";
    this.contentString = "";
    this.sourcePath = "";
    this.isReloadingGraph = false;
    this.lastReloadFilePath = "";
    // Variable used in src/main.ts > onload() > observerElementVisibility
    // Used to reload the graph when the side view is made visible, from invisible
    this.lastFilePathWhileHidden = null;
    this.filePath = (_a = params.filePath) != null ? _a : "";
    if (this.filePath) {
      const abstractFile = this.app.vault.getAbstractFileByPath(
        this.filePath
      );
      if (abstractFile instanceof import_obsidian15.TFolder) {
        this.isRoot = abstractFile.isRoot();
        this.isFolder = true;
      }
    }
    this.setTabTitle("InfraNodus Graph");
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        if (currentPlatform6 === "mobile")
          return;
        this.app.workspace.iterateAllLeaves((leaf) => {
          if (!(leaf.view instanceof _InfraNodusGraphView))
            return;
          if (leaf.view.id !== this.id)
            return;
          const toCheck = ["width", "left", "top", "right"];
          const rect = this.shadowElRect;
          const newRect = this.shadowEl.getBoundingClientRect();
          let newRectAllZero = true;
          for (const key of toCheck) {
            if (newRect[key] !== 0) {
              newRectAllZero = false;
              break;
            }
          }
          if (newRectAllZero)
            return;
          for (const key of toCheck) {
            if (rect[key] === newRect[key])
              continue;
            this.shadowElRect = newRect;
            this.reloadGraphWithBuffer({
              leaf,
              filePath: this.filePath,
              fromLayoutChange: true
            });
            return;
          }
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        const correspondingView = getMarkdownViewOfPath({
          app: this.app,
          filePath: this.filePath
        });
        if (!correspondingView)
          return;
        const mode = correspondingView.containerEl.getAttribute("data-mode");
        if (!mode)
          return;
        if (mode === this.previousCorrespondingViewDataMode)
          return;
        this.previousCorrespondingViewDataMode = mode;
        if (mode === "preview") {
          if (SETTINGS.RELOADING_GRAPH === "into reading") {
            this.reloadGraph(
              { leaf: this.leaf, filePath: this.filePath },
              true
            );
          }
        }
      })
    );
    this.app.workspace.onLayoutReady(() => {
      this.workspaceLayoutReady = true;
    });
    try {
      window.onerror = onError;
    } catch (err) {
      new import_obsidian15.Notice("Error setting error handler");
      new import_obsidian15.Notice(err.message);
    }
  }
  async reloadGraphWithBuffer(params, forceReload = false) {
    if (this.timeOut)
      window.clearTimeout(this.timeOut);
    this.timeOut = window.setTimeout(() => {
      this.reloadGraph(params, forceReload);
    }, 1e3);
  }
  async reloadGraph(params = {
    leaf: this.leaf,
    filePath: this.filePath,
    fromLayoutChange: false,
    contentString: this.contentString,
    sourcePath: this.sourcePath
  }, forceReload = true) {
    if (!this.workspaceLayoutReady)
      return;
    this.contentString = params.contentString || "";
    this.sourcePath = params.sourcePath || "";
    const isHidden = graphContainerSidebarIsHidden();
    if (isHidden) {
      this.lastFilePathWhileHidden = params.filePath || "";
      return;
    }
    this.lastFilePathWhileHidden = null;
    this.filePath = params.filePath || "";
    if (this.filePath && !params.fromLayoutChange && this.lastReloadFilePath === this.filePath && !forceReload) {
      return;
    }
    this.lastReloadFilePath = this.filePath;
    if (!params.dontRemoveHighlights) {
      const elementsRemoved = [];
      const hlclass = "infranodus-plugin-yellow-highlight";
      this.app.workspace.iterateAllLeaves((openLeaf) => {
        if (!(openLeaf.view instanceof import_obsidian15.FileView))
          return;
        const html = openLeaf.view.containerEl.querySelectorAll(
          `.${hlclass}`
        );
        for (const element of Array.from(html)) {
          element.classList.remove(hlclass);
          elementsRemoved.push(element);
        }
      });
      unObserveElementAttributes(elementsRemoved);
      elementsRemoved.forEach(
        (el) => el.classList.remove("infranodus-plugin-yellow-highlight")
      );
    }
    if (!this.root || !this.shadowEl)
      return;
    this.root.unmount();
    await new Promise((resolve) => setTimeout(resolve, 0));
    this.root = (0, import_client.createRoot)(this.shadowEl);
    if (this.filePath) {
      this.root.render(
        React4.createElement(GraphView, {
          initialData: params.initialData,
          graphContext: {
            app: this.app,
            filePath: this.filePath,
            isRoot: this.isRoot,
            isFolder: this.isFolder,
            reloadGraph: this.reloadGraph.bind(this),
            infraNodusGraphView: this,
            maxHeight: this.graphContainer.clientHeight,
            maxWidth: this.graphContainer.clientWidth - 24
          }
        })
      );
    } else if (this.contentString) {
      this.root.render(
        React4.createElement(GraphView, {
          initialData: params.initialData,
          graphContext: {
            app: this.app,
            contentString: this.contentString,
            sourcePath: this.sourcePath,
            isRoot: this.isRoot,
            isFolder: this.isFolder,
            reloadGraph: this.reloadGraph.bind(this),
            infraNodusGraphView: this,
            maxHeight: this.graphContainer.clientHeight,
            maxWidth: this.graphContainer.clientWidth - 24
          }
        })
      );
    } else {
      this.root.render(React4.createElement(EmptyGraphView, {}));
    }
    this.setTabTitle("InfraNodus Graph");
  }
  setTabTitle(title) {
    var _a;
    const header = (_a = this.leaf) == null ? void 0 : _a.tabHeaderEl;
    if (header) {
      const headerTitle = header.querySelector(
        ".workspace-tab-header-inner-title"
      );
      if (headerTitle)
        headerTitle.innerText = title;
      header.setAttribute("aria-label", title);
      header.id = INFRANODUS_GRAPH_BUTTON_ID;
      const headerIcon = header.querySelector(
        ".workspace-tab-header-inner-icon"
      );
      setTimeout(() => {
        if (!headerIcon)
          return;
        (0, import_obsidian15.setIcon)(headerIcon, "infranodus-icon");
      }, 100);
    }
  }
  getViewType() {
    return INFRANODUS_GRAPH_VIEW_TYPE;
  }
  getDisplayText() {
    var _a;
    if (currentPlatform6 === "desktop") {
      if (this.isRoot)
        return `[ROOT] ${this.filePath}`;
      if (this.isFolder)
        return `[FOLDER] ${this.filePath}`;
      return this.filePath;
    }
    const isInMainPane = this.leaf.getRoot() === this.app.workspace.rootSplit;
    if (!isInMainPane)
      return "InfraNodus Graph";
    const file = this.app.vault.getAbstractFileByPath(this.filePath);
    return (_a = file == null ? void 0 : file.name) != null ? _a : "InfraNodus Graph";
  }
  getIcon() {
    return "infranodus-icon";
  }
  async onOpen() {
    var _a;
    const container = this.containerEl.children[1];
    container.id = INFRANODUS_GRAPH_SIDE_VIEW_ID;
    this.graphContainer = container;
    const shadowRoot = container.attachShadow({ mode: "open" });
    (_a = this.root) == null ? void 0 : _a.unmount();
    this.shadowEl = shadowRoot.createEl("div", {
      cls: "infranodus-graph-content"
    });
    this.root = (0, import_client.createRoot)(this.shadowEl);
    30;
    if (this.filePath) {
      this.root.render(
        React4.createElement(GraphView, {
          graphContext: {
            app: this.app,
            filePath: this.filePath,
            isRoot: this.isRoot,
            isFolder: this.isFolder,
            reloadGraph: this.reloadGraph.bind(this),
            infraNodusGraphView: this,
            maxHeight: this.graphContainer.clientHeight,
            maxWidth: this.graphContainer.clientWidth - 24
          }
        })
      );
    } else {
      this.root.render(React4.createElement(EmptyGraphView, {}));
    }
    const styleEl = shadowRoot.createEl("style");
    styleEl.textContent = `/* src/styles.css */
*,
::before,
::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x: ;
  --tw-pan-y: ;
  --tw-pinch-zoom: ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position: ;
  --tw-gradient-via-position: ;
  --tw-gradient-to-position: ;
  --tw-ordinal: ;
  --tw-slashed-zero: ;
  --tw-numeric-figure: ;
  --tw-numeric-spacing: ;
  --tw-numeric-fraction: ;
  --tw-ring-inset: ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur: ;
  --tw-brightness: ;
  --tw-contrast: ;
  --tw-grayscale: ;
  --tw-hue-rotate: ;
  --tw-invert: ;
  --tw-saturate: ;
  --tw-sepia: ;
  --tw-drop-shadow: ;
  --tw-backdrop-blur: ;
  --tw-backdrop-brightness: ;
  --tw-backdrop-contrast: ;
  --tw-backdrop-grayscale: ;
  --tw-backdrop-hue-rotate: ;
  --tw-backdrop-invert: ;
  --tw-backdrop-opacity: ;
  --tw-backdrop-saturate: ;
  --tw-backdrop-sepia: ;
  --tw-contain-size: ;
  --tw-contain-layout: ;
  --tw-contain-paint: ;
  --tw-contain-style: ;
}
::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x: ;
  --tw-pan-y: ;
  --tw-pinch-zoom: ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position: ;
  --tw-gradient-via-position: ;
  --tw-gradient-to-position: ;
  --tw-ordinal: ;
  --tw-slashed-zero: ;
  --tw-numeric-figure: ;
  --tw-numeric-spacing: ;
  --tw-numeric-fraction: ;
  --tw-ring-inset: ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur: ;
  --tw-brightness: ;
  --tw-contrast: ;
  --tw-grayscale: ;
  --tw-hue-rotate: ;
  --tw-invert: ;
  --tw-saturate: ;
  --tw-sepia: ;
  --tw-drop-shadow: ;
  --tw-backdrop-blur: ;
  --tw-backdrop-brightness: ;
  --tw-backdrop-contrast: ;
  --tw-backdrop-grayscale: ;
  --tw-backdrop-hue-rotate: ;
  --tw-backdrop-invert: ;
  --tw-backdrop-opacity: ;
  --tw-backdrop-saturate: ;
  --tw-backdrop-sepia: ;
  --tw-contain-size: ;
  --tw-contain-layout: ;
  --tw-contain-paint: ;
  --tw-contain-style: ;
}
.container {
  width: 100%;
}
@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}
@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}
@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}
@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}
@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
.\\!visible {
  visibility: visible !important;
}
.visible {
  visibility: visible;
}
.invisible {
  visibility: hidden;
}
.static {
  position: static;
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.inset-0 {
  inset: 0px;
}
.bottom-0 {
  bottom: 0px;
}
.bottom-3 {
  bottom: 12px;
}
.bottom-4 {
  bottom: 16px;
}
.bottom-\\[1px\\] {
  bottom: 1px;
}
.left-0 {
  left: 0px;
}
.left-1 {
  left: 4px;
}
.left-12 {
  left: 48px;
}
.left-2 {
  left: 8px;
}
.right-0 {
  right: 0px;
}
.right-1 {
  right: 4px;
}
.right-2 {
  right: 8px;
}
.right-3 {
  right: 12px;
}
.top-0 {
  top: 0px;
}
.top-1 {
  top: 4px;
}
.top-2 {
  top: 8px;
}
.top-8 {
  top: 32px;
}
.z-10 {
  z-index: 10;
}
.z-50 {
  z-index: 50;
}
.z-\\[5\\] {
  z-index: 5;
}
.m-2 {
  margin: 8px;
}
.m-4 {
  margin: 16px;
}
.my-1 {
  margin-top: 4px;
  margin-bottom: 4px;
}
.-ml-1 {
  margin-left: -4px;
}
.-ml-2 {
  margin-left: -8px;
}
.mb-2 {
  margin-bottom: 8px;
}
.mb-4 {
  margin-bottom: 16px;
}
.ml-1 {
  margin-left: 4px;
}
.ml-2 {
  margin-left: 8px;
}
.ml-4 {
  margin-left: 16px;
}
.ml-auto {
  margin-left: auto;
}
.mr-2 {
  margin-right: 8px;
}
.mr-auto {
  margin-right: auto;
}
.mt-0 {
  margin-top: 0px;
}
.mt-1 {
  margin-top: 4px;
}
.mt-2 {
  margin-top: 8px;
}
.mt-8 {
  margin-top: 32px;
}
.mt-auto {
  margin-top: auto;
}
.block {
  display: block;
}
.inline-block {
  display: inline-block;
}
.inline {
  display: inline;
}
.flex {
  display: flex;
}
.hidden {
  display: none;
}
.h-3 {
  height: 12px;
}
.h-4 {
  height: 16px;
}
.h-5 {
  height: 20px;
}
.h-6 {
  height: 24px;
}
.h-7 {
  height: 28px;
}
.h-full {
  height: 100%;
}
.h-min {
  height: -moz-min-content;
  height: min-content;
}
.max-h-60 {
  max-height: 240px;
}
.max-h-64 {
  max-height: 256px;
}
.max-h-\\[30vh\\] {
  max-height: 30vh;
}
.max-h-\\[40vh\\] {
  max-height: 40vh;
}
.min-h-44 {
  min-height: 176px;
}
.min-h-\\[30vh\\] {
  min-height: 30vh;
}
.w-3 {
  width: 12px;
}
.w-64 {
  width: 256px;
}
.w-8 {
  width: 32px;
}
.w-auto {
  width: auto;
}
.w-fit {
  width: -moz-fit-content;
  width: fit-content;
}
.w-full {
  width: 100%;
}
.max-w-\\[280px\\] {
  max-width: 280px;
}
.max-w-\\[450px\\] {
  max-width: 450px;
}
.-translate-y-\\[10px\\] {
  --tw-translate-y: -10px;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.translate-x-full {
  --tw-translate-x: 100%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
.transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
@keyframes pulse {
  50% {
    opacity: .5;
  }
}
.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}
.cursor-not-allowed {
  cursor: not-allowed;
}
.cursor-pointer {
  cursor: pointer;
}
.resize-none {
  resize: none;
}
.flex-row {
  flex-direction: row;
}
.flex-col {
  flex-direction: column;
}
.items-start {
  align-items: flex-start;
}
.items-end {
  align-items: flex-end;
}
.items-center {
  align-items: center;
}
.items-stretch {
  align-items: stretch;
}
.justify-start {
  justify-content: flex-start;
}
.justify-end {
  justify-content: flex-end;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.gap-1 {
  gap: 4px;
}
.gap-2 {
  gap: 8px;
}
.gap-3 {
  gap: 12px;
}
.gap-4 {
  gap: 16px;
}
.space-y-2 > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 0;
  margin-top: calc(8px * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(8px * var(--tw-space-y-reverse));
}
.overflow-auto {
  overflow: auto;
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-y-auto {
  overflow-y: auto;
}
.overflow-y-scroll {
  overflow-y: scroll;
}
.whitespace-nowrap {
  white-space: nowrap;
}
.whitespace-pre-wrap {
  white-space: pre-wrap;
}
.rounded {
  border-radius: 4px;
}
.rounded-full {
  border-radius: 9999px;
}
.rounded-md {
  border-radius: 6px;
}
.border {
  border-width: 1px;
}
.border-0 {
  border-width: 0px;
}
.border-b {
  border-bottom-width: 1px;
}
.border-b-\\[1px\\] {
  border-bottom-width: 1px;
}
.border-t-\\[1px\\] {
  border-top-width: 1px;
}
.border-solid {
  border-style: solid;
}
.border-gray-200 {
  --tw-border-opacity: 1;
  border-color: rgb(229 231 235 / var(--tw-border-opacity));
}
.border-gray-300 {
  --tw-border-opacity: 1;
  border-color: rgb(209 213 219 / var(--tw-border-opacity));
}
.border-gray-600 {
  --tw-border-opacity: 1;
  border-color: rgb(75 85 99 / var(--tw-border-opacity));
}
.border-transparent {
  border-color: transparent;
}
.border-t-black {
  --tw-border-opacity: 1;
  border-top-color: rgb(0 0 0 / var(--tw-border-opacity));
}
.bg-\\[\\#e6e7eb\\] {
  --tw-bg-opacity: 1;
  background-color: rgb(230 231 235 / var(--tw-bg-opacity));
}
.bg-amber-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 243 199 / var(--tw-bg-opacity));
}
.bg-amber-100\\/0 {
  background-color: rgb(254 243 199 / 0);
}
.bg-amber-100\\/10 {
  background-color: rgb(254 243 199 / 0.1);
}
.bg-amber-100\\/100 {
  background-color: rgb(254 243 199 / 1);
}
.bg-amber-100\\/15 {
  background-color: rgb(254 243 199 / 0.15);
}
.bg-amber-100\\/20 {
  background-color: rgb(254 243 199 / 0.2);
}
.bg-amber-100\\/25 {
  background-color: rgb(254 243 199 / 0.25);
}
.bg-amber-100\\/30 {
  background-color: rgb(254 243 199 / 0.3);
}
.bg-amber-100\\/35 {
  background-color: rgb(254 243 199 / 0.35);
}
.bg-amber-100\\/40 {
  background-color: rgb(254 243 199 / 0.4);
}
.bg-amber-100\\/45 {
  background-color: rgb(254 243 199 / 0.45);
}
.bg-amber-100\\/5 {
  background-color: rgb(254 243 199 / 0.05);
}
.bg-amber-100\\/50 {
  background-color: rgb(254 243 199 / 0.5);
}
.bg-amber-100\\/55 {
  background-color: rgb(254 243 199 / 0.55);
}
.bg-amber-100\\/60 {
  background-color: rgb(254 243 199 / 0.6);
}
.bg-amber-100\\/65 {
  background-color: rgb(254 243 199 / 0.65);
}
.bg-amber-100\\/70 {
  background-color: rgb(254 243 199 / 0.7);
}
.bg-amber-100\\/75 {
  background-color: rgb(254 243 199 / 0.75);
}
.bg-amber-100\\/80 {
  background-color: rgb(254 243 199 / 0.8);
}
.bg-amber-100\\/85 {
  background-color: rgb(254 243 199 / 0.85);
}
.bg-amber-100\\/90 {
  background-color: rgb(254 243 199 / 0.9);
}
.bg-amber-100\\/95 {
  background-color: rgb(254 243 199 / 0.95);
}
.bg-amber-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 230 138 / var(--tw-bg-opacity));
}
.bg-amber-200\\/0 {
  background-color: rgb(253 230 138 / 0);
}
.bg-amber-200\\/10 {
  background-color: rgb(253 230 138 / 0.1);
}
.bg-amber-200\\/100 {
  background-color: rgb(253 230 138 / 1);
}
.bg-amber-200\\/15 {
  background-color: rgb(253 230 138 / 0.15);
}
.bg-amber-200\\/20 {
  background-color: rgb(253 230 138 / 0.2);
}
.bg-amber-200\\/25 {
  background-color: rgb(253 230 138 / 0.25);
}
.bg-amber-200\\/30 {
  background-color: rgb(253 230 138 / 0.3);
}
.bg-amber-200\\/35 {
  background-color: rgb(253 230 138 / 0.35);
}
.bg-amber-200\\/40 {
  background-color: rgb(253 230 138 / 0.4);
}
.bg-amber-200\\/45 {
  background-color: rgb(253 230 138 / 0.45);
}
.bg-amber-200\\/5 {
  background-color: rgb(253 230 138 / 0.05);
}
.bg-amber-200\\/50 {
  background-color: rgb(253 230 138 / 0.5);
}
.bg-amber-200\\/55 {
  background-color: rgb(253 230 138 / 0.55);
}
.bg-amber-200\\/60 {
  background-color: rgb(253 230 138 / 0.6);
}
.bg-amber-200\\/65 {
  background-color: rgb(253 230 138 / 0.65);
}
.bg-amber-200\\/70 {
  background-color: rgb(253 230 138 / 0.7);
}
.bg-amber-200\\/75 {
  background-color: rgb(253 230 138 / 0.75);
}
.bg-amber-200\\/80 {
  background-color: rgb(253 230 138 / 0.8);
}
.bg-amber-200\\/85 {
  background-color: rgb(253 230 138 / 0.85);
}
.bg-amber-200\\/90 {
  background-color: rgb(253 230 138 / 0.9);
}
.bg-amber-200\\/95 {
  background-color: rgb(253 230 138 / 0.95);
}
.bg-amber-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(252 211 77 / var(--tw-bg-opacity));
}
.bg-amber-300\\/0 {
  background-color: rgb(252 211 77 / 0);
}
.bg-amber-300\\/10 {
  background-color: rgb(252 211 77 / 0.1);
}
.bg-amber-300\\/100 {
  background-color: rgb(252 211 77 / 1);
}
.bg-amber-300\\/15 {
  background-color: rgb(252 211 77 / 0.15);
}
.bg-amber-300\\/20 {
  background-color: rgb(252 211 77 / 0.2);
}
.bg-amber-300\\/25 {
  background-color: rgb(252 211 77 / 0.25);
}
.bg-amber-300\\/30 {
  background-color: rgb(252 211 77 / 0.3);
}
.bg-amber-300\\/35 {
  background-color: rgb(252 211 77 / 0.35);
}
.bg-amber-300\\/40 {
  background-color: rgb(252 211 77 / 0.4);
}
.bg-amber-300\\/45 {
  background-color: rgb(252 211 77 / 0.45);
}
.bg-amber-300\\/5 {
  background-color: rgb(252 211 77 / 0.05);
}
.bg-amber-300\\/50 {
  background-color: rgb(252 211 77 / 0.5);
}
.bg-amber-300\\/55 {
  background-color: rgb(252 211 77 / 0.55);
}
.bg-amber-300\\/60 {
  background-color: rgb(252 211 77 / 0.6);
}
.bg-amber-300\\/65 {
  background-color: rgb(252 211 77 / 0.65);
}
.bg-amber-300\\/70 {
  background-color: rgb(252 211 77 / 0.7);
}
.bg-amber-300\\/75 {
  background-color: rgb(252 211 77 / 0.75);
}
.bg-amber-300\\/80 {
  background-color: rgb(252 211 77 / 0.8);
}
.bg-amber-300\\/85 {
  background-color: rgb(252 211 77 / 0.85);
}
.bg-amber-300\\/90 {
  background-color: rgb(252 211 77 / 0.9);
}
.bg-amber-300\\/95 {
  background-color: rgb(252 211 77 / 0.95);
}
.bg-amber-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(251 191 36 / var(--tw-bg-opacity));
}
.bg-amber-400\\/0 {
  background-color: rgb(251 191 36 / 0);
}
.bg-amber-400\\/10 {
  background-color: rgb(251 191 36 / 0.1);
}
.bg-amber-400\\/100 {
  background-color: rgb(251 191 36 / 1);
}
.bg-amber-400\\/15 {
  background-color: rgb(251 191 36 / 0.15);
}
.bg-amber-400\\/20 {
  background-color: rgb(251 191 36 / 0.2);
}
.bg-amber-400\\/25 {
  background-color: rgb(251 191 36 / 0.25);
}
.bg-amber-400\\/30 {
  background-color: rgb(251 191 36 / 0.3);
}
.bg-amber-400\\/35 {
  background-color: rgb(251 191 36 / 0.35);
}
.bg-amber-400\\/40 {
  background-color: rgb(251 191 36 / 0.4);
}
.bg-amber-400\\/45 {
  background-color: rgb(251 191 36 / 0.45);
}
.bg-amber-400\\/5 {
  background-color: rgb(251 191 36 / 0.05);
}
.bg-amber-400\\/50 {
  background-color: rgb(251 191 36 / 0.5);
}
.bg-amber-400\\/55 {
  background-color: rgb(251 191 36 / 0.55);
}
.bg-amber-400\\/60 {
  background-color: rgb(251 191 36 / 0.6);
}
.bg-amber-400\\/65 {
  background-color: rgb(251 191 36 / 0.65);
}
.bg-amber-400\\/70 {
  background-color: rgb(251 191 36 / 0.7);
}
.bg-amber-400\\/75 {
  background-color: rgb(251 191 36 / 0.75);
}
.bg-amber-400\\/80 {
  background-color: rgb(251 191 36 / 0.8);
}
.bg-amber-400\\/85 {
  background-color: rgb(251 191 36 / 0.85);
}
.bg-amber-400\\/90 {
  background-color: rgb(251 191 36 / 0.9);
}
.bg-amber-400\\/95 {
  background-color: rgb(251 191 36 / 0.95);
}
.bg-amber-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(255 251 235 / var(--tw-bg-opacity));
}
.bg-amber-50\\/0 {
  background-color: rgb(255 251 235 / 0);
}
.bg-amber-50\\/10 {
  background-color: rgb(255 251 235 / 0.1);
}
.bg-amber-50\\/100 {
  background-color: rgb(255 251 235 / 1);
}
.bg-amber-50\\/15 {
  background-color: rgb(255 251 235 / 0.15);
}
.bg-amber-50\\/20 {
  background-color: rgb(255 251 235 / 0.2);
}
.bg-amber-50\\/25 {
  background-color: rgb(255 251 235 / 0.25);
}
.bg-amber-50\\/30 {
  background-color: rgb(255 251 235 / 0.3);
}
.bg-amber-50\\/35 {
  background-color: rgb(255 251 235 / 0.35);
}
.bg-amber-50\\/40 {
  background-color: rgb(255 251 235 / 0.4);
}
.bg-amber-50\\/45 {
  background-color: rgb(255 251 235 / 0.45);
}
.bg-amber-50\\/5 {
  background-color: rgb(255 251 235 / 0.05);
}
.bg-amber-50\\/50 {
  background-color: rgb(255 251 235 / 0.5);
}
.bg-amber-50\\/55 {
  background-color: rgb(255 251 235 / 0.55);
}
.bg-amber-50\\/60 {
  background-color: rgb(255 251 235 / 0.6);
}
.bg-amber-50\\/65 {
  background-color: rgb(255 251 235 / 0.65);
}
.bg-amber-50\\/70 {
  background-color: rgb(255 251 235 / 0.7);
}
.bg-amber-50\\/75 {
  background-color: rgb(255 251 235 / 0.75);
}
.bg-amber-50\\/80 {
  background-color: rgb(255 251 235 / 0.8);
}
.bg-amber-50\\/85 {
  background-color: rgb(255 251 235 / 0.85);
}
.bg-amber-50\\/90 {
  background-color: rgb(255 251 235 / 0.9);
}
.bg-amber-50\\/95 {
  background-color: rgb(255 251 235 / 0.95);
}
.bg-amber-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(245 158 11 / var(--tw-bg-opacity));
}
.bg-amber-500\\/0 {
  background-color: rgb(245 158 11 / 0);
}
.bg-amber-500\\/10 {
  background-color: rgb(245 158 11 / 0.1);
}
.bg-amber-500\\/100 {
  background-color: rgb(245 158 11 / 1);
}
.bg-amber-500\\/15 {
  background-color: rgb(245 158 11 / 0.15);
}
.bg-amber-500\\/20 {
  background-color: rgb(245 158 11 / 0.2);
}
.bg-amber-500\\/25 {
  background-color: rgb(245 158 11 / 0.25);
}
.bg-amber-500\\/30 {
  background-color: rgb(245 158 11 / 0.3);
}
.bg-amber-500\\/35 {
  background-color: rgb(245 158 11 / 0.35);
}
.bg-amber-500\\/40 {
  background-color: rgb(245 158 11 / 0.4);
}
.bg-amber-500\\/45 {
  background-color: rgb(245 158 11 / 0.45);
}
.bg-amber-500\\/5 {
  background-color: rgb(245 158 11 / 0.05);
}
.bg-amber-500\\/50 {
  background-color: rgb(245 158 11 / 0.5);
}
.bg-amber-500\\/55 {
  background-color: rgb(245 158 11 / 0.55);
}
.bg-amber-500\\/60 {
  background-color: rgb(245 158 11 / 0.6);
}
.bg-amber-500\\/65 {
  background-color: rgb(245 158 11 / 0.65);
}
.bg-amber-500\\/70 {
  background-color: rgb(245 158 11 / 0.7);
}
.bg-amber-500\\/75 {
  background-color: rgb(245 158 11 / 0.75);
}
.bg-amber-500\\/80 {
  background-color: rgb(245 158 11 / 0.8);
}
.bg-amber-500\\/85 {
  background-color: rgb(245 158 11 / 0.85);
}
.bg-amber-500\\/90 {
  background-color: rgb(245 158 11 / 0.9);
}
.bg-amber-500\\/95 {
  background-color: rgb(245 158 11 / 0.95);
}
.bg-amber-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(217 119 6 / var(--tw-bg-opacity));
}
.bg-amber-600\\/0 {
  background-color: rgb(217 119 6 / 0);
}
.bg-amber-600\\/10 {
  background-color: rgb(217 119 6 / 0.1);
}
.bg-amber-600\\/100 {
  background-color: rgb(217 119 6 / 1);
}
.bg-amber-600\\/15 {
  background-color: rgb(217 119 6 / 0.15);
}
.bg-amber-600\\/20 {
  background-color: rgb(217 119 6 / 0.2);
}
.bg-amber-600\\/25 {
  background-color: rgb(217 119 6 / 0.25);
}
.bg-amber-600\\/30 {
  background-color: rgb(217 119 6 / 0.3);
}
.bg-amber-600\\/35 {
  background-color: rgb(217 119 6 / 0.35);
}
.bg-amber-600\\/40 {
  background-color: rgb(217 119 6 / 0.4);
}
.bg-amber-600\\/45 {
  background-color: rgb(217 119 6 / 0.45);
}
.bg-amber-600\\/5 {
  background-color: rgb(217 119 6 / 0.05);
}
.bg-amber-600\\/50 {
  background-color: rgb(217 119 6 / 0.5);
}
.bg-amber-600\\/55 {
  background-color: rgb(217 119 6 / 0.55);
}
.bg-amber-600\\/60 {
  background-color: rgb(217 119 6 / 0.6);
}
.bg-amber-600\\/65 {
  background-color: rgb(217 119 6 / 0.65);
}
.bg-amber-600\\/70 {
  background-color: rgb(217 119 6 / 0.7);
}
.bg-amber-600\\/75 {
  background-color: rgb(217 119 6 / 0.75);
}
.bg-amber-600\\/80 {
  background-color: rgb(217 119 6 / 0.8);
}
.bg-amber-600\\/85 {
  background-color: rgb(217 119 6 / 0.85);
}
.bg-amber-600\\/90 {
  background-color: rgb(217 119 6 / 0.9);
}
.bg-amber-600\\/95 {
  background-color: rgb(217 119 6 / 0.95);
}
.bg-amber-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(180 83 9 / var(--tw-bg-opacity));
}
.bg-amber-700\\/0 {
  background-color: rgb(180 83 9 / 0);
}
.bg-amber-700\\/10 {
  background-color: rgb(180 83 9 / 0.1);
}
.bg-amber-700\\/100 {
  background-color: rgb(180 83 9 / 1);
}
.bg-amber-700\\/15 {
  background-color: rgb(180 83 9 / 0.15);
}
.bg-amber-700\\/20 {
  background-color: rgb(180 83 9 / 0.2);
}
.bg-amber-700\\/25 {
  background-color: rgb(180 83 9 / 0.25);
}
.bg-amber-700\\/30 {
  background-color: rgb(180 83 9 / 0.3);
}
.bg-amber-700\\/35 {
  background-color: rgb(180 83 9 / 0.35);
}
.bg-amber-700\\/40 {
  background-color: rgb(180 83 9 / 0.4);
}
.bg-amber-700\\/45 {
  background-color: rgb(180 83 9 / 0.45);
}
.bg-amber-700\\/5 {
  background-color: rgb(180 83 9 / 0.05);
}
.bg-amber-700\\/50 {
  background-color: rgb(180 83 9 / 0.5);
}
.bg-amber-700\\/55 {
  background-color: rgb(180 83 9 / 0.55);
}
.bg-amber-700\\/60 {
  background-color: rgb(180 83 9 / 0.6);
}
.bg-amber-700\\/65 {
  background-color: rgb(180 83 9 / 0.65);
}
.bg-amber-700\\/70 {
  background-color: rgb(180 83 9 / 0.7);
}
.bg-amber-700\\/75 {
  background-color: rgb(180 83 9 / 0.75);
}
.bg-amber-700\\/80 {
  background-color: rgb(180 83 9 / 0.8);
}
.bg-amber-700\\/85 {
  background-color: rgb(180 83 9 / 0.85);
}
.bg-amber-700\\/90 {
  background-color: rgb(180 83 9 / 0.9);
}
.bg-amber-700\\/95 {
  background-color: rgb(180 83 9 / 0.95);
}
.bg-amber-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(146 64 14 / var(--tw-bg-opacity));
}
.bg-amber-800\\/0 {
  background-color: rgb(146 64 14 / 0);
}
.bg-amber-800\\/10 {
  background-color: rgb(146 64 14 / 0.1);
}
.bg-amber-800\\/100 {
  background-color: rgb(146 64 14 / 1);
}
.bg-amber-800\\/15 {
  background-color: rgb(146 64 14 / 0.15);
}
.bg-amber-800\\/20 {
  background-color: rgb(146 64 14 / 0.2);
}
.bg-amber-800\\/25 {
  background-color: rgb(146 64 14 / 0.25);
}
.bg-amber-800\\/30 {
  background-color: rgb(146 64 14 / 0.3);
}
.bg-amber-800\\/35 {
  background-color: rgb(146 64 14 / 0.35);
}
.bg-amber-800\\/40 {
  background-color: rgb(146 64 14 / 0.4);
}
.bg-amber-800\\/45 {
  background-color: rgb(146 64 14 / 0.45);
}
.bg-amber-800\\/5 {
  background-color: rgb(146 64 14 / 0.05);
}
.bg-amber-800\\/50 {
  background-color: rgb(146 64 14 / 0.5);
}
.bg-amber-800\\/55 {
  background-color: rgb(146 64 14 / 0.55);
}
.bg-amber-800\\/60 {
  background-color: rgb(146 64 14 / 0.6);
}
.bg-amber-800\\/65 {
  background-color: rgb(146 64 14 / 0.65);
}
.bg-amber-800\\/70 {
  background-color: rgb(146 64 14 / 0.7);
}
.bg-amber-800\\/75 {
  background-color: rgb(146 64 14 / 0.75);
}
.bg-amber-800\\/80 {
  background-color: rgb(146 64 14 / 0.8);
}
.bg-amber-800\\/85 {
  background-color: rgb(146 64 14 / 0.85);
}
.bg-amber-800\\/90 {
  background-color: rgb(146 64 14 / 0.9);
}
.bg-amber-800\\/95 {
  background-color: rgb(146 64 14 / 0.95);
}
.bg-amber-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(120 53 15 / var(--tw-bg-opacity));
}
.bg-amber-900\\/0 {
  background-color: rgb(120 53 15 / 0);
}
.bg-amber-900\\/10 {
  background-color: rgb(120 53 15 / 0.1);
}
.bg-amber-900\\/100 {
  background-color: rgb(120 53 15 / 1);
}
.bg-amber-900\\/15 {
  background-color: rgb(120 53 15 / 0.15);
}
.bg-amber-900\\/20 {
  background-color: rgb(120 53 15 / 0.2);
}
.bg-amber-900\\/25 {
  background-color: rgb(120 53 15 / 0.25);
}
.bg-amber-900\\/30 {
  background-color: rgb(120 53 15 / 0.3);
}
.bg-amber-900\\/35 {
  background-color: rgb(120 53 15 / 0.35);
}
.bg-amber-900\\/40 {
  background-color: rgb(120 53 15 / 0.4);
}
.bg-amber-900\\/45 {
  background-color: rgb(120 53 15 / 0.45);
}
.bg-amber-900\\/5 {
  background-color: rgb(120 53 15 / 0.05);
}
.bg-amber-900\\/50 {
  background-color: rgb(120 53 15 / 0.5);
}
.bg-amber-900\\/55 {
  background-color: rgb(120 53 15 / 0.55);
}
.bg-amber-900\\/60 {
  background-color: rgb(120 53 15 / 0.6);
}
.bg-amber-900\\/65 {
  background-color: rgb(120 53 15 / 0.65);
}
.bg-amber-900\\/70 {
  background-color: rgb(120 53 15 / 0.7);
}
.bg-amber-900\\/75 {
  background-color: rgb(120 53 15 / 0.75);
}
.bg-amber-900\\/80 {
  background-color: rgb(120 53 15 / 0.8);
}
.bg-amber-900\\/85 {
  background-color: rgb(120 53 15 / 0.85);
}
.bg-amber-900\\/90 {
  background-color: rgb(120 53 15 / 0.9);
}
.bg-amber-900\\/95 {
  background-color: rgb(120 53 15 / 0.95);
}
.bg-amber-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(69 26 3 / var(--tw-bg-opacity));
}
.bg-amber-950\\/0 {
  background-color: rgb(69 26 3 / 0);
}
.bg-amber-950\\/10 {
  background-color: rgb(69 26 3 / 0.1);
}
.bg-amber-950\\/100 {
  background-color: rgb(69 26 3 / 1);
}
.bg-amber-950\\/15 {
  background-color: rgb(69 26 3 / 0.15);
}
.bg-amber-950\\/20 {
  background-color: rgb(69 26 3 / 0.2);
}
.bg-amber-950\\/25 {
  background-color: rgb(69 26 3 / 0.25);
}
.bg-amber-950\\/30 {
  background-color: rgb(69 26 3 / 0.3);
}
.bg-amber-950\\/35 {
  background-color: rgb(69 26 3 / 0.35);
}
.bg-amber-950\\/40 {
  background-color: rgb(69 26 3 / 0.4);
}
.bg-amber-950\\/45 {
  background-color: rgb(69 26 3 / 0.45);
}
.bg-amber-950\\/5 {
  background-color: rgb(69 26 3 / 0.05);
}
.bg-amber-950\\/50 {
  background-color: rgb(69 26 3 / 0.5);
}
.bg-amber-950\\/55 {
  background-color: rgb(69 26 3 / 0.55);
}
.bg-amber-950\\/60 {
  background-color: rgb(69 26 3 / 0.6);
}
.bg-amber-950\\/65 {
  background-color: rgb(69 26 3 / 0.65);
}
.bg-amber-950\\/70 {
  background-color: rgb(69 26 3 / 0.7);
}
.bg-amber-950\\/75 {
  background-color: rgb(69 26 3 / 0.75);
}
.bg-amber-950\\/80 {
  background-color: rgb(69 26 3 / 0.8);
}
.bg-amber-950\\/85 {
  background-color: rgb(69 26 3 / 0.85);
}
.bg-amber-950\\/90 {
  background-color: rgb(69 26 3 / 0.9);
}
.bg-amber-950\\/95 {
  background-color: rgb(69 26 3 / 0.95);
}
.bg-black {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}
.bg-black\\/0 {
  background-color: rgb(0 0 0 / 0);
}
.bg-black\\/10 {
  background-color: rgb(0 0 0 / 0.1);
}
.bg-black\\/100 {
  background-color: rgb(0 0 0 / 1);
}
.bg-black\\/15 {
  background-color: rgb(0 0 0 / 0.15);
}
.bg-black\\/20 {
  background-color: rgb(0 0 0 / 0.2);
}
.bg-black\\/25 {
  background-color: rgb(0 0 0 / 0.25);
}
.bg-black\\/30 {
  background-color: rgb(0 0 0 / 0.3);
}
.bg-black\\/35 {
  background-color: rgb(0 0 0 / 0.35);
}
.bg-black\\/40 {
  background-color: rgb(0 0 0 / 0.4);
}
.bg-black\\/45 {
  background-color: rgb(0 0 0 / 0.45);
}
.bg-black\\/5 {
  background-color: rgb(0 0 0 / 0.05);
}
.bg-black\\/50 {
  background-color: rgb(0 0 0 / 0.5);
}
.bg-black\\/55 {
  background-color: rgb(0 0 0 / 0.55);
}
.bg-black\\/60 {
  background-color: rgb(0 0 0 / 0.6);
}
.bg-black\\/65 {
  background-color: rgb(0 0 0 / 0.65);
}
.bg-black\\/70 {
  background-color: rgb(0 0 0 / 0.7);
}
.bg-black\\/75 {
  background-color: rgb(0 0 0 / 0.75);
}
.bg-black\\/80 {
  background-color: rgb(0 0 0 / 0.8);
}
.bg-black\\/85 {
  background-color: rgb(0 0 0 / 0.85);
}
.bg-black\\/90 {
  background-color: rgb(0 0 0 / 0.9);
}
.bg-black\\/95 {
  background-color: rgb(0 0 0 / 0.95);
}
.bg-blue-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(219 234 254 / var(--tw-bg-opacity));
}
.bg-blue-100\\/0 {
  background-color: rgb(219 234 254 / 0);
}
.bg-blue-100\\/10 {
  background-color: rgb(219 234 254 / 0.1);
}
.bg-blue-100\\/100 {
  background-color: rgb(219 234 254 / 1);
}
.bg-blue-100\\/15 {
  background-color: rgb(219 234 254 / 0.15);
}
.bg-blue-100\\/20 {
  background-color: rgb(219 234 254 / 0.2);
}
.bg-blue-100\\/25 {
  background-color: rgb(219 234 254 / 0.25);
}
.bg-blue-100\\/30 {
  background-color: rgb(219 234 254 / 0.3);
}
.bg-blue-100\\/35 {
  background-color: rgb(219 234 254 / 0.35);
}
.bg-blue-100\\/40 {
  background-color: rgb(219 234 254 / 0.4);
}
.bg-blue-100\\/45 {
  background-color: rgb(219 234 254 / 0.45);
}
.bg-blue-100\\/5 {
  background-color: rgb(219 234 254 / 0.05);
}
.bg-blue-100\\/50 {
  background-color: rgb(219 234 254 / 0.5);
}
.bg-blue-100\\/55 {
  background-color: rgb(219 234 254 / 0.55);
}
.bg-blue-100\\/60 {
  background-color: rgb(219 234 254 / 0.6);
}
.bg-blue-100\\/65 {
  background-color: rgb(219 234 254 / 0.65);
}
.bg-blue-100\\/70 {
  background-color: rgb(219 234 254 / 0.7);
}
.bg-blue-100\\/75 {
  background-color: rgb(219 234 254 / 0.75);
}
.bg-blue-100\\/80 {
  background-color: rgb(219 234 254 / 0.8);
}
.bg-blue-100\\/85 {
  background-color: rgb(219 234 254 / 0.85);
}
.bg-blue-100\\/90 {
  background-color: rgb(219 234 254 / 0.9);
}
.bg-blue-100\\/95 {
  background-color: rgb(219 234 254 / 0.95);
}
.bg-blue-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(191 219 254 / var(--tw-bg-opacity));
}
.bg-blue-200\\/0 {
  background-color: rgb(191 219 254 / 0);
}
.bg-blue-200\\/10 {
  background-color: rgb(191 219 254 / 0.1);
}
.bg-blue-200\\/100 {
  background-color: rgb(191 219 254 / 1);
}
.bg-blue-200\\/15 {
  background-color: rgb(191 219 254 / 0.15);
}
.bg-blue-200\\/20 {
  background-color: rgb(191 219 254 / 0.2);
}
.bg-blue-200\\/25 {
  background-color: rgb(191 219 254 / 0.25);
}
.bg-blue-200\\/30 {
  background-color: rgb(191 219 254 / 0.3);
}
.bg-blue-200\\/35 {
  background-color: rgb(191 219 254 / 0.35);
}
.bg-blue-200\\/40 {
  background-color: rgb(191 219 254 / 0.4);
}
.bg-blue-200\\/45 {
  background-color: rgb(191 219 254 / 0.45);
}
.bg-blue-200\\/5 {
  background-color: rgb(191 219 254 / 0.05);
}
.bg-blue-200\\/50 {
  background-color: rgb(191 219 254 / 0.5);
}
.bg-blue-200\\/55 {
  background-color: rgb(191 219 254 / 0.55);
}
.bg-blue-200\\/60 {
  background-color: rgb(191 219 254 / 0.6);
}
.bg-blue-200\\/65 {
  background-color: rgb(191 219 254 / 0.65);
}
.bg-blue-200\\/70 {
  background-color: rgb(191 219 254 / 0.7);
}
.bg-blue-200\\/75 {
  background-color: rgb(191 219 254 / 0.75);
}
.bg-blue-200\\/80 {
  background-color: rgb(191 219 254 / 0.8);
}
.bg-blue-200\\/85 {
  background-color: rgb(191 219 254 / 0.85);
}
.bg-blue-200\\/90 {
  background-color: rgb(191 219 254 / 0.9);
}
.bg-blue-200\\/95 {
  background-color: rgb(191 219 254 / 0.95);
}
.bg-blue-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(147 197 253 / var(--tw-bg-opacity));
}
.bg-blue-300\\/0 {
  background-color: rgb(147 197 253 / 0);
}
.bg-blue-300\\/10 {
  background-color: rgb(147 197 253 / 0.1);
}
.bg-blue-300\\/100 {
  background-color: rgb(147 197 253 / 1);
}
.bg-blue-300\\/15 {
  background-color: rgb(147 197 253 / 0.15);
}
.bg-blue-300\\/20 {
  background-color: rgb(147 197 253 / 0.2);
}
.bg-blue-300\\/25 {
  background-color: rgb(147 197 253 / 0.25);
}
.bg-blue-300\\/30 {
  background-color: rgb(147 197 253 / 0.3);
}
.bg-blue-300\\/35 {
  background-color: rgb(147 197 253 / 0.35);
}
.bg-blue-300\\/40 {
  background-color: rgb(147 197 253 / 0.4);
}
.bg-blue-300\\/45 {
  background-color: rgb(147 197 253 / 0.45);
}
.bg-blue-300\\/5 {
  background-color: rgb(147 197 253 / 0.05);
}
.bg-blue-300\\/50 {
  background-color: rgb(147 197 253 / 0.5);
}
.bg-blue-300\\/55 {
  background-color: rgb(147 197 253 / 0.55);
}
.bg-blue-300\\/60 {
  background-color: rgb(147 197 253 / 0.6);
}
.bg-blue-300\\/65 {
  background-color: rgb(147 197 253 / 0.65);
}
.bg-blue-300\\/70 {
  background-color: rgb(147 197 253 / 0.7);
}
.bg-blue-300\\/75 {
  background-color: rgb(147 197 253 / 0.75);
}
.bg-blue-300\\/80 {
  background-color: rgb(147 197 253 / 0.8);
}
.bg-blue-300\\/85 {
  background-color: rgb(147 197 253 / 0.85);
}
.bg-blue-300\\/90 {
  background-color: rgb(147 197 253 / 0.9);
}
.bg-blue-300\\/95 {
  background-color: rgb(147 197 253 / 0.95);
}
.bg-blue-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(96 165 250 / var(--tw-bg-opacity));
}
.bg-blue-400\\/0 {
  background-color: rgb(96 165 250 / 0);
}
.bg-blue-400\\/10 {
  background-color: rgb(96 165 250 / 0.1);
}
.bg-blue-400\\/100 {
  background-color: rgb(96 165 250 / 1);
}
.bg-blue-400\\/15 {
  background-color: rgb(96 165 250 / 0.15);
}
.bg-blue-400\\/20 {
  background-color: rgb(96 165 250 / 0.2);
}
.bg-blue-400\\/25 {
  background-color: rgb(96 165 250 / 0.25);
}
.bg-blue-400\\/30 {
  background-color: rgb(96 165 250 / 0.3);
}
.bg-blue-400\\/35 {
  background-color: rgb(96 165 250 / 0.35);
}
.bg-blue-400\\/40 {
  background-color: rgb(96 165 250 / 0.4);
}
.bg-blue-400\\/45 {
  background-color: rgb(96 165 250 / 0.45);
}
.bg-blue-400\\/5 {
  background-color: rgb(96 165 250 / 0.05);
}
.bg-blue-400\\/50 {
  background-color: rgb(96 165 250 / 0.5);
}
.bg-blue-400\\/55 {
  background-color: rgb(96 165 250 / 0.55);
}
.bg-blue-400\\/60 {
  background-color: rgb(96 165 250 / 0.6);
}
.bg-blue-400\\/65 {
  background-color: rgb(96 165 250 / 0.65);
}
.bg-blue-400\\/70 {
  background-color: rgb(96 165 250 / 0.7);
}
.bg-blue-400\\/75 {
  background-color: rgb(96 165 250 / 0.75);
}
.bg-blue-400\\/80 {
  background-color: rgb(96 165 250 / 0.8);
}
.bg-blue-400\\/85 {
  background-color: rgb(96 165 250 / 0.85);
}
.bg-blue-400\\/90 {
  background-color: rgb(96 165 250 / 0.9);
}
.bg-blue-400\\/95 {
  background-color: rgb(96 165 250 / 0.95);
}
.bg-blue-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 246 255 / var(--tw-bg-opacity));
}
.bg-blue-50\\/0 {
  background-color: rgb(239 246 255 / 0);
}
.bg-blue-50\\/10 {
  background-color: rgb(239 246 255 / 0.1);
}
.bg-blue-50\\/100 {
  background-color: rgb(239 246 255 / 1);
}
.bg-blue-50\\/15 {
  background-color: rgb(239 246 255 / 0.15);
}
.bg-blue-50\\/20 {
  background-color: rgb(239 246 255 / 0.2);
}
.bg-blue-50\\/25 {
  background-color: rgb(239 246 255 / 0.25);
}
.bg-blue-50\\/30 {
  background-color: rgb(239 246 255 / 0.3);
}
.bg-blue-50\\/35 {
  background-color: rgb(239 246 255 / 0.35);
}
.bg-blue-50\\/40 {
  background-color: rgb(239 246 255 / 0.4);
}
.bg-blue-50\\/45 {
  background-color: rgb(239 246 255 / 0.45);
}
.bg-blue-50\\/5 {
  background-color: rgb(239 246 255 / 0.05);
}
.bg-blue-50\\/50 {
  background-color: rgb(239 246 255 / 0.5);
}
.bg-blue-50\\/55 {
  background-color: rgb(239 246 255 / 0.55);
}
.bg-blue-50\\/60 {
  background-color: rgb(239 246 255 / 0.6);
}
.bg-blue-50\\/65 {
  background-color: rgb(239 246 255 / 0.65);
}
.bg-blue-50\\/70 {
  background-color: rgb(239 246 255 / 0.7);
}
.bg-blue-50\\/75 {
  background-color: rgb(239 246 255 / 0.75);
}
.bg-blue-50\\/80 {
  background-color: rgb(239 246 255 / 0.8);
}
.bg-blue-50\\/85 {
  background-color: rgb(239 246 255 / 0.85);
}
.bg-blue-50\\/90 {
  background-color: rgb(239 246 255 / 0.9);
}
.bg-blue-50\\/95 {
  background-color: rgb(239 246 255 / 0.95);
}
.bg-blue-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(59 130 246 / var(--tw-bg-opacity));
}
.bg-blue-500\\/0 {
  background-color: rgb(59 130 246 / 0);
}
.bg-blue-500\\/10 {
  background-color: rgb(59 130 246 / 0.1);
}
.bg-blue-500\\/100 {
  background-color: rgb(59 130 246 / 1);
}
.bg-blue-500\\/15 {
  background-color: rgb(59 130 246 / 0.15);
}
.bg-blue-500\\/20 {
  background-color: rgb(59 130 246 / 0.2);
}
.bg-blue-500\\/25 {
  background-color: rgb(59 130 246 / 0.25);
}
.bg-blue-500\\/30 {
  background-color: rgb(59 130 246 / 0.3);
}
.bg-blue-500\\/35 {
  background-color: rgb(59 130 246 / 0.35);
}
.bg-blue-500\\/40 {
  background-color: rgb(59 130 246 / 0.4);
}
.bg-blue-500\\/45 {
  background-color: rgb(59 130 246 / 0.45);
}
.bg-blue-500\\/5 {
  background-color: rgb(59 130 246 / 0.05);
}
.bg-blue-500\\/50 {
  background-color: rgb(59 130 246 / 0.5);
}
.bg-blue-500\\/55 {
  background-color: rgb(59 130 246 / 0.55);
}
.bg-blue-500\\/60 {
  background-color: rgb(59 130 246 / 0.6);
}
.bg-blue-500\\/65 {
  background-color: rgb(59 130 246 / 0.65);
}
.bg-blue-500\\/70 {
  background-color: rgb(59 130 246 / 0.7);
}
.bg-blue-500\\/75 {
  background-color: rgb(59 130 246 / 0.75);
}
.bg-blue-500\\/80 {
  background-color: rgb(59 130 246 / 0.8);
}
.bg-blue-500\\/85 {
  background-color: rgb(59 130 246 / 0.85);
}
.bg-blue-500\\/90 {
  background-color: rgb(59 130 246 / 0.9);
}
.bg-blue-500\\/95 {
  background-color: rgb(59 130 246 / 0.95);
}
.bg-blue-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(37 99 235 / var(--tw-bg-opacity));
}
.bg-blue-600\\/0 {
  background-color: rgb(37 99 235 / 0);
}
.bg-blue-600\\/10 {
  background-color: rgb(37 99 235 / 0.1);
}
.bg-blue-600\\/100 {
  background-color: rgb(37 99 235 / 1);
}
.bg-blue-600\\/15 {
  background-color: rgb(37 99 235 / 0.15);
}
.bg-blue-600\\/20 {
  background-color: rgb(37 99 235 / 0.2);
}
.bg-blue-600\\/25 {
  background-color: rgb(37 99 235 / 0.25);
}
.bg-blue-600\\/30 {
  background-color: rgb(37 99 235 / 0.3);
}
.bg-blue-600\\/35 {
  background-color: rgb(37 99 235 / 0.35);
}
.bg-blue-600\\/40 {
  background-color: rgb(37 99 235 / 0.4);
}
.bg-blue-600\\/45 {
  background-color: rgb(37 99 235 / 0.45);
}
.bg-blue-600\\/5 {
  background-color: rgb(37 99 235 / 0.05);
}
.bg-blue-600\\/50 {
  background-color: rgb(37 99 235 / 0.5);
}
.bg-blue-600\\/55 {
  background-color: rgb(37 99 235 / 0.55);
}
.bg-blue-600\\/60 {
  background-color: rgb(37 99 235 / 0.6);
}
.bg-blue-600\\/65 {
  background-color: rgb(37 99 235 / 0.65);
}
.bg-blue-600\\/70 {
  background-color: rgb(37 99 235 / 0.7);
}
.bg-blue-600\\/75 {
  background-color: rgb(37 99 235 / 0.75);
}
.bg-blue-600\\/80 {
  background-color: rgb(37 99 235 / 0.8);
}
.bg-blue-600\\/85 {
  background-color: rgb(37 99 235 / 0.85);
}
.bg-blue-600\\/90 {
  background-color: rgb(37 99 235 / 0.9);
}
.bg-blue-600\\/95 {
  background-color: rgb(37 99 235 / 0.95);
}
.bg-blue-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(29 78 216 / var(--tw-bg-opacity));
}
.bg-blue-700\\/0 {
  background-color: rgb(29 78 216 / 0);
}
.bg-blue-700\\/10 {
  background-color: rgb(29 78 216 / 0.1);
}
.bg-blue-700\\/100 {
  background-color: rgb(29 78 216 / 1);
}
.bg-blue-700\\/15 {
  background-color: rgb(29 78 216 / 0.15);
}
.bg-blue-700\\/20 {
  background-color: rgb(29 78 216 / 0.2);
}
.bg-blue-700\\/25 {
  background-color: rgb(29 78 216 / 0.25);
}
.bg-blue-700\\/30 {
  background-color: rgb(29 78 216 / 0.3);
}
.bg-blue-700\\/35 {
  background-color: rgb(29 78 216 / 0.35);
}
.bg-blue-700\\/40 {
  background-color: rgb(29 78 216 / 0.4);
}
.bg-blue-700\\/45 {
  background-color: rgb(29 78 216 / 0.45);
}
.bg-blue-700\\/5 {
  background-color: rgb(29 78 216 / 0.05);
}
.bg-blue-700\\/50 {
  background-color: rgb(29 78 216 / 0.5);
}
.bg-blue-700\\/55 {
  background-color: rgb(29 78 216 / 0.55);
}
.bg-blue-700\\/60 {
  background-color: rgb(29 78 216 / 0.6);
}
.bg-blue-700\\/65 {
  background-color: rgb(29 78 216 / 0.65);
}
.bg-blue-700\\/70 {
  background-color: rgb(29 78 216 / 0.7);
}
.bg-blue-700\\/75 {
  background-color: rgb(29 78 216 / 0.75);
}
.bg-blue-700\\/80 {
  background-color: rgb(29 78 216 / 0.8);
}
.bg-blue-700\\/85 {
  background-color: rgb(29 78 216 / 0.85);
}
.bg-blue-700\\/90 {
  background-color: rgb(29 78 216 / 0.9);
}
.bg-blue-700\\/95 {
  background-color: rgb(29 78 216 / 0.95);
}
.bg-blue-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(30 64 175 / var(--tw-bg-opacity));
}
.bg-blue-800\\/0 {
  background-color: rgb(30 64 175 / 0);
}
.bg-blue-800\\/10 {
  background-color: rgb(30 64 175 / 0.1);
}
.bg-blue-800\\/100 {
  background-color: rgb(30 64 175 / 1);
}
.bg-blue-800\\/15 {
  background-color: rgb(30 64 175 / 0.15);
}
.bg-blue-800\\/20 {
  background-color: rgb(30 64 175 / 0.2);
}
.bg-blue-800\\/25 {
  background-color: rgb(30 64 175 / 0.25);
}
.bg-blue-800\\/30 {
  background-color: rgb(30 64 175 / 0.3);
}
.bg-blue-800\\/35 {
  background-color: rgb(30 64 175 / 0.35);
}
.bg-blue-800\\/40 {
  background-color: rgb(30 64 175 / 0.4);
}
.bg-blue-800\\/45 {
  background-color: rgb(30 64 175 / 0.45);
}
.bg-blue-800\\/5 {
  background-color: rgb(30 64 175 / 0.05);
}
.bg-blue-800\\/50 {
  background-color: rgb(30 64 175 / 0.5);
}
.bg-blue-800\\/55 {
  background-color: rgb(30 64 175 / 0.55);
}
.bg-blue-800\\/60 {
  background-color: rgb(30 64 175 / 0.6);
}
.bg-blue-800\\/65 {
  background-color: rgb(30 64 175 / 0.65);
}
.bg-blue-800\\/70 {
  background-color: rgb(30 64 175 / 0.7);
}
.bg-blue-800\\/75 {
  background-color: rgb(30 64 175 / 0.75);
}
.bg-blue-800\\/80 {
  background-color: rgb(30 64 175 / 0.8);
}
.bg-blue-800\\/85 {
  background-color: rgb(30 64 175 / 0.85);
}
.bg-blue-800\\/90 {
  background-color: rgb(30 64 175 / 0.9);
}
.bg-blue-800\\/95 {
  background-color: rgb(30 64 175 / 0.95);
}
.bg-blue-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(30 58 138 / var(--tw-bg-opacity));
}
.bg-blue-900\\/0 {
  background-color: rgb(30 58 138 / 0);
}
.bg-blue-900\\/10 {
  background-color: rgb(30 58 138 / 0.1);
}
.bg-blue-900\\/100 {
  background-color: rgb(30 58 138 / 1);
}
.bg-blue-900\\/15 {
  background-color: rgb(30 58 138 / 0.15);
}
.bg-blue-900\\/20 {
  background-color: rgb(30 58 138 / 0.2);
}
.bg-blue-900\\/25 {
  background-color: rgb(30 58 138 / 0.25);
}
.bg-blue-900\\/30 {
  background-color: rgb(30 58 138 / 0.3);
}
.bg-blue-900\\/35 {
  background-color: rgb(30 58 138 / 0.35);
}
.bg-blue-900\\/40 {
  background-color: rgb(30 58 138 / 0.4);
}
.bg-blue-900\\/45 {
  background-color: rgb(30 58 138 / 0.45);
}
.bg-blue-900\\/5 {
  background-color: rgb(30 58 138 / 0.05);
}
.bg-blue-900\\/50 {
  background-color: rgb(30 58 138 / 0.5);
}
.bg-blue-900\\/55 {
  background-color: rgb(30 58 138 / 0.55);
}
.bg-blue-900\\/60 {
  background-color: rgb(30 58 138 / 0.6);
}
.bg-blue-900\\/65 {
  background-color: rgb(30 58 138 / 0.65);
}
.bg-blue-900\\/70 {
  background-color: rgb(30 58 138 / 0.7);
}
.bg-blue-900\\/75 {
  background-color: rgb(30 58 138 / 0.75);
}
.bg-blue-900\\/80 {
  background-color: rgb(30 58 138 / 0.8);
}
.bg-blue-900\\/85 {
  background-color: rgb(30 58 138 / 0.85);
}
.bg-blue-900\\/90 {
  background-color: rgb(30 58 138 / 0.9);
}
.bg-blue-900\\/95 {
  background-color: rgb(30 58 138 / 0.95);
}
.bg-blue-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(23 37 84 / var(--tw-bg-opacity));
}
.bg-blue-950\\/0 {
  background-color: rgb(23 37 84 / 0);
}
.bg-blue-950\\/10 {
  background-color: rgb(23 37 84 / 0.1);
}
.bg-blue-950\\/100 {
  background-color: rgb(23 37 84 / 1);
}
.bg-blue-950\\/15 {
  background-color: rgb(23 37 84 / 0.15);
}
.bg-blue-950\\/20 {
  background-color: rgb(23 37 84 / 0.2);
}
.bg-blue-950\\/25 {
  background-color: rgb(23 37 84 / 0.25);
}
.bg-blue-950\\/30 {
  background-color: rgb(23 37 84 / 0.3);
}
.bg-blue-950\\/35 {
  background-color: rgb(23 37 84 / 0.35);
}
.bg-blue-950\\/40 {
  background-color: rgb(23 37 84 / 0.4);
}
.bg-blue-950\\/45 {
  background-color: rgb(23 37 84 / 0.45);
}
.bg-blue-950\\/5 {
  background-color: rgb(23 37 84 / 0.05);
}
.bg-blue-950\\/50 {
  background-color: rgb(23 37 84 / 0.5);
}
.bg-blue-950\\/55 {
  background-color: rgb(23 37 84 / 0.55);
}
.bg-blue-950\\/60 {
  background-color: rgb(23 37 84 / 0.6);
}
.bg-blue-950\\/65 {
  background-color: rgb(23 37 84 / 0.65);
}
.bg-blue-950\\/70 {
  background-color: rgb(23 37 84 / 0.7);
}
.bg-blue-950\\/75 {
  background-color: rgb(23 37 84 / 0.75);
}
.bg-blue-950\\/80 {
  background-color: rgb(23 37 84 / 0.8);
}
.bg-blue-950\\/85 {
  background-color: rgb(23 37 84 / 0.85);
}
.bg-blue-950\\/90 {
  background-color: rgb(23 37 84 / 0.9);
}
.bg-blue-950\\/95 {
  background-color: rgb(23 37 84 / 0.95);
}
.bg-current {
  background-color: currentColor;
}
.bg-cyan-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(207 250 254 / var(--tw-bg-opacity));
}
.bg-cyan-100\\/0 {
  background-color: rgb(207 250 254 / 0);
}
.bg-cyan-100\\/10 {
  background-color: rgb(207 250 254 / 0.1);
}
.bg-cyan-100\\/100 {
  background-color: rgb(207 250 254 / 1);
}
.bg-cyan-100\\/15 {
  background-color: rgb(207 250 254 / 0.15);
}
.bg-cyan-100\\/20 {
  background-color: rgb(207 250 254 / 0.2);
}
.bg-cyan-100\\/25 {
  background-color: rgb(207 250 254 / 0.25);
}
.bg-cyan-100\\/30 {
  background-color: rgb(207 250 254 / 0.3);
}
.bg-cyan-100\\/35 {
  background-color: rgb(207 250 254 / 0.35);
}
.bg-cyan-100\\/40 {
  background-color: rgb(207 250 254 / 0.4);
}
.bg-cyan-100\\/45 {
  background-color: rgb(207 250 254 / 0.45);
}
.bg-cyan-100\\/5 {
  background-color: rgb(207 250 254 / 0.05);
}
.bg-cyan-100\\/50 {
  background-color: rgb(207 250 254 / 0.5);
}
.bg-cyan-100\\/55 {
  background-color: rgb(207 250 254 / 0.55);
}
.bg-cyan-100\\/60 {
  background-color: rgb(207 250 254 / 0.6);
}
.bg-cyan-100\\/65 {
  background-color: rgb(207 250 254 / 0.65);
}
.bg-cyan-100\\/70 {
  background-color: rgb(207 250 254 / 0.7);
}
.bg-cyan-100\\/75 {
  background-color: rgb(207 250 254 / 0.75);
}
.bg-cyan-100\\/80 {
  background-color: rgb(207 250 254 / 0.8);
}
.bg-cyan-100\\/85 {
  background-color: rgb(207 250 254 / 0.85);
}
.bg-cyan-100\\/90 {
  background-color: rgb(207 250 254 / 0.9);
}
.bg-cyan-100\\/95 {
  background-color: rgb(207 250 254 / 0.95);
}
.bg-cyan-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(165 243 252 / var(--tw-bg-opacity));
}
.bg-cyan-200\\/0 {
  background-color: rgb(165 243 252 / 0);
}
.bg-cyan-200\\/10 {
  background-color: rgb(165 243 252 / 0.1);
}
.bg-cyan-200\\/100 {
  background-color: rgb(165 243 252 / 1);
}
.bg-cyan-200\\/15 {
  background-color: rgb(165 243 252 / 0.15);
}
.bg-cyan-200\\/20 {
  background-color: rgb(165 243 252 / 0.2);
}
.bg-cyan-200\\/25 {
  background-color: rgb(165 243 252 / 0.25);
}
.bg-cyan-200\\/30 {
  background-color: rgb(165 243 252 / 0.3);
}
.bg-cyan-200\\/35 {
  background-color: rgb(165 243 252 / 0.35);
}
.bg-cyan-200\\/40 {
  background-color: rgb(165 243 252 / 0.4);
}
.bg-cyan-200\\/45 {
  background-color: rgb(165 243 252 / 0.45);
}
.bg-cyan-200\\/5 {
  background-color: rgb(165 243 252 / 0.05);
}
.bg-cyan-200\\/50 {
  background-color: rgb(165 243 252 / 0.5);
}
.bg-cyan-200\\/55 {
  background-color: rgb(165 243 252 / 0.55);
}
.bg-cyan-200\\/60 {
  background-color: rgb(165 243 252 / 0.6);
}
.bg-cyan-200\\/65 {
  background-color: rgb(165 243 252 / 0.65);
}
.bg-cyan-200\\/70 {
  background-color: rgb(165 243 252 / 0.7);
}
.bg-cyan-200\\/75 {
  background-color: rgb(165 243 252 / 0.75);
}
.bg-cyan-200\\/80 {
  background-color: rgb(165 243 252 / 0.8);
}
.bg-cyan-200\\/85 {
  background-color: rgb(165 243 252 / 0.85);
}
.bg-cyan-200\\/90 {
  background-color: rgb(165 243 252 / 0.9);
}
.bg-cyan-200\\/95 {
  background-color: rgb(165 243 252 / 0.95);
}
.bg-cyan-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(103 232 249 / var(--tw-bg-opacity));
}
.bg-cyan-300\\/0 {
  background-color: rgb(103 232 249 / 0);
}
.bg-cyan-300\\/10 {
  background-color: rgb(103 232 249 / 0.1);
}
.bg-cyan-300\\/100 {
  background-color: rgb(103 232 249 / 1);
}
.bg-cyan-300\\/15 {
  background-color: rgb(103 232 249 / 0.15);
}
.bg-cyan-300\\/20 {
  background-color: rgb(103 232 249 / 0.2);
}
.bg-cyan-300\\/25 {
  background-color: rgb(103 232 249 / 0.25);
}
.bg-cyan-300\\/30 {
  background-color: rgb(103 232 249 / 0.3);
}
.bg-cyan-300\\/35 {
  background-color: rgb(103 232 249 / 0.35);
}
.bg-cyan-300\\/40 {
  background-color: rgb(103 232 249 / 0.4);
}
.bg-cyan-300\\/45 {
  background-color: rgb(103 232 249 / 0.45);
}
.bg-cyan-300\\/5 {
  background-color: rgb(103 232 249 / 0.05);
}
.bg-cyan-300\\/50 {
  background-color: rgb(103 232 249 / 0.5);
}
.bg-cyan-300\\/55 {
  background-color: rgb(103 232 249 / 0.55);
}
.bg-cyan-300\\/60 {
  background-color: rgb(103 232 249 / 0.6);
}
.bg-cyan-300\\/65 {
  background-color: rgb(103 232 249 / 0.65);
}
.bg-cyan-300\\/70 {
  background-color: rgb(103 232 249 / 0.7);
}
.bg-cyan-300\\/75 {
  background-color: rgb(103 232 249 / 0.75);
}
.bg-cyan-300\\/80 {
  background-color: rgb(103 232 249 / 0.8);
}
.bg-cyan-300\\/85 {
  background-color: rgb(103 232 249 / 0.85);
}
.bg-cyan-300\\/90 {
  background-color: rgb(103 232 249 / 0.9);
}
.bg-cyan-300\\/95 {
  background-color: rgb(103 232 249 / 0.95);
}
.bg-cyan-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(34 211 238 / var(--tw-bg-opacity));
}
.bg-cyan-400\\/0 {
  background-color: rgb(34 211 238 / 0);
}
.bg-cyan-400\\/10 {
  background-color: rgb(34 211 238 / 0.1);
}
.bg-cyan-400\\/100 {
  background-color: rgb(34 211 238 / 1);
}
.bg-cyan-400\\/15 {
  background-color: rgb(34 211 238 / 0.15);
}
.bg-cyan-400\\/20 {
  background-color: rgb(34 211 238 / 0.2);
}
.bg-cyan-400\\/25 {
  background-color: rgb(34 211 238 / 0.25);
}
.bg-cyan-400\\/30 {
  background-color: rgb(34 211 238 / 0.3);
}
.bg-cyan-400\\/35 {
  background-color: rgb(34 211 238 / 0.35);
}
.bg-cyan-400\\/40 {
  background-color: rgb(34 211 238 / 0.4);
}
.bg-cyan-400\\/45 {
  background-color: rgb(34 211 238 / 0.45);
}
.bg-cyan-400\\/5 {
  background-color: rgb(34 211 238 / 0.05);
}
.bg-cyan-400\\/50 {
  background-color: rgb(34 211 238 / 0.5);
}
.bg-cyan-400\\/55 {
  background-color: rgb(34 211 238 / 0.55);
}
.bg-cyan-400\\/60 {
  background-color: rgb(34 211 238 / 0.6);
}
.bg-cyan-400\\/65 {
  background-color: rgb(34 211 238 / 0.65);
}
.bg-cyan-400\\/70 {
  background-color: rgb(34 211 238 / 0.7);
}
.bg-cyan-400\\/75 {
  background-color: rgb(34 211 238 / 0.75);
}
.bg-cyan-400\\/80 {
  background-color: rgb(34 211 238 / 0.8);
}
.bg-cyan-400\\/85 {
  background-color: rgb(34 211 238 / 0.85);
}
.bg-cyan-400\\/90 {
  background-color: rgb(34 211 238 / 0.9);
}
.bg-cyan-400\\/95 {
  background-color: rgb(34 211 238 / 0.95);
}
.bg-cyan-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(236 254 255 / var(--tw-bg-opacity));
}
.bg-cyan-50\\/0 {
  background-color: rgb(236 254 255 / 0);
}
.bg-cyan-50\\/10 {
  background-color: rgb(236 254 255 / 0.1);
}
.bg-cyan-50\\/100 {
  background-color: rgb(236 254 255 / 1);
}
.bg-cyan-50\\/15 {
  background-color: rgb(236 254 255 / 0.15);
}
.bg-cyan-50\\/20 {
  background-color: rgb(236 254 255 / 0.2);
}
.bg-cyan-50\\/25 {
  background-color: rgb(236 254 255 / 0.25);
}
.bg-cyan-50\\/30 {
  background-color: rgb(236 254 255 / 0.3);
}
.bg-cyan-50\\/35 {
  background-color: rgb(236 254 255 / 0.35);
}
.bg-cyan-50\\/40 {
  background-color: rgb(236 254 255 / 0.4);
}
.bg-cyan-50\\/45 {
  background-color: rgb(236 254 255 / 0.45);
}
.bg-cyan-50\\/5 {
  background-color: rgb(236 254 255 / 0.05);
}
.bg-cyan-50\\/50 {
  background-color: rgb(236 254 255 / 0.5);
}
.bg-cyan-50\\/55 {
  background-color: rgb(236 254 255 / 0.55);
}
.bg-cyan-50\\/60 {
  background-color: rgb(236 254 255 / 0.6);
}
.bg-cyan-50\\/65 {
  background-color: rgb(236 254 255 / 0.65);
}
.bg-cyan-50\\/70 {
  background-color: rgb(236 254 255 / 0.7);
}
.bg-cyan-50\\/75 {
  background-color: rgb(236 254 255 / 0.75);
}
.bg-cyan-50\\/80 {
  background-color: rgb(236 254 255 / 0.8);
}
.bg-cyan-50\\/85 {
  background-color: rgb(236 254 255 / 0.85);
}
.bg-cyan-50\\/90 {
  background-color: rgb(236 254 255 / 0.9);
}
.bg-cyan-50\\/95 {
  background-color: rgb(236 254 255 / 0.95);
}
.bg-cyan-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(6 182 212 / var(--tw-bg-opacity));
}
.bg-cyan-500\\/0 {
  background-color: rgb(6 182 212 / 0);
}
.bg-cyan-500\\/10 {
  background-color: rgb(6 182 212 / 0.1);
}
.bg-cyan-500\\/100 {
  background-color: rgb(6 182 212 / 1);
}
.bg-cyan-500\\/15 {
  background-color: rgb(6 182 212 / 0.15);
}
.bg-cyan-500\\/20 {
  background-color: rgb(6 182 212 / 0.2);
}
.bg-cyan-500\\/25 {
  background-color: rgb(6 182 212 / 0.25);
}
.bg-cyan-500\\/30 {
  background-color: rgb(6 182 212 / 0.3);
}
.bg-cyan-500\\/35 {
  background-color: rgb(6 182 212 / 0.35);
}
.bg-cyan-500\\/40 {
  background-color: rgb(6 182 212 / 0.4);
}
.bg-cyan-500\\/45 {
  background-color: rgb(6 182 212 / 0.45);
}
.bg-cyan-500\\/5 {
  background-color: rgb(6 182 212 / 0.05);
}
.bg-cyan-500\\/50 {
  background-color: rgb(6 182 212 / 0.5);
}
.bg-cyan-500\\/55 {
  background-color: rgb(6 182 212 / 0.55);
}
.bg-cyan-500\\/60 {
  background-color: rgb(6 182 212 / 0.6);
}
.bg-cyan-500\\/65 {
  background-color: rgb(6 182 212 / 0.65);
}
.bg-cyan-500\\/70 {
  background-color: rgb(6 182 212 / 0.7);
}
.bg-cyan-500\\/75 {
  background-color: rgb(6 182 212 / 0.75);
}
.bg-cyan-500\\/80 {
  background-color: rgb(6 182 212 / 0.8);
}
.bg-cyan-500\\/85 {
  background-color: rgb(6 182 212 / 0.85);
}
.bg-cyan-500\\/90 {
  background-color: rgb(6 182 212 / 0.9);
}
.bg-cyan-500\\/95 {
  background-color: rgb(6 182 212 / 0.95);
}
.bg-cyan-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(8 145 178 / var(--tw-bg-opacity));
}
.bg-cyan-600\\/0 {
  background-color: rgb(8 145 178 / 0);
}
.bg-cyan-600\\/10 {
  background-color: rgb(8 145 178 / 0.1);
}
.bg-cyan-600\\/100 {
  background-color: rgb(8 145 178 / 1);
}
.bg-cyan-600\\/15 {
  background-color: rgb(8 145 178 / 0.15);
}
.bg-cyan-600\\/20 {
  background-color: rgb(8 145 178 / 0.2);
}
.bg-cyan-600\\/25 {
  background-color: rgb(8 145 178 / 0.25);
}
.bg-cyan-600\\/30 {
  background-color: rgb(8 145 178 / 0.3);
}
.bg-cyan-600\\/35 {
  background-color: rgb(8 145 178 / 0.35);
}
.bg-cyan-600\\/40 {
  background-color: rgb(8 145 178 / 0.4);
}
.bg-cyan-600\\/45 {
  background-color: rgb(8 145 178 / 0.45);
}
.bg-cyan-600\\/5 {
  background-color: rgb(8 145 178 / 0.05);
}
.bg-cyan-600\\/50 {
  background-color: rgb(8 145 178 / 0.5);
}
.bg-cyan-600\\/55 {
  background-color: rgb(8 145 178 / 0.55);
}
.bg-cyan-600\\/60 {
  background-color: rgb(8 145 178 / 0.6);
}
.bg-cyan-600\\/65 {
  background-color: rgb(8 145 178 / 0.65);
}
.bg-cyan-600\\/70 {
  background-color: rgb(8 145 178 / 0.7);
}
.bg-cyan-600\\/75 {
  background-color: rgb(8 145 178 / 0.75);
}
.bg-cyan-600\\/80 {
  background-color: rgb(8 145 178 / 0.8);
}
.bg-cyan-600\\/85 {
  background-color: rgb(8 145 178 / 0.85);
}
.bg-cyan-600\\/90 {
  background-color: rgb(8 145 178 / 0.9);
}
.bg-cyan-600\\/95 {
  background-color: rgb(8 145 178 / 0.95);
}
.bg-cyan-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(14 116 144 / var(--tw-bg-opacity));
}
.bg-cyan-700\\/0 {
  background-color: rgb(14 116 144 / 0);
}
.bg-cyan-700\\/10 {
  background-color: rgb(14 116 144 / 0.1);
}
.bg-cyan-700\\/100 {
  background-color: rgb(14 116 144 / 1);
}
.bg-cyan-700\\/15 {
  background-color: rgb(14 116 144 / 0.15);
}
.bg-cyan-700\\/20 {
  background-color: rgb(14 116 144 / 0.2);
}
.bg-cyan-700\\/25 {
  background-color: rgb(14 116 144 / 0.25);
}
.bg-cyan-700\\/30 {
  background-color: rgb(14 116 144 / 0.3);
}
.bg-cyan-700\\/35 {
  background-color: rgb(14 116 144 / 0.35);
}
.bg-cyan-700\\/40 {
  background-color: rgb(14 116 144 / 0.4);
}
.bg-cyan-700\\/45 {
  background-color: rgb(14 116 144 / 0.45);
}
.bg-cyan-700\\/5 {
  background-color: rgb(14 116 144 / 0.05);
}
.bg-cyan-700\\/50 {
  background-color: rgb(14 116 144 / 0.5);
}
.bg-cyan-700\\/55 {
  background-color: rgb(14 116 144 / 0.55);
}
.bg-cyan-700\\/60 {
  background-color: rgb(14 116 144 / 0.6);
}
.bg-cyan-700\\/65 {
  background-color: rgb(14 116 144 / 0.65);
}
.bg-cyan-700\\/70 {
  background-color: rgb(14 116 144 / 0.7);
}
.bg-cyan-700\\/75 {
  background-color: rgb(14 116 144 / 0.75);
}
.bg-cyan-700\\/80 {
  background-color: rgb(14 116 144 / 0.8);
}
.bg-cyan-700\\/85 {
  background-color: rgb(14 116 144 / 0.85);
}
.bg-cyan-700\\/90 {
  background-color: rgb(14 116 144 / 0.9);
}
.bg-cyan-700\\/95 {
  background-color: rgb(14 116 144 / 0.95);
}
.bg-cyan-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(21 94 117 / var(--tw-bg-opacity));
}
.bg-cyan-800\\/0 {
  background-color: rgb(21 94 117 / 0);
}
.bg-cyan-800\\/10 {
  background-color: rgb(21 94 117 / 0.1);
}
.bg-cyan-800\\/100 {
  background-color: rgb(21 94 117 / 1);
}
.bg-cyan-800\\/15 {
  background-color: rgb(21 94 117 / 0.15);
}
.bg-cyan-800\\/20 {
  background-color: rgb(21 94 117 / 0.2);
}
.bg-cyan-800\\/25 {
  background-color: rgb(21 94 117 / 0.25);
}
.bg-cyan-800\\/30 {
  background-color: rgb(21 94 117 / 0.3);
}
.bg-cyan-800\\/35 {
  background-color: rgb(21 94 117 / 0.35);
}
.bg-cyan-800\\/40 {
  background-color: rgb(21 94 117 / 0.4);
}
.bg-cyan-800\\/45 {
  background-color: rgb(21 94 117 / 0.45);
}
.bg-cyan-800\\/5 {
  background-color: rgb(21 94 117 / 0.05);
}
.bg-cyan-800\\/50 {
  background-color: rgb(21 94 117 / 0.5);
}
.bg-cyan-800\\/55 {
  background-color: rgb(21 94 117 / 0.55);
}
.bg-cyan-800\\/60 {
  background-color: rgb(21 94 117 / 0.6);
}
.bg-cyan-800\\/65 {
  background-color: rgb(21 94 117 / 0.65);
}
.bg-cyan-800\\/70 {
  background-color: rgb(21 94 117 / 0.7);
}
.bg-cyan-800\\/75 {
  background-color: rgb(21 94 117 / 0.75);
}
.bg-cyan-800\\/80 {
  background-color: rgb(21 94 117 / 0.8);
}
.bg-cyan-800\\/85 {
  background-color: rgb(21 94 117 / 0.85);
}
.bg-cyan-800\\/90 {
  background-color: rgb(21 94 117 / 0.9);
}
.bg-cyan-800\\/95 {
  background-color: rgb(21 94 117 / 0.95);
}
.bg-cyan-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(22 78 99 / var(--tw-bg-opacity));
}
.bg-cyan-900\\/0 {
  background-color: rgb(22 78 99 / 0);
}
.bg-cyan-900\\/10 {
  background-color: rgb(22 78 99 / 0.1);
}
.bg-cyan-900\\/100 {
  background-color: rgb(22 78 99 / 1);
}
.bg-cyan-900\\/15 {
  background-color: rgb(22 78 99 / 0.15);
}
.bg-cyan-900\\/20 {
  background-color: rgb(22 78 99 / 0.2);
}
.bg-cyan-900\\/25 {
  background-color: rgb(22 78 99 / 0.25);
}
.bg-cyan-900\\/30 {
  background-color: rgb(22 78 99 / 0.3);
}
.bg-cyan-900\\/35 {
  background-color: rgb(22 78 99 / 0.35);
}
.bg-cyan-900\\/40 {
  background-color: rgb(22 78 99 / 0.4);
}
.bg-cyan-900\\/45 {
  background-color: rgb(22 78 99 / 0.45);
}
.bg-cyan-900\\/5 {
  background-color: rgb(22 78 99 / 0.05);
}
.bg-cyan-900\\/50 {
  background-color: rgb(22 78 99 / 0.5);
}
.bg-cyan-900\\/55 {
  background-color: rgb(22 78 99 / 0.55);
}
.bg-cyan-900\\/60 {
  background-color: rgb(22 78 99 / 0.6);
}
.bg-cyan-900\\/65 {
  background-color: rgb(22 78 99 / 0.65);
}
.bg-cyan-900\\/70 {
  background-color: rgb(22 78 99 / 0.7);
}
.bg-cyan-900\\/75 {
  background-color: rgb(22 78 99 / 0.75);
}
.bg-cyan-900\\/80 {
  background-color: rgb(22 78 99 / 0.8);
}
.bg-cyan-900\\/85 {
  background-color: rgb(22 78 99 / 0.85);
}
.bg-cyan-900\\/90 {
  background-color: rgb(22 78 99 / 0.9);
}
.bg-cyan-900\\/95 {
  background-color: rgb(22 78 99 / 0.95);
}
.bg-cyan-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(8 51 68 / var(--tw-bg-opacity));
}
.bg-cyan-950\\/0 {
  background-color: rgb(8 51 68 / 0);
}
.bg-cyan-950\\/10 {
  background-color: rgb(8 51 68 / 0.1);
}
.bg-cyan-950\\/100 {
  background-color: rgb(8 51 68 / 1);
}
.bg-cyan-950\\/15 {
  background-color: rgb(8 51 68 / 0.15);
}
.bg-cyan-950\\/20 {
  background-color: rgb(8 51 68 / 0.2);
}
.bg-cyan-950\\/25 {
  background-color: rgb(8 51 68 / 0.25);
}
.bg-cyan-950\\/30 {
  background-color: rgb(8 51 68 / 0.3);
}
.bg-cyan-950\\/35 {
  background-color: rgb(8 51 68 / 0.35);
}
.bg-cyan-950\\/40 {
  background-color: rgb(8 51 68 / 0.4);
}
.bg-cyan-950\\/45 {
  background-color: rgb(8 51 68 / 0.45);
}
.bg-cyan-950\\/5 {
  background-color: rgb(8 51 68 / 0.05);
}
.bg-cyan-950\\/50 {
  background-color: rgb(8 51 68 / 0.5);
}
.bg-cyan-950\\/55 {
  background-color: rgb(8 51 68 / 0.55);
}
.bg-cyan-950\\/60 {
  background-color: rgb(8 51 68 / 0.6);
}
.bg-cyan-950\\/65 {
  background-color: rgb(8 51 68 / 0.65);
}
.bg-cyan-950\\/70 {
  background-color: rgb(8 51 68 / 0.7);
}
.bg-cyan-950\\/75 {
  background-color: rgb(8 51 68 / 0.75);
}
.bg-cyan-950\\/80 {
  background-color: rgb(8 51 68 / 0.8);
}
.bg-cyan-950\\/85 {
  background-color: rgb(8 51 68 / 0.85);
}
.bg-cyan-950\\/90 {
  background-color: rgb(8 51 68 / 0.9);
}
.bg-cyan-950\\/95 {
  background-color: rgb(8 51 68 / 0.95);
}
.bg-emerald-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(209 250 229 / var(--tw-bg-opacity));
}
.bg-emerald-100\\/0 {
  background-color: rgb(209 250 229 / 0);
}
.bg-emerald-100\\/10 {
  background-color: rgb(209 250 229 / 0.1);
}
.bg-emerald-100\\/100 {
  background-color: rgb(209 250 229 / 1);
}
.bg-emerald-100\\/15 {
  background-color: rgb(209 250 229 / 0.15);
}
.bg-emerald-100\\/20 {
  background-color: rgb(209 250 229 / 0.2);
}
.bg-emerald-100\\/25 {
  background-color: rgb(209 250 229 / 0.25);
}
.bg-emerald-100\\/30 {
  background-color: rgb(209 250 229 / 0.3);
}
.bg-emerald-100\\/35 {
  background-color: rgb(209 250 229 / 0.35);
}
.bg-emerald-100\\/40 {
  background-color: rgb(209 250 229 / 0.4);
}
.bg-emerald-100\\/45 {
  background-color: rgb(209 250 229 / 0.45);
}
.bg-emerald-100\\/5 {
  background-color: rgb(209 250 229 / 0.05);
}
.bg-emerald-100\\/50 {
  background-color: rgb(209 250 229 / 0.5);
}
.bg-emerald-100\\/55 {
  background-color: rgb(209 250 229 / 0.55);
}
.bg-emerald-100\\/60 {
  background-color: rgb(209 250 229 / 0.6);
}
.bg-emerald-100\\/65 {
  background-color: rgb(209 250 229 / 0.65);
}
.bg-emerald-100\\/70 {
  background-color: rgb(209 250 229 / 0.7);
}
.bg-emerald-100\\/75 {
  background-color: rgb(209 250 229 / 0.75);
}
.bg-emerald-100\\/80 {
  background-color: rgb(209 250 229 / 0.8);
}
.bg-emerald-100\\/85 {
  background-color: rgb(209 250 229 / 0.85);
}
.bg-emerald-100\\/90 {
  background-color: rgb(209 250 229 / 0.9);
}
.bg-emerald-100\\/95 {
  background-color: rgb(209 250 229 / 0.95);
}
.bg-emerald-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(167 243 208 / var(--tw-bg-opacity));
}
.bg-emerald-200\\/0 {
  background-color: rgb(167 243 208 / 0);
}
.bg-emerald-200\\/10 {
  background-color: rgb(167 243 208 / 0.1);
}
.bg-emerald-200\\/100 {
  background-color: rgb(167 243 208 / 1);
}
.bg-emerald-200\\/15 {
  background-color: rgb(167 243 208 / 0.15);
}
.bg-emerald-200\\/20 {
  background-color: rgb(167 243 208 / 0.2);
}
.bg-emerald-200\\/25 {
  background-color: rgb(167 243 208 / 0.25);
}
.bg-emerald-200\\/30 {
  background-color: rgb(167 243 208 / 0.3);
}
.bg-emerald-200\\/35 {
  background-color: rgb(167 243 208 / 0.35);
}
.bg-emerald-200\\/40 {
  background-color: rgb(167 243 208 / 0.4);
}
.bg-emerald-200\\/45 {
  background-color: rgb(167 243 208 / 0.45);
}
.bg-emerald-200\\/5 {
  background-color: rgb(167 243 208 / 0.05);
}
.bg-emerald-200\\/50 {
  background-color: rgb(167 243 208 / 0.5);
}
.bg-emerald-200\\/55 {
  background-color: rgb(167 243 208 / 0.55);
}
.bg-emerald-200\\/60 {
  background-color: rgb(167 243 208 / 0.6);
}
.bg-emerald-200\\/65 {
  background-color: rgb(167 243 208 / 0.65);
}
.bg-emerald-200\\/70 {
  background-color: rgb(167 243 208 / 0.7);
}
.bg-emerald-200\\/75 {
  background-color: rgb(167 243 208 / 0.75);
}
.bg-emerald-200\\/80 {
  background-color: rgb(167 243 208 / 0.8);
}
.bg-emerald-200\\/85 {
  background-color: rgb(167 243 208 / 0.85);
}
.bg-emerald-200\\/90 {
  background-color: rgb(167 243 208 / 0.9);
}
.bg-emerald-200\\/95 {
  background-color: rgb(167 243 208 / 0.95);
}
.bg-emerald-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(110 231 183 / var(--tw-bg-opacity));
}
.bg-emerald-300\\/0 {
  background-color: rgb(110 231 183 / 0);
}
.bg-emerald-300\\/10 {
  background-color: rgb(110 231 183 / 0.1);
}
.bg-emerald-300\\/100 {
  background-color: rgb(110 231 183 / 1);
}
.bg-emerald-300\\/15 {
  background-color: rgb(110 231 183 / 0.15);
}
.bg-emerald-300\\/20 {
  background-color: rgb(110 231 183 / 0.2);
}
.bg-emerald-300\\/25 {
  background-color: rgb(110 231 183 / 0.25);
}
.bg-emerald-300\\/30 {
  background-color: rgb(110 231 183 / 0.3);
}
.bg-emerald-300\\/35 {
  background-color: rgb(110 231 183 / 0.35);
}
.bg-emerald-300\\/40 {
  background-color: rgb(110 231 183 / 0.4);
}
.bg-emerald-300\\/45 {
  background-color: rgb(110 231 183 / 0.45);
}
.bg-emerald-300\\/5 {
  background-color: rgb(110 231 183 / 0.05);
}
.bg-emerald-300\\/50 {
  background-color: rgb(110 231 183 / 0.5);
}
.bg-emerald-300\\/55 {
  background-color: rgb(110 231 183 / 0.55);
}
.bg-emerald-300\\/60 {
  background-color: rgb(110 231 183 / 0.6);
}
.bg-emerald-300\\/65 {
  background-color: rgb(110 231 183 / 0.65);
}
.bg-emerald-300\\/70 {
  background-color: rgb(110 231 183 / 0.7);
}
.bg-emerald-300\\/75 {
  background-color: rgb(110 231 183 / 0.75);
}
.bg-emerald-300\\/80 {
  background-color: rgb(110 231 183 / 0.8);
}
.bg-emerald-300\\/85 {
  background-color: rgb(110 231 183 / 0.85);
}
.bg-emerald-300\\/90 {
  background-color: rgb(110 231 183 / 0.9);
}
.bg-emerald-300\\/95 {
  background-color: rgb(110 231 183 / 0.95);
}
.bg-emerald-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(52 211 153 / var(--tw-bg-opacity));
}
.bg-emerald-400\\/0 {
  background-color: rgb(52 211 153 / 0);
}
.bg-emerald-400\\/10 {
  background-color: rgb(52 211 153 / 0.1);
}
.bg-emerald-400\\/100 {
  background-color: rgb(52 211 153 / 1);
}
.bg-emerald-400\\/15 {
  background-color: rgb(52 211 153 / 0.15);
}
.bg-emerald-400\\/20 {
  background-color: rgb(52 211 153 / 0.2);
}
.bg-emerald-400\\/25 {
  background-color: rgb(52 211 153 / 0.25);
}
.bg-emerald-400\\/30 {
  background-color: rgb(52 211 153 / 0.3);
}
.bg-emerald-400\\/35 {
  background-color: rgb(52 211 153 / 0.35);
}
.bg-emerald-400\\/40 {
  background-color: rgb(52 211 153 / 0.4);
}
.bg-emerald-400\\/45 {
  background-color: rgb(52 211 153 / 0.45);
}
.bg-emerald-400\\/5 {
  background-color: rgb(52 211 153 / 0.05);
}
.bg-emerald-400\\/50 {
  background-color: rgb(52 211 153 / 0.5);
}
.bg-emerald-400\\/55 {
  background-color: rgb(52 211 153 / 0.55);
}
.bg-emerald-400\\/60 {
  background-color: rgb(52 211 153 / 0.6);
}
.bg-emerald-400\\/65 {
  background-color: rgb(52 211 153 / 0.65);
}
.bg-emerald-400\\/70 {
  background-color: rgb(52 211 153 / 0.7);
}
.bg-emerald-400\\/75 {
  background-color: rgb(52 211 153 / 0.75);
}
.bg-emerald-400\\/80 {
  background-color: rgb(52 211 153 / 0.8);
}
.bg-emerald-400\\/85 {
  background-color: rgb(52 211 153 / 0.85);
}
.bg-emerald-400\\/90 {
  background-color: rgb(52 211 153 / 0.9);
}
.bg-emerald-400\\/95 {
  background-color: rgb(52 211 153 / 0.95);
}
.bg-emerald-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(236 253 245 / var(--tw-bg-opacity));
}
.bg-emerald-50\\/0 {
  background-color: rgb(236 253 245 / 0);
}
.bg-emerald-50\\/10 {
  background-color: rgb(236 253 245 / 0.1);
}
.bg-emerald-50\\/100 {
  background-color: rgb(236 253 245 / 1);
}
.bg-emerald-50\\/15 {
  background-color: rgb(236 253 245 / 0.15);
}
.bg-emerald-50\\/20 {
  background-color: rgb(236 253 245 / 0.2);
}
.bg-emerald-50\\/25 {
  background-color: rgb(236 253 245 / 0.25);
}
.bg-emerald-50\\/30 {
  background-color: rgb(236 253 245 / 0.3);
}
.bg-emerald-50\\/35 {
  background-color: rgb(236 253 245 / 0.35);
}
.bg-emerald-50\\/40 {
  background-color: rgb(236 253 245 / 0.4);
}
.bg-emerald-50\\/45 {
  background-color: rgb(236 253 245 / 0.45);
}
.bg-emerald-50\\/5 {
  background-color: rgb(236 253 245 / 0.05);
}
.bg-emerald-50\\/50 {
  background-color: rgb(236 253 245 / 0.5);
}
.bg-emerald-50\\/55 {
  background-color: rgb(236 253 245 / 0.55);
}
.bg-emerald-50\\/60 {
  background-color: rgb(236 253 245 / 0.6);
}
.bg-emerald-50\\/65 {
  background-color: rgb(236 253 245 / 0.65);
}
.bg-emerald-50\\/70 {
  background-color: rgb(236 253 245 / 0.7);
}
.bg-emerald-50\\/75 {
  background-color: rgb(236 253 245 / 0.75);
}
.bg-emerald-50\\/80 {
  background-color: rgb(236 253 245 / 0.8);
}
.bg-emerald-50\\/85 {
  background-color: rgb(236 253 245 / 0.85);
}
.bg-emerald-50\\/90 {
  background-color: rgb(236 253 245 / 0.9);
}
.bg-emerald-50\\/95 {
  background-color: rgb(236 253 245 / 0.95);
}
.bg-emerald-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(16 185 129 / var(--tw-bg-opacity));
}
.bg-emerald-500\\/0 {
  background-color: rgb(16 185 129 / 0);
}
.bg-emerald-500\\/10 {
  background-color: rgb(16 185 129 / 0.1);
}
.bg-emerald-500\\/100 {
  background-color: rgb(16 185 129 / 1);
}
.bg-emerald-500\\/15 {
  background-color: rgb(16 185 129 / 0.15);
}
.bg-emerald-500\\/20 {
  background-color: rgb(16 185 129 / 0.2);
}
.bg-emerald-500\\/25 {
  background-color: rgb(16 185 129 / 0.25);
}
.bg-emerald-500\\/30 {
  background-color: rgb(16 185 129 / 0.3);
}
.bg-emerald-500\\/35 {
  background-color: rgb(16 185 129 / 0.35);
}
.bg-emerald-500\\/40 {
  background-color: rgb(16 185 129 / 0.4);
}
.bg-emerald-500\\/45 {
  background-color: rgb(16 185 129 / 0.45);
}
.bg-emerald-500\\/5 {
  background-color: rgb(16 185 129 / 0.05);
}
.bg-emerald-500\\/50 {
  background-color: rgb(16 185 129 / 0.5);
}
.bg-emerald-500\\/55 {
  background-color: rgb(16 185 129 / 0.55);
}
.bg-emerald-500\\/60 {
  background-color: rgb(16 185 129 / 0.6);
}
.bg-emerald-500\\/65 {
  background-color: rgb(16 185 129 / 0.65);
}
.bg-emerald-500\\/70 {
  background-color: rgb(16 185 129 / 0.7);
}
.bg-emerald-500\\/75 {
  background-color: rgb(16 185 129 / 0.75);
}
.bg-emerald-500\\/80 {
  background-color: rgb(16 185 129 / 0.8);
}
.bg-emerald-500\\/85 {
  background-color: rgb(16 185 129 / 0.85);
}
.bg-emerald-500\\/90 {
  background-color: rgb(16 185 129 / 0.9);
}
.bg-emerald-500\\/95 {
  background-color: rgb(16 185 129 / 0.95);
}
.bg-emerald-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(5 150 105 / var(--tw-bg-opacity));
}
.bg-emerald-600\\/0 {
  background-color: rgb(5 150 105 / 0);
}
.bg-emerald-600\\/10 {
  background-color: rgb(5 150 105 / 0.1);
}
.bg-emerald-600\\/100 {
  background-color: rgb(5 150 105 / 1);
}
.bg-emerald-600\\/15 {
  background-color: rgb(5 150 105 / 0.15);
}
.bg-emerald-600\\/20 {
  background-color: rgb(5 150 105 / 0.2);
}
.bg-emerald-600\\/25 {
  background-color: rgb(5 150 105 / 0.25);
}
.bg-emerald-600\\/30 {
  background-color: rgb(5 150 105 / 0.3);
}
.bg-emerald-600\\/35 {
  background-color: rgb(5 150 105 / 0.35);
}
.bg-emerald-600\\/40 {
  background-color: rgb(5 150 105 / 0.4);
}
.bg-emerald-600\\/45 {
  background-color: rgb(5 150 105 / 0.45);
}
.bg-emerald-600\\/5 {
  background-color: rgb(5 150 105 / 0.05);
}
.bg-emerald-600\\/50 {
  background-color: rgb(5 150 105 / 0.5);
}
.bg-emerald-600\\/55 {
  background-color: rgb(5 150 105 / 0.55);
}
.bg-emerald-600\\/60 {
  background-color: rgb(5 150 105 / 0.6);
}
.bg-emerald-600\\/65 {
  background-color: rgb(5 150 105 / 0.65);
}
.bg-emerald-600\\/70 {
  background-color: rgb(5 150 105 / 0.7);
}
.bg-emerald-600\\/75 {
  background-color: rgb(5 150 105 / 0.75);
}
.bg-emerald-600\\/80 {
  background-color: rgb(5 150 105 / 0.8);
}
.bg-emerald-600\\/85 {
  background-color: rgb(5 150 105 / 0.85);
}
.bg-emerald-600\\/90 {
  background-color: rgb(5 150 105 / 0.9);
}
.bg-emerald-600\\/95 {
  background-color: rgb(5 150 105 / 0.95);
}
.bg-emerald-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(4 120 87 / var(--tw-bg-opacity));
}
.bg-emerald-700\\/0 {
  background-color: rgb(4 120 87 / 0);
}
.bg-emerald-700\\/10 {
  background-color: rgb(4 120 87 / 0.1);
}
.bg-emerald-700\\/100 {
  background-color: rgb(4 120 87 / 1);
}
.bg-emerald-700\\/15 {
  background-color: rgb(4 120 87 / 0.15);
}
.bg-emerald-700\\/20 {
  background-color: rgb(4 120 87 / 0.2);
}
.bg-emerald-700\\/25 {
  background-color: rgb(4 120 87 / 0.25);
}
.bg-emerald-700\\/30 {
  background-color: rgb(4 120 87 / 0.3);
}
.bg-emerald-700\\/35 {
  background-color: rgb(4 120 87 / 0.35);
}
.bg-emerald-700\\/40 {
  background-color: rgb(4 120 87 / 0.4);
}
.bg-emerald-700\\/45 {
  background-color: rgb(4 120 87 / 0.45);
}
.bg-emerald-700\\/5 {
  background-color: rgb(4 120 87 / 0.05);
}
.bg-emerald-700\\/50 {
  background-color: rgb(4 120 87 / 0.5);
}
.bg-emerald-700\\/55 {
  background-color: rgb(4 120 87 / 0.55);
}
.bg-emerald-700\\/60 {
  background-color: rgb(4 120 87 / 0.6);
}
.bg-emerald-700\\/65 {
  background-color: rgb(4 120 87 / 0.65);
}
.bg-emerald-700\\/70 {
  background-color: rgb(4 120 87 / 0.7);
}
.bg-emerald-700\\/75 {
  background-color: rgb(4 120 87 / 0.75);
}
.bg-emerald-700\\/80 {
  background-color: rgb(4 120 87 / 0.8);
}
.bg-emerald-700\\/85 {
  background-color: rgb(4 120 87 / 0.85);
}
.bg-emerald-700\\/90 {
  background-color: rgb(4 120 87 / 0.9);
}
.bg-emerald-700\\/95 {
  background-color: rgb(4 120 87 / 0.95);
}
.bg-emerald-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(6 95 70 / var(--tw-bg-opacity));
}
.bg-emerald-800\\/0 {
  background-color: rgb(6 95 70 / 0);
}
.bg-emerald-800\\/10 {
  background-color: rgb(6 95 70 / 0.1);
}
.bg-emerald-800\\/100 {
  background-color: rgb(6 95 70 / 1);
}
.bg-emerald-800\\/15 {
  background-color: rgb(6 95 70 / 0.15);
}
.bg-emerald-800\\/20 {
  background-color: rgb(6 95 70 / 0.2);
}
.bg-emerald-800\\/25 {
  background-color: rgb(6 95 70 / 0.25);
}
.bg-emerald-800\\/30 {
  background-color: rgb(6 95 70 / 0.3);
}
.bg-emerald-800\\/35 {
  background-color: rgb(6 95 70 / 0.35);
}
.bg-emerald-800\\/40 {
  background-color: rgb(6 95 70 / 0.4);
}
.bg-emerald-800\\/45 {
  background-color: rgb(6 95 70 / 0.45);
}
.bg-emerald-800\\/5 {
  background-color: rgb(6 95 70 / 0.05);
}
.bg-emerald-800\\/50 {
  background-color: rgb(6 95 70 / 0.5);
}
.bg-emerald-800\\/55 {
  background-color: rgb(6 95 70 / 0.55);
}
.bg-emerald-800\\/60 {
  background-color: rgb(6 95 70 / 0.6);
}
.bg-emerald-800\\/65 {
  background-color: rgb(6 95 70 / 0.65);
}
.bg-emerald-800\\/70 {
  background-color: rgb(6 95 70 / 0.7);
}
.bg-emerald-800\\/75 {
  background-color: rgb(6 95 70 / 0.75);
}
.bg-emerald-800\\/80 {
  background-color: rgb(6 95 70 / 0.8);
}
.bg-emerald-800\\/85 {
  background-color: rgb(6 95 70 / 0.85);
}
.bg-emerald-800\\/90 {
  background-color: rgb(6 95 70 / 0.9);
}
.bg-emerald-800\\/95 {
  background-color: rgb(6 95 70 / 0.95);
}
.bg-emerald-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(6 78 59 / var(--tw-bg-opacity));
}
.bg-emerald-900\\/0 {
  background-color: rgb(6 78 59 / 0);
}
.bg-emerald-900\\/10 {
  background-color: rgb(6 78 59 / 0.1);
}
.bg-emerald-900\\/100 {
  background-color: rgb(6 78 59 / 1);
}
.bg-emerald-900\\/15 {
  background-color: rgb(6 78 59 / 0.15);
}
.bg-emerald-900\\/20 {
  background-color: rgb(6 78 59 / 0.2);
}
.bg-emerald-900\\/25 {
  background-color: rgb(6 78 59 / 0.25);
}
.bg-emerald-900\\/30 {
  background-color: rgb(6 78 59 / 0.3);
}
.bg-emerald-900\\/35 {
  background-color: rgb(6 78 59 / 0.35);
}
.bg-emerald-900\\/40 {
  background-color: rgb(6 78 59 / 0.4);
}
.bg-emerald-900\\/45 {
  background-color: rgb(6 78 59 / 0.45);
}
.bg-emerald-900\\/5 {
  background-color: rgb(6 78 59 / 0.05);
}
.bg-emerald-900\\/50 {
  background-color: rgb(6 78 59 / 0.5);
}
.bg-emerald-900\\/55 {
  background-color: rgb(6 78 59 / 0.55);
}
.bg-emerald-900\\/60 {
  background-color: rgb(6 78 59 / 0.6);
}
.bg-emerald-900\\/65 {
  background-color: rgb(6 78 59 / 0.65);
}
.bg-emerald-900\\/70 {
  background-color: rgb(6 78 59 / 0.7);
}
.bg-emerald-900\\/75 {
  background-color: rgb(6 78 59 / 0.75);
}
.bg-emerald-900\\/80 {
  background-color: rgb(6 78 59 / 0.8);
}
.bg-emerald-900\\/85 {
  background-color: rgb(6 78 59 / 0.85);
}
.bg-emerald-900\\/90 {
  background-color: rgb(6 78 59 / 0.9);
}
.bg-emerald-900\\/95 {
  background-color: rgb(6 78 59 / 0.95);
}
.bg-emerald-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(2 44 34 / var(--tw-bg-opacity));
}
.bg-emerald-950\\/0 {
  background-color: rgb(2 44 34 / 0);
}
.bg-emerald-950\\/10 {
  background-color: rgb(2 44 34 / 0.1);
}
.bg-emerald-950\\/100 {
  background-color: rgb(2 44 34 / 1);
}
.bg-emerald-950\\/15 {
  background-color: rgb(2 44 34 / 0.15);
}
.bg-emerald-950\\/20 {
  background-color: rgb(2 44 34 / 0.2);
}
.bg-emerald-950\\/25 {
  background-color: rgb(2 44 34 / 0.25);
}
.bg-emerald-950\\/30 {
  background-color: rgb(2 44 34 / 0.3);
}
.bg-emerald-950\\/35 {
  background-color: rgb(2 44 34 / 0.35);
}
.bg-emerald-950\\/40 {
  background-color: rgb(2 44 34 / 0.4);
}
.bg-emerald-950\\/45 {
  background-color: rgb(2 44 34 / 0.45);
}
.bg-emerald-950\\/5 {
  background-color: rgb(2 44 34 / 0.05);
}
.bg-emerald-950\\/50 {
  background-color: rgb(2 44 34 / 0.5);
}
.bg-emerald-950\\/55 {
  background-color: rgb(2 44 34 / 0.55);
}
.bg-emerald-950\\/60 {
  background-color: rgb(2 44 34 / 0.6);
}
.bg-emerald-950\\/65 {
  background-color: rgb(2 44 34 / 0.65);
}
.bg-emerald-950\\/70 {
  background-color: rgb(2 44 34 / 0.7);
}
.bg-emerald-950\\/75 {
  background-color: rgb(2 44 34 / 0.75);
}
.bg-emerald-950\\/80 {
  background-color: rgb(2 44 34 / 0.8);
}
.bg-emerald-950\\/85 {
  background-color: rgb(2 44 34 / 0.85);
}
.bg-emerald-950\\/90 {
  background-color: rgb(2 44 34 / 0.9);
}
.bg-emerald-950\\/95 {
  background-color: rgb(2 44 34 / 0.95);
}
.bg-fuchsia-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 232 255 / var(--tw-bg-opacity));
}
.bg-fuchsia-100\\/0 {
  background-color: rgb(250 232 255 / 0);
}
.bg-fuchsia-100\\/10 {
  background-color: rgb(250 232 255 / 0.1);
}
.bg-fuchsia-100\\/100 {
  background-color: rgb(250 232 255 / 1);
}
.bg-fuchsia-100\\/15 {
  background-color: rgb(250 232 255 / 0.15);
}
.bg-fuchsia-100\\/20 {
  background-color: rgb(250 232 255 / 0.2);
}
.bg-fuchsia-100\\/25 {
  background-color: rgb(250 232 255 / 0.25);
}
.bg-fuchsia-100\\/30 {
  background-color: rgb(250 232 255 / 0.3);
}
.bg-fuchsia-100\\/35 {
  background-color: rgb(250 232 255 / 0.35);
}
.bg-fuchsia-100\\/40 {
  background-color: rgb(250 232 255 / 0.4);
}
.bg-fuchsia-100\\/45 {
  background-color: rgb(250 232 255 / 0.45);
}
.bg-fuchsia-100\\/5 {
  background-color: rgb(250 232 255 / 0.05);
}
.bg-fuchsia-100\\/50 {
  background-color: rgb(250 232 255 / 0.5);
}
.bg-fuchsia-100\\/55 {
  background-color: rgb(250 232 255 / 0.55);
}
.bg-fuchsia-100\\/60 {
  background-color: rgb(250 232 255 / 0.6);
}
.bg-fuchsia-100\\/65 {
  background-color: rgb(250 232 255 / 0.65);
}
.bg-fuchsia-100\\/70 {
  background-color: rgb(250 232 255 / 0.7);
}
.bg-fuchsia-100\\/75 {
  background-color: rgb(250 232 255 / 0.75);
}
.bg-fuchsia-100\\/80 {
  background-color: rgb(250 232 255 / 0.8);
}
.bg-fuchsia-100\\/85 {
  background-color: rgb(250 232 255 / 0.85);
}
.bg-fuchsia-100\\/90 {
  background-color: rgb(250 232 255 / 0.9);
}
.bg-fuchsia-100\\/95 {
  background-color: rgb(250 232 255 / 0.95);
}
.bg-fuchsia-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(245 208 254 / var(--tw-bg-opacity));
}
.bg-fuchsia-200\\/0 {
  background-color: rgb(245 208 254 / 0);
}
.bg-fuchsia-200\\/10 {
  background-color: rgb(245 208 254 / 0.1);
}
.bg-fuchsia-200\\/100 {
  background-color: rgb(245 208 254 / 1);
}
.bg-fuchsia-200\\/15 {
  background-color: rgb(245 208 254 / 0.15);
}
.bg-fuchsia-200\\/20 {
  background-color: rgb(245 208 254 / 0.2);
}
.bg-fuchsia-200\\/25 {
  background-color: rgb(245 208 254 / 0.25);
}
.bg-fuchsia-200\\/30 {
  background-color: rgb(245 208 254 / 0.3);
}
.bg-fuchsia-200\\/35 {
  background-color: rgb(245 208 254 / 0.35);
}
.bg-fuchsia-200\\/40 {
  background-color: rgb(245 208 254 / 0.4);
}
.bg-fuchsia-200\\/45 {
  background-color: rgb(245 208 254 / 0.45);
}
.bg-fuchsia-200\\/5 {
  background-color: rgb(245 208 254 / 0.05);
}
.bg-fuchsia-200\\/50 {
  background-color: rgb(245 208 254 / 0.5);
}
.bg-fuchsia-200\\/55 {
  background-color: rgb(245 208 254 / 0.55);
}
.bg-fuchsia-200\\/60 {
  background-color: rgb(245 208 254 / 0.6);
}
.bg-fuchsia-200\\/65 {
  background-color: rgb(245 208 254 / 0.65);
}
.bg-fuchsia-200\\/70 {
  background-color: rgb(245 208 254 / 0.7);
}
.bg-fuchsia-200\\/75 {
  background-color: rgb(245 208 254 / 0.75);
}
.bg-fuchsia-200\\/80 {
  background-color: rgb(245 208 254 / 0.8);
}
.bg-fuchsia-200\\/85 {
  background-color: rgb(245 208 254 / 0.85);
}
.bg-fuchsia-200\\/90 {
  background-color: rgb(245 208 254 / 0.9);
}
.bg-fuchsia-200\\/95 {
  background-color: rgb(245 208 254 / 0.95);
}
.bg-fuchsia-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(240 171 252 / var(--tw-bg-opacity));
}
.bg-fuchsia-300\\/0 {
  background-color: rgb(240 171 252 / 0);
}
.bg-fuchsia-300\\/10 {
  background-color: rgb(240 171 252 / 0.1);
}
.bg-fuchsia-300\\/100 {
  background-color: rgb(240 171 252 / 1);
}
.bg-fuchsia-300\\/15 {
  background-color: rgb(240 171 252 / 0.15);
}
.bg-fuchsia-300\\/20 {
  background-color: rgb(240 171 252 / 0.2);
}
.bg-fuchsia-300\\/25 {
  background-color: rgb(240 171 252 / 0.25);
}
.bg-fuchsia-300\\/30 {
  background-color: rgb(240 171 252 / 0.3);
}
.bg-fuchsia-300\\/35 {
  background-color: rgb(240 171 252 / 0.35);
}
.bg-fuchsia-300\\/40 {
  background-color: rgb(240 171 252 / 0.4);
}
.bg-fuchsia-300\\/45 {
  background-color: rgb(240 171 252 / 0.45);
}
.bg-fuchsia-300\\/5 {
  background-color: rgb(240 171 252 / 0.05);
}
.bg-fuchsia-300\\/50 {
  background-color: rgb(240 171 252 / 0.5);
}
.bg-fuchsia-300\\/55 {
  background-color: rgb(240 171 252 / 0.55);
}
.bg-fuchsia-300\\/60 {
  background-color: rgb(240 171 252 / 0.6);
}
.bg-fuchsia-300\\/65 {
  background-color: rgb(240 171 252 / 0.65);
}
.bg-fuchsia-300\\/70 {
  background-color: rgb(240 171 252 / 0.7);
}
.bg-fuchsia-300\\/75 {
  background-color: rgb(240 171 252 / 0.75);
}
.bg-fuchsia-300\\/80 {
  background-color: rgb(240 171 252 / 0.8);
}
.bg-fuchsia-300\\/85 {
  background-color: rgb(240 171 252 / 0.85);
}
.bg-fuchsia-300\\/90 {
  background-color: rgb(240 171 252 / 0.9);
}
.bg-fuchsia-300\\/95 {
  background-color: rgb(240 171 252 / 0.95);
}
.bg-fuchsia-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(232 121 249 / var(--tw-bg-opacity));
}
.bg-fuchsia-400\\/0 {
  background-color: rgb(232 121 249 / 0);
}
.bg-fuchsia-400\\/10 {
  background-color: rgb(232 121 249 / 0.1);
}
.bg-fuchsia-400\\/100 {
  background-color: rgb(232 121 249 / 1);
}
.bg-fuchsia-400\\/15 {
  background-color: rgb(232 121 249 / 0.15);
}
.bg-fuchsia-400\\/20 {
  background-color: rgb(232 121 249 / 0.2);
}
.bg-fuchsia-400\\/25 {
  background-color: rgb(232 121 249 / 0.25);
}
.bg-fuchsia-400\\/30 {
  background-color: rgb(232 121 249 / 0.3);
}
.bg-fuchsia-400\\/35 {
  background-color: rgb(232 121 249 / 0.35);
}
.bg-fuchsia-400\\/40 {
  background-color: rgb(232 121 249 / 0.4);
}
.bg-fuchsia-400\\/45 {
  background-color: rgb(232 121 249 / 0.45);
}
.bg-fuchsia-400\\/5 {
  background-color: rgb(232 121 249 / 0.05);
}
.bg-fuchsia-400\\/50 {
  background-color: rgb(232 121 249 / 0.5);
}
.bg-fuchsia-400\\/55 {
  background-color: rgb(232 121 249 / 0.55);
}
.bg-fuchsia-400\\/60 {
  background-color: rgb(232 121 249 / 0.6);
}
.bg-fuchsia-400\\/65 {
  background-color: rgb(232 121 249 / 0.65);
}
.bg-fuchsia-400\\/70 {
  background-color: rgb(232 121 249 / 0.7);
}
.bg-fuchsia-400\\/75 {
  background-color: rgb(232 121 249 / 0.75);
}
.bg-fuchsia-400\\/80 {
  background-color: rgb(232 121 249 / 0.8);
}
.bg-fuchsia-400\\/85 {
  background-color: rgb(232 121 249 / 0.85);
}
.bg-fuchsia-400\\/90 {
  background-color: rgb(232 121 249 / 0.9);
}
.bg-fuchsia-400\\/95 {
  background-color: rgb(232 121 249 / 0.95);
}
.bg-fuchsia-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 244 255 / var(--tw-bg-opacity));
}
.bg-fuchsia-50\\/0 {
  background-color: rgb(253 244 255 / 0);
}
.bg-fuchsia-50\\/10 {
  background-color: rgb(253 244 255 / 0.1);
}
.bg-fuchsia-50\\/100 {
  background-color: rgb(253 244 255 / 1);
}
.bg-fuchsia-50\\/15 {
  background-color: rgb(253 244 255 / 0.15);
}
.bg-fuchsia-50\\/20 {
  background-color: rgb(253 244 255 / 0.2);
}
.bg-fuchsia-50\\/25 {
  background-color: rgb(253 244 255 / 0.25);
}
.bg-fuchsia-50\\/30 {
  background-color: rgb(253 244 255 / 0.3);
}
.bg-fuchsia-50\\/35 {
  background-color: rgb(253 244 255 / 0.35);
}
.bg-fuchsia-50\\/40 {
  background-color: rgb(253 244 255 / 0.4);
}
.bg-fuchsia-50\\/45 {
  background-color: rgb(253 244 255 / 0.45);
}
.bg-fuchsia-50\\/5 {
  background-color: rgb(253 244 255 / 0.05);
}
.bg-fuchsia-50\\/50 {
  background-color: rgb(253 244 255 / 0.5);
}
.bg-fuchsia-50\\/55 {
  background-color: rgb(253 244 255 / 0.55);
}
.bg-fuchsia-50\\/60 {
  background-color: rgb(253 244 255 / 0.6);
}
.bg-fuchsia-50\\/65 {
  background-color: rgb(253 244 255 / 0.65);
}
.bg-fuchsia-50\\/70 {
  background-color: rgb(253 244 255 / 0.7);
}
.bg-fuchsia-50\\/75 {
  background-color: rgb(253 244 255 / 0.75);
}
.bg-fuchsia-50\\/80 {
  background-color: rgb(253 244 255 / 0.8);
}
.bg-fuchsia-50\\/85 {
  background-color: rgb(253 244 255 / 0.85);
}
.bg-fuchsia-50\\/90 {
  background-color: rgb(253 244 255 / 0.9);
}
.bg-fuchsia-50\\/95 {
  background-color: rgb(253 244 255 / 0.95);
}
.bg-fuchsia-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(217 70 239 / var(--tw-bg-opacity));
}
.bg-fuchsia-500\\/0 {
  background-color: rgb(217 70 239 / 0);
}
.bg-fuchsia-500\\/10 {
  background-color: rgb(217 70 239 / 0.1);
}
.bg-fuchsia-500\\/100 {
  background-color: rgb(217 70 239 / 1);
}
.bg-fuchsia-500\\/15 {
  background-color: rgb(217 70 239 / 0.15);
}
.bg-fuchsia-500\\/20 {
  background-color: rgb(217 70 239 / 0.2);
}
.bg-fuchsia-500\\/25 {
  background-color: rgb(217 70 239 / 0.25);
}
.bg-fuchsia-500\\/30 {
  background-color: rgb(217 70 239 / 0.3);
}
.bg-fuchsia-500\\/35 {
  background-color: rgb(217 70 239 / 0.35);
}
.bg-fuchsia-500\\/40 {
  background-color: rgb(217 70 239 / 0.4);
}
.bg-fuchsia-500\\/45 {
  background-color: rgb(217 70 239 / 0.45);
}
.bg-fuchsia-500\\/5 {
  background-color: rgb(217 70 239 / 0.05);
}
.bg-fuchsia-500\\/50 {
  background-color: rgb(217 70 239 / 0.5);
}
.bg-fuchsia-500\\/55 {
  background-color: rgb(217 70 239 / 0.55);
}
.bg-fuchsia-500\\/60 {
  background-color: rgb(217 70 239 / 0.6);
}
.bg-fuchsia-500\\/65 {
  background-color: rgb(217 70 239 / 0.65);
}
.bg-fuchsia-500\\/70 {
  background-color: rgb(217 70 239 / 0.7);
}
.bg-fuchsia-500\\/75 {
  background-color: rgb(217 70 239 / 0.75);
}
.bg-fuchsia-500\\/80 {
  background-color: rgb(217 70 239 / 0.8);
}
.bg-fuchsia-500\\/85 {
  background-color: rgb(217 70 239 / 0.85);
}
.bg-fuchsia-500\\/90 {
  background-color: rgb(217 70 239 / 0.9);
}
.bg-fuchsia-500\\/95 {
  background-color: rgb(217 70 239 / 0.95);
}
.bg-fuchsia-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(192 38 211 / var(--tw-bg-opacity));
}
.bg-fuchsia-600\\/0 {
  background-color: rgb(192 38 211 / 0);
}
.bg-fuchsia-600\\/10 {
  background-color: rgb(192 38 211 / 0.1);
}
.bg-fuchsia-600\\/100 {
  background-color: rgb(192 38 211 / 1);
}
.bg-fuchsia-600\\/15 {
  background-color: rgb(192 38 211 / 0.15);
}
.bg-fuchsia-600\\/20 {
  background-color: rgb(192 38 211 / 0.2);
}
.bg-fuchsia-600\\/25 {
  background-color: rgb(192 38 211 / 0.25);
}
.bg-fuchsia-600\\/30 {
  background-color: rgb(192 38 211 / 0.3);
}
.bg-fuchsia-600\\/35 {
  background-color: rgb(192 38 211 / 0.35);
}
.bg-fuchsia-600\\/40 {
  background-color: rgb(192 38 211 / 0.4);
}
.bg-fuchsia-600\\/45 {
  background-color: rgb(192 38 211 / 0.45);
}
.bg-fuchsia-600\\/5 {
  background-color: rgb(192 38 211 / 0.05);
}
.bg-fuchsia-600\\/50 {
  background-color: rgb(192 38 211 / 0.5);
}
.bg-fuchsia-600\\/55 {
  background-color: rgb(192 38 211 / 0.55);
}
.bg-fuchsia-600\\/60 {
  background-color: rgb(192 38 211 / 0.6);
}
.bg-fuchsia-600\\/65 {
  background-color: rgb(192 38 211 / 0.65);
}
.bg-fuchsia-600\\/70 {
  background-color: rgb(192 38 211 / 0.7);
}
.bg-fuchsia-600\\/75 {
  background-color: rgb(192 38 211 / 0.75);
}
.bg-fuchsia-600\\/80 {
  background-color: rgb(192 38 211 / 0.8);
}
.bg-fuchsia-600\\/85 {
  background-color: rgb(192 38 211 / 0.85);
}
.bg-fuchsia-600\\/90 {
  background-color: rgb(192 38 211 / 0.9);
}
.bg-fuchsia-600\\/95 {
  background-color: rgb(192 38 211 / 0.95);
}
.bg-fuchsia-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(162 28 175 / var(--tw-bg-opacity));
}
.bg-fuchsia-700\\/0 {
  background-color: rgb(162 28 175 / 0);
}
.bg-fuchsia-700\\/10 {
  background-color: rgb(162 28 175 / 0.1);
}
.bg-fuchsia-700\\/100 {
  background-color: rgb(162 28 175 / 1);
}
.bg-fuchsia-700\\/15 {
  background-color: rgb(162 28 175 / 0.15);
}
.bg-fuchsia-700\\/20 {
  background-color: rgb(162 28 175 / 0.2);
}
.bg-fuchsia-700\\/25 {
  background-color: rgb(162 28 175 / 0.25);
}
.bg-fuchsia-700\\/30 {
  background-color: rgb(162 28 175 / 0.3);
}
.bg-fuchsia-700\\/35 {
  background-color: rgb(162 28 175 / 0.35);
}
.bg-fuchsia-700\\/40 {
  background-color: rgb(162 28 175 / 0.4);
}
.bg-fuchsia-700\\/45 {
  background-color: rgb(162 28 175 / 0.45);
}
.bg-fuchsia-700\\/5 {
  background-color: rgb(162 28 175 / 0.05);
}
.bg-fuchsia-700\\/50 {
  background-color: rgb(162 28 175 / 0.5);
}
.bg-fuchsia-700\\/55 {
  background-color: rgb(162 28 175 / 0.55);
}
.bg-fuchsia-700\\/60 {
  background-color: rgb(162 28 175 / 0.6);
}
.bg-fuchsia-700\\/65 {
  background-color: rgb(162 28 175 / 0.65);
}
.bg-fuchsia-700\\/70 {
  background-color: rgb(162 28 175 / 0.7);
}
.bg-fuchsia-700\\/75 {
  background-color: rgb(162 28 175 / 0.75);
}
.bg-fuchsia-700\\/80 {
  background-color: rgb(162 28 175 / 0.8);
}
.bg-fuchsia-700\\/85 {
  background-color: rgb(162 28 175 / 0.85);
}
.bg-fuchsia-700\\/90 {
  background-color: rgb(162 28 175 / 0.9);
}
.bg-fuchsia-700\\/95 {
  background-color: rgb(162 28 175 / 0.95);
}
.bg-fuchsia-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(134 25 143 / var(--tw-bg-opacity));
}
.bg-fuchsia-800\\/0 {
  background-color: rgb(134 25 143 / 0);
}
.bg-fuchsia-800\\/10 {
  background-color: rgb(134 25 143 / 0.1);
}
.bg-fuchsia-800\\/100 {
  background-color: rgb(134 25 143 / 1);
}
.bg-fuchsia-800\\/15 {
  background-color: rgb(134 25 143 / 0.15);
}
.bg-fuchsia-800\\/20 {
  background-color: rgb(134 25 143 / 0.2);
}
.bg-fuchsia-800\\/25 {
  background-color: rgb(134 25 143 / 0.25);
}
.bg-fuchsia-800\\/30 {
  background-color: rgb(134 25 143 / 0.3);
}
.bg-fuchsia-800\\/35 {
  background-color: rgb(134 25 143 / 0.35);
}
.bg-fuchsia-800\\/40 {
  background-color: rgb(134 25 143 / 0.4);
}
.bg-fuchsia-800\\/45 {
  background-color: rgb(134 25 143 / 0.45);
}
.bg-fuchsia-800\\/5 {
  background-color: rgb(134 25 143 / 0.05);
}
.bg-fuchsia-800\\/50 {
  background-color: rgb(134 25 143 / 0.5);
}
.bg-fuchsia-800\\/55 {
  background-color: rgb(134 25 143 / 0.55);
}
.bg-fuchsia-800\\/60 {
  background-color: rgb(134 25 143 / 0.6);
}
.bg-fuchsia-800\\/65 {
  background-color: rgb(134 25 143 / 0.65);
}
.bg-fuchsia-800\\/70 {
  background-color: rgb(134 25 143 / 0.7);
}
.bg-fuchsia-800\\/75 {
  background-color: rgb(134 25 143 / 0.75);
}
.bg-fuchsia-800\\/80 {
  background-color: rgb(134 25 143 / 0.8);
}
.bg-fuchsia-800\\/85 {
  background-color: rgb(134 25 143 / 0.85);
}
.bg-fuchsia-800\\/90 {
  background-color: rgb(134 25 143 / 0.9);
}
.bg-fuchsia-800\\/95 {
  background-color: rgb(134 25 143 / 0.95);
}
.bg-fuchsia-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(112 26 117 / var(--tw-bg-opacity));
}
.bg-fuchsia-900\\/0 {
  background-color: rgb(112 26 117 / 0);
}
.bg-fuchsia-900\\/10 {
  background-color: rgb(112 26 117 / 0.1);
}
.bg-fuchsia-900\\/100 {
  background-color: rgb(112 26 117 / 1);
}
.bg-fuchsia-900\\/15 {
  background-color: rgb(112 26 117 / 0.15);
}
.bg-fuchsia-900\\/20 {
  background-color: rgb(112 26 117 / 0.2);
}
.bg-fuchsia-900\\/25 {
  background-color: rgb(112 26 117 / 0.25);
}
.bg-fuchsia-900\\/30 {
  background-color: rgb(112 26 117 / 0.3);
}
.bg-fuchsia-900\\/35 {
  background-color: rgb(112 26 117 / 0.35);
}
.bg-fuchsia-900\\/40 {
  background-color: rgb(112 26 117 / 0.4);
}
.bg-fuchsia-900\\/45 {
  background-color: rgb(112 26 117 / 0.45);
}
.bg-fuchsia-900\\/5 {
  background-color: rgb(112 26 117 / 0.05);
}
.bg-fuchsia-900\\/50 {
  background-color: rgb(112 26 117 / 0.5);
}
.bg-fuchsia-900\\/55 {
  background-color: rgb(112 26 117 / 0.55);
}
.bg-fuchsia-900\\/60 {
  background-color: rgb(112 26 117 / 0.6);
}
.bg-fuchsia-900\\/65 {
  background-color: rgb(112 26 117 / 0.65);
}
.bg-fuchsia-900\\/70 {
  background-color: rgb(112 26 117 / 0.7);
}
.bg-fuchsia-900\\/75 {
  background-color: rgb(112 26 117 / 0.75);
}
.bg-fuchsia-900\\/80 {
  background-color: rgb(112 26 117 / 0.8);
}
.bg-fuchsia-900\\/85 {
  background-color: rgb(112 26 117 / 0.85);
}
.bg-fuchsia-900\\/90 {
  background-color: rgb(112 26 117 / 0.9);
}
.bg-fuchsia-900\\/95 {
  background-color: rgb(112 26 117 / 0.95);
}
.bg-fuchsia-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(74 4 78 / var(--tw-bg-opacity));
}
.bg-fuchsia-950\\/0 {
  background-color: rgb(74 4 78 / 0);
}
.bg-fuchsia-950\\/10 {
  background-color: rgb(74 4 78 / 0.1);
}
.bg-fuchsia-950\\/100 {
  background-color: rgb(74 4 78 / 1);
}
.bg-fuchsia-950\\/15 {
  background-color: rgb(74 4 78 / 0.15);
}
.bg-fuchsia-950\\/20 {
  background-color: rgb(74 4 78 / 0.2);
}
.bg-fuchsia-950\\/25 {
  background-color: rgb(74 4 78 / 0.25);
}
.bg-fuchsia-950\\/30 {
  background-color: rgb(74 4 78 / 0.3);
}
.bg-fuchsia-950\\/35 {
  background-color: rgb(74 4 78 / 0.35);
}
.bg-fuchsia-950\\/40 {
  background-color: rgb(74 4 78 / 0.4);
}
.bg-fuchsia-950\\/45 {
  background-color: rgb(74 4 78 / 0.45);
}
.bg-fuchsia-950\\/5 {
  background-color: rgb(74 4 78 / 0.05);
}
.bg-fuchsia-950\\/50 {
  background-color: rgb(74 4 78 / 0.5);
}
.bg-fuchsia-950\\/55 {
  background-color: rgb(74 4 78 / 0.55);
}
.bg-fuchsia-950\\/60 {
  background-color: rgb(74 4 78 / 0.6);
}
.bg-fuchsia-950\\/65 {
  background-color: rgb(74 4 78 / 0.65);
}
.bg-fuchsia-950\\/70 {
  background-color: rgb(74 4 78 / 0.7);
}
.bg-fuchsia-950\\/75 {
  background-color: rgb(74 4 78 / 0.75);
}
.bg-fuchsia-950\\/80 {
  background-color: rgb(74 4 78 / 0.8);
}
.bg-fuchsia-950\\/85 {
  background-color: rgb(74 4 78 / 0.85);
}
.bg-fuchsia-950\\/90 {
  background-color: rgb(74 4 78 / 0.9);
}
.bg-fuchsia-950\\/95 {
  background-color: rgb(74 4 78 / 0.95);
}
.bg-gray-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity));
}
.bg-gray-100\\/0 {
  background-color: rgb(243 244 246 / 0);
}
.bg-gray-100\\/10 {
  background-color: rgb(243 244 246 / 0.1);
}
.bg-gray-100\\/100 {
  background-color: rgb(243 244 246 / 1);
}
.bg-gray-100\\/15 {
  background-color: rgb(243 244 246 / 0.15);
}
.bg-gray-100\\/20 {
  background-color: rgb(243 244 246 / 0.2);
}
.bg-gray-100\\/25 {
  background-color: rgb(243 244 246 / 0.25);
}
.bg-gray-100\\/30 {
  background-color: rgb(243 244 246 / 0.3);
}
.bg-gray-100\\/35 {
  background-color: rgb(243 244 246 / 0.35);
}
.bg-gray-100\\/40 {
  background-color: rgb(243 244 246 / 0.4);
}
.bg-gray-100\\/45 {
  background-color: rgb(243 244 246 / 0.45);
}
.bg-gray-100\\/5 {
  background-color: rgb(243 244 246 / 0.05);
}
.bg-gray-100\\/50 {
  background-color: rgb(243 244 246 / 0.5);
}
.bg-gray-100\\/55 {
  background-color: rgb(243 244 246 / 0.55);
}
.bg-gray-100\\/60 {
  background-color: rgb(243 244 246 / 0.6);
}
.bg-gray-100\\/65 {
  background-color: rgb(243 244 246 / 0.65);
}
.bg-gray-100\\/70 {
  background-color: rgb(243 244 246 / 0.7);
}
.bg-gray-100\\/75 {
  background-color: rgb(243 244 246 / 0.75);
}
.bg-gray-100\\/80 {
  background-color: rgb(243 244 246 / 0.8);
}
.bg-gray-100\\/85 {
  background-color: rgb(243 244 246 / 0.85);
}
.bg-gray-100\\/90 {
  background-color: rgb(243 244 246 / 0.9);
}
.bg-gray-100\\/95 {
  background-color: rgb(243 244 246 / 0.95);
}
.bg-gray-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(229 231 235 / var(--tw-bg-opacity));
}
.bg-gray-200\\/0 {
  background-color: rgb(229 231 235 / 0);
}
.bg-gray-200\\/10 {
  background-color: rgb(229 231 235 / 0.1);
}
.bg-gray-200\\/100 {
  background-color: rgb(229 231 235 / 1);
}
.bg-gray-200\\/15 {
  background-color: rgb(229 231 235 / 0.15);
}
.bg-gray-200\\/20 {
  background-color: rgb(229 231 235 / 0.2);
}
.bg-gray-200\\/25 {
  background-color: rgb(229 231 235 / 0.25);
}
.bg-gray-200\\/30 {
  background-color: rgb(229 231 235 / 0.3);
}
.bg-gray-200\\/35 {
  background-color: rgb(229 231 235 / 0.35);
}
.bg-gray-200\\/40 {
  background-color: rgb(229 231 235 / 0.4);
}
.bg-gray-200\\/45 {
  background-color: rgb(229 231 235 / 0.45);
}
.bg-gray-200\\/5 {
  background-color: rgb(229 231 235 / 0.05);
}
.bg-gray-200\\/50 {
  background-color: rgb(229 231 235 / 0.5);
}
.bg-gray-200\\/55 {
  background-color: rgb(229 231 235 / 0.55);
}
.bg-gray-200\\/60 {
  background-color: rgb(229 231 235 / 0.6);
}
.bg-gray-200\\/65 {
  background-color: rgb(229 231 235 / 0.65);
}
.bg-gray-200\\/70 {
  background-color: rgb(229 231 235 / 0.7);
}
.bg-gray-200\\/75 {
  background-color: rgb(229 231 235 / 0.75);
}
.bg-gray-200\\/80 {
  background-color: rgb(229 231 235 / 0.8);
}
.bg-gray-200\\/85 {
  background-color: rgb(229 231 235 / 0.85);
}
.bg-gray-200\\/90 {
  background-color: rgb(229 231 235 / 0.9);
}
.bg-gray-200\\/95 {
  background-color: rgb(229 231 235 / 0.95);
}
.bg-gray-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(209 213 219 / var(--tw-bg-opacity));
}
.bg-gray-300\\/0 {
  background-color: rgb(209 213 219 / 0);
}
.bg-gray-300\\/10 {
  background-color: rgb(209 213 219 / 0.1);
}
.bg-gray-300\\/100 {
  background-color: rgb(209 213 219 / 1);
}
.bg-gray-300\\/15 {
  background-color: rgb(209 213 219 / 0.15);
}
.bg-gray-300\\/20 {
  background-color: rgb(209 213 219 / 0.2);
}
.bg-gray-300\\/25 {
  background-color: rgb(209 213 219 / 0.25);
}
.bg-gray-300\\/30 {
  background-color: rgb(209 213 219 / 0.3);
}
.bg-gray-300\\/35 {
  background-color: rgb(209 213 219 / 0.35);
}
.bg-gray-300\\/40 {
  background-color: rgb(209 213 219 / 0.4);
}
.bg-gray-300\\/45 {
  background-color: rgb(209 213 219 / 0.45);
}
.bg-gray-300\\/5 {
  background-color: rgb(209 213 219 / 0.05);
}
.bg-gray-300\\/50 {
  background-color: rgb(209 213 219 / 0.5);
}
.bg-gray-300\\/55 {
  background-color: rgb(209 213 219 / 0.55);
}
.bg-gray-300\\/60 {
  background-color: rgb(209 213 219 / 0.6);
}
.bg-gray-300\\/65 {
  background-color: rgb(209 213 219 / 0.65);
}
.bg-gray-300\\/70 {
  background-color: rgb(209 213 219 / 0.7);
}
.bg-gray-300\\/75 {
  background-color: rgb(209 213 219 / 0.75);
}
.bg-gray-300\\/80 {
  background-color: rgb(209 213 219 / 0.8);
}
.bg-gray-300\\/85 {
  background-color: rgb(209 213 219 / 0.85);
}
.bg-gray-300\\/90 {
  background-color: rgb(209 213 219 / 0.9);
}
.bg-gray-300\\/95 {
  background-color: rgb(209 213 219 / 0.95);
}
.bg-gray-350 {
  --tw-bg-opacity: 1;
  background-color: rgb(182 188 197 / var(--tw-bg-opacity));
}
.bg-gray-350\\/0 {
  background-color: rgb(182 188 197 / 0);
}
.bg-gray-350\\/10 {
  background-color: rgb(182 188 197 / 0.1);
}
.bg-gray-350\\/100 {
  background-color: rgb(182 188 197 / 1);
}
.bg-gray-350\\/15 {
  background-color: rgb(182 188 197 / 0.15);
}
.bg-gray-350\\/20 {
  background-color: rgb(182 188 197 / 0.2);
}
.bg-gray-350\\/25 {
  background-color: rgb(182 188 197 / 0.25);
}
.bg-gray-350\\/30 {
  background-color: rgb(182 188 197 / 0.3);
}
.bg-gray-350\\/35 {
  background-color: rgb(182 188 197 / 0.35);
}
.bg-gray-350\\/40 {
  background-color: rgb(182 188 197 / 0.4);
}
.bg-gray-350\\/45 {
  background-color: rgb(182 188 197 / 0.45);
}
.bg-gray-350\\/5 {
  background-color: rgb(182 188 197 / 0.05);
}
.bg-gray-350\\/50 {
  background-color: rgb(182 188 197 / 0.5);
}
.bg-gray-350\\/55 {
  background-color: rgb(182 188 197 / 0.55);
}
.bg-gray-350\\/60 {
  background-color: rgb(182 188 197 / 0.6);
}
.bg-gray-350\\/65 {
  background-color: rgb(182 188 197 / 0.65);
}
.bg-gray-350\\/70 {
  background-color: rgb(182 188 197 / 0.7);
}
.bg-gray-350\\/75 {
  background-color: rgb(182 188 197 / 0.75);
}
.bg-gray-350\\/80 {
  background-color: rgb(182 188 197 / 0.8);
}
.bg-gray-350\\/85 {
  background-color: rgb(182 188 197 / 0.85);
}
.bg-gray-350\\/90 {
  background-color: rgb(182 188 197 / 0.9);
}
.bg-gray-350\\/95 {
  background-color: rgb(182 188 197 / 0.95);
}
.bg-gray-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(156 163 175 / var(--tw-bg-opacity));
}
.bg-gray-400\\/0 {
  background-color: rgb(156 163 175 / 0);
}
.bg-gray-400\\/10 {
  background-color: rgb(156 163 175 / 0.1);
}
.bg-gray-400\\/100 {
  background-color: rgb(156 163 175 / 1);
}
.bg-gray-400\\/15 {
  background-color: rgb(156 163 175 / 0.15);
}
.bg-gray-400\\/20 {
  background-color: rgb(156 163 175 / 0.2);
}
.bg-gray-400\\/25 {
  background-color: rgb(156 163 175 / 0.25);
}
.bg-gray-400\\/30 {
  background-color: rgb(156 163 175 / 0.3);
}
.bg-gray-400\\/35 {
  background-color: rgb(156 163 175 / 0.35);
}
.bg-gray-400\\/40 {
  background-color: rgb(156 163 175 / 0.4);
}
.bg-gray-400\\/45 {
  background-color: rgb(156 163 175 / 0.45);
}
.bg-gray-400\\/5 {
  background-color: rgb(156 163 175 / 0.05);
}
.bg-gray-400\\/50 {
  background-color: rgb(156 163 175 / 0.5);
}
.bg-gray-400\\/55 {
  background-color: rgb(156 163 175 / 0.55);
}
.bg-gray-400\\/60 {
  background-color: rgb(156 163 175 / 0.6);
}
.bg-gray-400\\/65 {
  background-color: rgb(156 163 175 / 0.65);
}
.bg-gray-400\\/70 {
  background-color: rgb(156 163 175 / 0.7);
}
.bg-gray-400\\/75 {
  background-color: rgb(156 163 175 / 0.75);
}
.bg-gray-400\\/80 {
  background-color: rgb(156 163 175 / 0.8);
}
.bg-gray-400\\/85 {
  background-color: rgb(156 163 175 / 0.85);
}
.bg-gray-400\\/90 {
  background-color: rgb(156 163 175 / 0.9);
}
.bg-gray-400\\/95 {
  background-color: rgb(156 163 175 / 0.95);
}
.bg-gray-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 250 251 / var(--tw-bg-opacity));
}
.bg-gray-50\\/0 {
  background-color: rgb(249 250 251 / 0);
}
.bg-gray-50\\/10 {
  background-color: rgb(249 250 251 / 0.1);
}
.bg-gray-50\\/100 {
  background-color: rgb(249 250 251 / 1);
}
.bg-gray-50\\/15 {
  background-color: rgb(249 250 251 / 0.15);
}
.bg-gray-50\\/20 {
  background-color: rgb(249 250 251 / 0.2);
}
.bg-gray-50\\/25 {
  background-color: rgb(249 250 251 / 0.25);
}
.bg-gray-50\\/30 {
  background-color: rgb(249 250 251 / 0.3);
}
.bg-gray-50\\/35 {
  background-color: rgb(249 250 251 / 0.35);
}
.bg-gray-50\\/40 {
  background-color: rgb(249 250 251 / 0.4);
}
.bg-gray-50\\/45 {
  background-color: rgb(249 250 251 / 0.45);
}
.bg-gray-50\\/5 {
  background-color: rgb(249 250 251 / 0.05);
}
.bg-gray-50\\/50 {
  background-color: rgb(249 250 251 / 0.5);
}
.bg-gray-50\\/55 {
  background-color: rgb(249 250 251 / 0.55);
}
.bg-gray-50\\/60 {
  background-color: rgb(249 250 251 / 0.6);
}
.bg-gray-50\\/65 {
  background-color: rgb(249 250 251 / 0.65);
}
.bg-gray-50\\/70 {
  background-color: rgb(249 250 251 / 0.7);
}
.bg-gray-50\\/75 {
  background-color: rgb(249 250 251 / 0.75);
}
.bg-gray-50\\/80 {
  background-color: rgb(249 250 251 / 0.8);
}
.bg-gray-50\\/85 {
  background-color: rgb(249 250 251 / 0.85);
}
.bg-gray-50\\/90 {
  background-color: rgb(249 250 251 / 0.9);
}
.bg-gray-50\\/95 {
  background-color: rgb(249 250 251 / 0.95);
}
.bg-gray-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(107 114 128 / var(--tw-bg-opacity));
}
.bg-gray-500\\/0 {
  background-color: rgb(107 114 128 / 0);
}
.bg-gray-500\\/10 {
  background-color: rgb(107 114 128 / 0.1);
}
.bg-gray-500\\/100 {
  background-color: rgb(107 114 128 / 1);
}
.bg-gray-500\\/15 {
  background-color: rgb(107 114 128 / 0.15);
}
.bg-gray-500\\/20 {
  background-color: rgb(107 114 128 / 0.2);
}
.bg-gray-500\\/25 {
  background-color: rgb(107 114 128 / 0.25);
}
.bg-gray-500\\/30 {
  background-color: rgb(107 114 128 / 0.3);
}
.bg-gray-500\\/35 {
  background-color: rgb(107 114 128 / 0.35);
}
.bg-gray-500\\/40 {
  background-color: rgb(107 114 128 / 0.4);
}
.bg-gray-500\\/45 {
  background-color: rgb(107 114 128 / 0.45);
}
.bg-gray-500\\/5 {
  background-color: rgb(107 114 128 / 0.05);
}
.bg-gray-500\\/50 {
  background-color: rgb(107 114 128 / 0.5);
}
.bg-gray-500\\/55 {
  background-color: rgb(107 114 128 / 0.55);
}
.bg-gray-500\\/60 {
  background-color: rgb(107 114 128 / 0.6);
}
.bg-gray-500\\/65 {
  background-color: rgb(107 114 128 / 0.65);
}
.bg-gray-500\\/70 {
  background-color: rgb(107 114 128 / 0.7);
}
.bg-gray-500\\/75 {
  background-color: rgb(107 114 128 / 0.75);
}
.bg-gray-500\\/80 {
  background-color: rgb(107 114 128 / 0.8);
}
.bg-gray-500\\/85 {
  background-color: rgb(107 114 128 / 0.85);
}
.bg-gray-500\\/90 {
  background-color: rgb(107 114 128 / 0.9);
}
.bg-gray-500\\/95 {
  background-color: rgb(107 114 128 / 0.95);
}
.bg-gray-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(75 85 99 / var(--tw-bg-opacity));
}
.bg-gray-600\\/0 {
  background-color: rgb(75 85 99 / 0);
}
.bg-gray-600\\/10 {
  background-color: rgb(75 85 99 / 0.1);
}
.bg-gray-600\\/100 {
  background-color: rgb(75 85 99 / 1);
}
.bg-gray-600\\/15 {
  background-color: rgb(75 85 99 / 0.15);
}
.bg-gray-600\\/20 {
  background-color: rgb(75 85 99 / 0.2);
}
.bg-gray-600\\/25 {
  background-color: rgb(75 85 99 / 0.25);
}
.bg-gray-600\\/30 {
  background-color: rgb(75 85 99 / 0.3);
}
.bg-gray-600\\/35 {
  background-color: rgb(75 85 99 / 0.35);
}
.bg-gray-600\\/40 {
  background-color: rgb(75 85 99 / 0.4);
}
.bg-gray-600\\/45 {
  background-color: rgb(75 85 99 / 0.45);
}
.bg-gray-600\\/5 {
  background-color: rgb(75 85 99 / 0.05);
}
.bg-gray-600\\/50 {
  background-color: rgb(75 85 99 / 0.5);
}
.bg-gray-600\\/55 {
  background-color: rgb(75 85 99 / 0.55);
}
.bg-gray-600\\/60 {
  background-color: rgb(75 85 99 / 0.6);
}
.bg-gray-600\\/65 {
  background-color: rgb(75 85 99 / 0.65);
}
.bg-gray-600\\/70 {
  background-color: rgb(75 85 99 / 0.7);
}
.bg-gray-600\\/75 {
  background-color: rgb(75 85 99 / 0.75);
}
.bg-gray-600\\/80 {
  background-color: rgb(75 85 99 / 0.8);
}
.bg-gray-600\\/85 {
  background-color: rgb(75 85 99 / 0.85);
}
.bg-gray-600\\/90 {
  background-color: rgb(75 85 99 / 0.9);
}
.bg-gray-600\\/95 {
  background-color: rgb(75 85 99 / 0.95);
}
.bg-gray-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}
.bg-gray-700\\/0 {
  background-color: rgb(55 65 81 / 0);
}
.bg-gray-700\\/10 {
  background-color: rgb(55 65 81 / 0.1);
}
.bg-gray-700\\/100 {
  background-color: rgb(55 65 81 / 1);
}
.bg-gray-700\\/15 {
  background-color: rgb(55 65 81 / 0.15);
}
.bg-gray-700\\/20 {
  background-color: rgb(55 65 81 / 0.2);
}
.bg-gray-700\\/25 {
  background-color: rgb(55 65 81 / 0.25);
}
.bg-gray-700\\/30 {
  background-color: rgb(55 65 81 / 0.3);
}
.bg-gray-700\\/35 {
  background-color: rgb(55 65 81 / 0.35);
}
.bg-gray-700\\/40 {
  background-color: rgb(55 65 81 / 0.4);
}
.bg-gray-700\\/45 {
  background-color: rgb(55 65 81 / 0.45);
}
.bg-gray-700\\/5 {
  background-color: rgb(55 65 81 / 0.05);
}
.bg-gray-700\\/50 {
  background-color: rgb(55 65 81 / 0.5);
}
.bg-gray-700\\/55 {
  background-color: rgb(55 65 81 / 0.55);
}
.bg-gray-700\\/60 {
  background-color: rgb(55 65 81 / 0.6);
}
.bg-gray-700\\/65 {
  background-color: rgb(55 65 81 / 0.65);
}
.bg-gray-700\\/70 {
  background-color: rgb(55 65 81 / 0.7);
}
.bg-gray-700\\/75 {
  background-color: rgb(55 65 81 / 0.75);
}
.bg-gray-700\\/80 {
  background-color: rgb(55 65 81 / 0.8);
}
.bg-gray-700\\/85 {
  background-color: rgb(55 65 81 / 0.85);
}
.bg-gray-700\\/90 {
  background-color: rgb(55 65 81 / 0.9);
}
.bg-gray-700\\/95 {
  background-color: rgb(55 65 81 / 0.95);
}
.bg-gray-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
.bg-gray-800\\/0 {
  background-color: rgb(31 41 55 / 0);
}
.bg-gray-800\\/10 {
  background-color: rgb(31 41 55 / 0.1);
}
.bg-gray-800\\/100 {
  background-color: rgb(31 41 55 / 1);
}
.bg-gray-800\\/15 {
  background-color: rgb(31 41 55 / 0.15);
}
.bg-gray-800\\/20 {
  background-color: rgb(31 41 55 / 0.2);
}
.bg-gray-800\\/25 {
  background-color: rgb(31 41 55 / 0.25);
}
.bg-gray-800\\/30 {
  background-color: rgb(31 41 55 / 0.3);
}
.bg-gray-800\\/35 {
  background-color: rgb(31 41 55 / 0.35);
}
.bg-gray-800\\/40 {
  background-color: rgb(31 41 55 / 0.4);
}
.bg-gray-800\\/45 {
  background-color: rgb(31 41 55 / 0.45);
}
.bg-gray-800\\/5 {
  background-color: rgb(31 41 55 / 0.05);
}
.bg-gray-800\\/50 {
  background-color: rgb(31 41 55 / 0.5);
}
.bg-gray-800\\/55 {
  background-color: rgb(31 41 55 / 0.55);
}
.bg-gray-800\\/60 {
  background-color: rgb(31 41 55 / 0.6);
}
.bg-gray-800\\/65 {
  background-color: rgb(31 41 55 / 0.65);
}
.bg-gray-800\\/70 {
  background-color: rgb(31 41 55 / 0.7);
}
.bg-gray-800\\/75 {
  background-color: rgb(31 41 55 / 0.75);
}
.bg-gray-800\\/80 {
  background-color: rgb(31 41 55 / 0.8);
}
.bg-gray-800\\/85 {
  background-color: rgb(31 41 55 / 0.85);
}
.bg-gray-800\\/90 {
  background-color: rgb(31 41 55 / 0.9);
}
.bg-gray-800\\/95 {
  background-color: rgb(31 41 55 / 0.95);
}
.bg-gray-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
}
.bg-gray-900\\/0 {
  background-color: rgb(17 24 39 / 0);
}
.bg-gray-900\\/10 {
  background-color: rgb(17 24 39 / 0.1);
}
.bg-gray-900\\/100 {
  background-color: rgb(17 24 39 / 1);
}
.bg-gray-900\\/15 {
  background-color: rgb(17 24 39 / 0.15);
}
.bg-gray-900\\/20 {
  background-color: rgb(17 24 39 / 0.2);
}
.bg-gray-900\\/25 {
  background-color: rgb(17 24 39 / 0.25);
}
.bg-gray-900\\/30 {
  background-color: rgb(17 24 39 / 0.3);
}
.bg-gray-900\\/35 {
  background-color: rgb(17 24 39 / 0.35);
}
.bg-gray-900\\/40 {
  background-color: rgb(17 24 39 / 0.4);
}
.bg-gray-900\\/45 {
  background-color: rgb(17 24 39 / 0.45);
}
.bg-gray-900\\/5 {
  background-color: rgb(17 24 39 / 0.05);
}
.bg-gray-900\\/50 {
  background-color: rgb(17 24 39 / 0.5);
}
.bg-gray-900\\/55 {
  background-color: rgb(17 24 39 / 0.55);
}
.bg-gray-900\\/60 {
  background-color: rgb(17 24 39 / 0.6);
}
.bg-gray-900\\/65 {
  background-color: rgb(17 24 39 / 0.65);
}
.bg-gray-900\\/70 {
  background-color: rgb(17 24 39 / 0.7);
}
.bg-gray-900\\/75 {
  background-color: rgb(17 24 39 / 0.75);
}
.bg-gray-900\\/80 {
  background-color: rgb(17 24 39 / 0.8);
}
.bg-gray-900\\/85 {
  background-color: rgb(17 24 39 / 0.85);
}
.bg-gray-900\\/90 {
  background-color: rgb(17 24 39 / 0.9);
}
.bg-gray-900\\/95 {
  background-color: rgb(17 24 39 / 0.95);
}
.bg-gray-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(3 7 18 / var(--tw-bg-opacity));
}
.bg-gray-950\\/0 {
  background-color: rgb(3 7 18 / 0);
}
.bg-gray-950\\/10 {
  background-color: rgb(3 7 18 / 0.1);
}
.bg-gray-950\\/100 {
  background-color: rgb(3 7 18 / 1);
}
.bg-gray-950\\/15 {
  background-color: rgb(3 7 18 / 0.15);
}
.bg-gray-950\\/20 {
  background-color: rgb(3 7 18 / 0.2);
}
.bg-gray-950\\/25 {
  background-color: rgb(3 7 18 / 0.25);
}
.bg-gray-950\\/30 {
  background-color: rgb(3 7 18 / 0.3);
}
.bg-gray-950\\/35 {
  background-color: rgb(3 7 18 / 0.35);
}
.bg-gray-950\\/40 {
  background-color: rgb(3 7 18 / 0.4);
}
.bg-gray-950\\/45 {
  background-color: rgb(3 7 18 / 0.45);
}
.bg-gray-950\\/5 {
  background-color: rgb(3 7 18 / 0.05);
}
.bg-gray-950\\/50 {
  background-color: rgb(3 7 18 / 0.5);
}
.bg-gray-950\\/55 {
  background-color: rgb(3 7 18 / 0.55);
}
.bg-gray-950\\/60 {
  background-color: rgb(3 7 18 / 0.6);
}
.bg-gray-950\\/65 {
  background-color: rgb(3 7 18 / 0.65);
}
.bg-gray-950\\/70 {
  background-color: rgb(3 7 18 / 0.7);
}
.bg-gray-950\\/75 {
  background-color: rgb(3 7 18 / 0.75);
}
.bg-gray-950\\/80 {
  background-color: rgb(3 7 18 / 0.8);
}
.bg-gray-950\\/85 {
  background-color: rgb(3 7 18 / 0.85);
}
.bg-gray-950\\/90 {
  background-color: rgb(3 7 18 / 0.9);
}
.bg-gray-950\\/95 {
  background-color: rgb(3 7 18 / 0.95);
}
.bg-green-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(220 252 231 / var(--tw-bg-opacity));
}
.bg-green-100\\/0 {
  background-color: rgb(220 252 231 / 0);
}
.bg-green-100\\/10 {
  background-color: rgb(220 252 231 / 0.1);
}
.bg-green-100\\/100 {
  background-color: rgb(220 252 231 / 1);
}
.bg-green-100\\/15 {
  background-color: rgb(220 252 231 / 0.15);
}
.bg-green-100\\/20 {
  background-color: rgb(220 252 231 / 0.2);
}
.bg-green-100\\/25 {
  background-color: rgb(220 252 231 / 0.25);
}
.bg-green-100\\/30 {
  background-color: rgb(220 252 231 / 0.3);
}
.bg-green-100\\/35 {
  background-color: rgb(220 252 231 / 0.35);
}
.bg-green-100\\/40 {
  background-color: rgb(220 252 231 / 0.4);
}
.bg-green-100\\/45 {
  background-color: rgb(220 252 231 / 0.45);
}
.bg-green-100\\/5 {
  background-color: rgb(220 252 231 / 0.05);
}
.bg-green-100\\/50 {
  background-color: rgb(220 252 231 / 0.5);
}
.bg-green-100\\/55 {
  background-color: rgb(220 252 231 / 0.55);
}
.bg-green-100\\/60 {
  background-color: rgb(220 252 231 / 0.6);
}
.bg-green-100\\/65 {
  background-color: rgb(220 252 231 / 0.65);
}
.bg-green-100\\/70 {
  background-color: rgb(220 252 231 / 0.7);
}
.bg-green-100\\/75 {
  background-color: rgb(220 252 231 / 0.75);
}
.bg-green-100\\/80 {
  background-color: rgb(220 252 231 / 0.8);
}
.bg-green-100\\/85 {
  background-color: rgb(220 252 231 / 0.85);
}
.bg-green-100\\/90 {
  background-color: rgb(220 252 231 / 0.9);
}
.bg-green-100\\/95 {
  background-color: rgb(220 252 231 / 0.95);
}
.bg-green-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(187 247 208 / var(--tw-bg-opacity));
}
.bg-green-200\\/0 {
  background-color: rgb(187 247 208 / 0);
}
.bg-green-200\\/10 {
  background-color: rgb(187 247 208 / 0.1);
}
.bg-green-200\\/100 {
  background-color: rgb(187 247 208 / 1);
}
.bg-green-200\\/15 {
  background-color: rgb(187 247 208 / 0.15);
}
.bg-green-200\\/20 {
  background-color: rgb(187 247 208 / 0.2);
}
.bg-green-200\\/25 {
  background-color: rgb(187 247 208 / 0.25);
}
.bg-green-200\\/30 {
  background-color: rgb(187 247 208 / 0.3);
}
.bg-green-200\\/35 {
  background-color: rgb(187 247 208 / 0.35);
}
.bg-green-200\\/40 {
  background-color: rgb(187 247 208 / 0.4);
}
.bg-green-200\\/45 {
  background-color: rgb(187 247 208 / 0.45);
}
.bg-green-200\\/5 {
  background-color: rgb(187 247 208 / 0.05);
}
.bg-green-200\\/50 {
  background-color: rgb(187 247 208 / 0.5);
}
.bg-green-200\\/55 {
  background-color: rgb(187 247 208 / 0.55);
}
.bg-green-200\\/60 {
  background-color: rgb(187 247 208 / 0.6);
}
.bg-green-200\\/65 {
  background-color: rgb(187 247 208 / 0.65);
}
.bg-green-200\\/70 {
  background-color: rgb(187 247 208 / 0.7);
}
.bg-green-200\\/75 {
  background-color: rgb(187 247 208 / 0.75);
}
.bg-green-200\\/80 {
  background-color: rgb(187 247 208 / 0.8);
}
.bg-green-200\\/85 {
  background-color: rgb(187 247 208 / 0.85);
}
.bg-green-200\\/90 {
  background-color: rgb(187 247 208 / 0.9);
}
.bg-green-200\\/95 {
  background-color: rgb(187 247 208 / 0.95);
}
.bg-green-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(134 239 172 / var(--tw-bg-opacity));
}
.bg-green-300\\/0 {
  background-color: rgb(134 239 172 / 0);
}
.bg-green-300\\/10 {
  background-color: rgb(134 239 172 / 0.1);
}
.bg-green-300\\/100 {
  background-color: rgb(134 239 172 / 1);
}
.bg-green-300\\/15 {
  background-color: rgb(134 239 172 / 0.15);
}
.bg-green-300\\/20 {
  background-color: rgb(134 239 172 / 0.2);
}
.bg-green-300\\/25 {
  background-color: rgb(134 239 172 / 0.25);
}
.bg-green-300\\/30 {
  background-color: rgb(134 239 172 / 0.3);
}
.bg-green-300\\/35 {
  background-color: rgb(134 239 172 / 0.35);
}
.bg-green-300\\/40 {
  background-color: rgb(134 239 172 / 0.4);
}
.bg-green-300\\/45 {
  background-color: rgb(134 239 172 / 0.45);
}
.bg-green-300\\/5 {
  background-color: rgb(134 239 172 / 0.05);
}
.bg-green-300\\/50 {
  background-color: rgb(134 239 172 / 0.5);
}
.bg-green-300\\/55 {
  background-color: rgb(134 239 172 / 0.55);
}
.bg-green-300\\/60 {
  background-color: rgb(134 239 172 / 0.6);
}
.bg-green-300\\/65 {
  background-color: rgb(134 239 172 / 0.65);
}
.bg-green-300\\/70 {
  background-color: rgb(134 239 172 / 0.7);
}
.bg-green-300\\/75 {
  background-color: rgb(134 239 172 / 0.75);
}
.bg-green-300\\/80 {
  background-color: rgb(134 239 172 / 0.8);
}
.bg-green-300\\/85 {
  background-color: rgb(134 239 172 / 0.85);
}
.bg-green-300\\/90 {
  background-color: rgb(134 239 172 / 0.9);
}
.bg-green-300\\/95 {
  background-color: rgb(134 239 172 / 0.95);
}
.bg-green-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(74 222 128 / var(--tw-bg-opacity));
}
.bg-green-400\\/0 {
  background-color: rgb(74 222 128 / 0);
}
.bg-green-400\\/10 {
  background-color: rgb(74 222 128 / 0.1);
}
.bg-green-400\\/100 {
  background-color: rgb(74 222 128 / 1);
}
.bg-green-400\\/15 {
  background-color: rgb(74 222 128 / 0.15);
}
.bg-green-400\\/20 {
  background-color: rgb(74 222 128 / 0.2);
}
.bg-green-400\\/25 {
  background-color: rgb(74 222 128 / 0.25);
}
.bg-green-400\\/30 {
  background-color: rgb(74 222 128 / 0.3);
}
.bg-green-400\\/35 {
  background-color: rgb(74 222 128 / 0.35);
}
.bg-green-400\\/40 {
  background-color: rgb(74 222 128 / 0.4);
}
.bg-green-400\\/45 {
  background-color: rgb(74 222 128 / 0.45);
}
.bg-green-400\\/5 {
  background-color: rgb(74 222 128 / 0.05);
}
.bg-green-400\\/50 {
  background-color: rgb(74 222 128 / 0.5);
}
.bg-green-400\\/55 {
  background-color: rgb(74 222 128 / 0.55);
}
.bg-green-400\\/60 {
  background-color: rgb(74 222 128 / 0.6);
}
.bg-green-400\\/65 {
  background-color: rgb(74 222 128 / 0.65);
}
.bg-green-400\\/70 {
  background-color: rgb(74 222 128 / 0.7);
}
.bg-green-400\\/75 {
  background-color: rgb(74 222 128 / 0.75);
}
.bg-green-400\\/80 {
  background-color: rgb(74 222 128 / 0.8);
}
.bg-green-400\\/85 {
  background-color: rgb(74 222 128 / 0.85);
}
.bg-green-400\\/90 {
  background-color: rgb(74 222 128 / 0.9);
}
.bg-green-400\\/95 {
  background-color: rgb(74 222 128 / 0.95);
}
.bg-green-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(240 253 244 / var(--tw-bg-opacity));
}
.bg-green-50\\/0 {
  background-color: rgb(240 253 244 / 0);
}
.bg-green-50\\/10 {
  background-color: rgb(240 253 244 / 0.1);
}
.bg-green-50\\/100 {
  background-color: rgb(240 253 244 / 1);
}
.bg-green-50\\/15 {
  background-color: rgb(240 253 244 / 0.15);
}
.bg-green-50\\/20 {
  background-color: rgb(240 253 244 / 0.2);
}
.bg-green-50\\/25 {
  background-color: rgb(240 253 244 / 0.25);
}
.bg-green-50\\/30 {
  background-color: rgb(240 253 244 / 0.3);
}
.bg-green-50\\/35 {
  background-color: rgb(240 253 244 / 0.35);
}
.bg-green-50\\/40 {
  background-color: rgb(240 253 244 / 0.4);
}
.bg-green-50\\/45 {
  background-color: rgb(240 253 244 / 0.45);
}
.bg-green-50\\/5 {
  background-color: rgb(240 253 244 / 0.05);
}
.bg-green-50\\/50 {
  background-color: rgb(240 253 244 / 0.5);
}
.bg-green-50\\/55 {
  background-color: rgb(240 253 244 / 0.55);
}
.bg-green-50\\/60 {
  background-color: rgb(240 253 244 / 0.6);
}
.bg-green-50\\/65 {
  background-color: rgb(240 253 244 / 0.65);
}
.bg-green-50\\/70 {
  background-color: rgb(240 253 244 / 0.7);
}
.bg-green-50\\/75 {
  background-color: rgb(240 253 244 / 0.75);
}
.bg-green-50\\/80 {
  background-color: rgb(240 253 244 / 0.8);
}
.bg-green-50\\/85 {
  background-color: rgb(240 253 244 / 0.85);
}
.bg-green-50\\/90 {
  background-color: rgb(240 253 244 / 0.9);
}
.bg-green-50\\/95 {
  background-color: rgb(240 253 244 / 0.95);
}
.bg-green-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(34 197 94 / var(--tw-bg-opacity));
}
.bg-green-500\\/0 {
  background-color: rgb(34 197 94 / 0);
}
.bg-green-500\\/10 {
  background-color: rgb(34 197 94 / 0.1);
}
.bg-green-500\\/100 {
  background-color: rgb(34 197 94 / 1);
}
.bg-green-500\\/15 {
  background-color: rgb(34 197 94 / 0.15);
}
.bg-green-500\\/20 {
  background-color: rgb(34 197 94 / 0.2);
}
.bg-green-500\\/25 {
  background-color: rgb(34 197 94 / 0.25);
}
.bg-green-500\\/30 {
  background-color: rgb(34 197 94 / 0.3);
}
.bg-green-500\\/35 {
  background-color: rgb(34 197 94 / 0.35);
}
.bg-green-500\\/40 {
  background-color: rgb(34 197 94 / 0.4);
}
.bg-green-500\\/45 {
  background-color: rgb(34 197 94 / 0.45);
}
.bg-green-500\\/5 {
  background-color: rgb(34 197 94 / 0.05);
}
.bg-green-500\\/50 {
  background-color: rgb(34 197 94 / 0.5);
}
.bg-green-500\\/55 {
  background-color: rgb(34 197 94 / 0.55);
}
.bg-green-500\\/60 {
  background-color: rgb(34 197 94 / 0.6);
}
.bg-green-500\\/65 {
  background-color: rgb(34 197 94 / 0.65);
}
.bg-green-500\\/70 {
  background-color: rgb(34 197 94 / 0.7);
}
.bg-green-500\\/75 {
  background-color: rgb(34 197 94 / 0.75);
}
.bg-green-500\\/80 {
  background-color: rgb(34 197 94 / 0.8);
}
.bg-green-500\\/85 {
  background-color: rgb(34 197 94 / 0.85);
}
.bg-green-500\\/90 {
  background-color: rgb(34 197 94 / 0.9);
}
.bg-green-500\\/95 {
  background-color: rgb(34 197 94 / 0.95);
}
.bg-green-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(22 163 74 / var(--tw-bg-opacity));
}
.bg-green-600\\/0 {
  background-color: rgb(22 163 74 / 0);
}
.bg-green-600\\/10 {
  background-color: rgb(22 163 74 / 0.1);
}
.bg-green-600\\/100 {
  background-color: rgb(22 163 74 / 1);
}
.bg-green-600\\/15 {
  background-color: rgb(22 163 74 / 0.15);
}
.bg-green-600\\/20 {
  background-color: rgb(22 163 74 / 0.2);
}
.bg-green-600\\/25 {
  background-color: rgb(22 163 74 / 0.25);
}
.bg-green-600\\/30 {
  background-color: rgb(22 163 74 / 0.3);
}
.bg-green-600\\/35 {
  background-color: rgb(22 163 74 / 0.35);
}
.bg-green-600\\/40 {
  background-color: rgb(22 163 74 / 0.4);
}
.bg-green-600\\/45 {
  background-color: rgb(22 163 74 / 0.45);
}
.bg-green-600\\/5 {
  background-color: rgb(22 163 74 / 0.05);
}
.bg-green-600\\/50 {
  background-color: rgb(22 163 74 / 0.5);
}
.bg-green-600\\/55 {
  background-color: rgb(22 163 74 / 0.55);
}
.bg-green-600\\/60 {
  background-color: rgb(22 163 74 / 0.6);
}
.bg-green-600\\/65 {
  background-color: rgb(22 163 74 / 0.65);
}
.bg-green-600\\/70 {
  background-color: rgb(22 163 74 / 0.7);
}
.bg-green-600\\/75 {
  background-color: rgb(22 163 74 / 0.75);
}
.bg-green-600\\/80 {
  background-color: rgb(22 163 74 / 0.8);
}
.bg-green-600\\/85 {
  background-color: rgb(22 163 74 / 0.85);
}
.bg-green-600\\/90 {
  background-color: rgb(22 163 74 / 0.9);
}
.bg-green-600\\/95 {
  background-color: rgb(22 163 74 / 0.95);
}
.bg-green-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(21 128 61 / var(--tw-bg-opacity));
}
.bg-green-700\\/0 {
  background-color: rgb(21 128 61 / 0);
}
.bg-green-700\\/10 {
  background-color: rgb(21 128 61 / 0.1);
}
.bg-green-700\\/100 {
  background-color: rgb(21 128 61 / 1);
}
.bg-green-700\\/15 {
  background-color: rgb(21 128 61 / 0.15);
}
.bg-green-700\\/20 {
  background-color: rgb(21 128 61 / 0.2);
}
.bg-green-700\\/25 {
  background-color: rgb(21 128 61 / 0.25);
}
.bg-green-700\\/30 {
  background-color: rgb(21 128 61 / 0.3);
}
.bg-green-700\\/35 {
  background-color: rgb(21 128 61 / 0.35);
}
.bg-green-700\\/40 {
  background-color: rgb(21 128 61 / 0.4);
}
.bg-green-700\\/45 {
  background-color: rgb(21 128 61 / 0.45);
}
.bg-green-700\\/5 {
  background-color: rgb(21 128 61 / 0.05);
}
.bg-green-700\\/50 {
  background-color: rgb(21 128 61 / 0.5);
}
.bg-green-700\\/55 {
  background-color: rgb(21 128 61 / 0.55);
}
.bg-green-700\\/60 {
  background-color: rgb(21 128 61 / 0.6);
}
.bg-green-700\\/65 {
  background-color: rgb(21 128 61 / 0.65);
}
.bg-green-700\\/70 {
  background-color: rgb(21 128 61 / 0.7);
}
.bg-green-700\\/75 {
  background-color: rgb(21 128 61 / 0.75);
}
.bg-green-700\\/80 {
  background-color: rgb(21 128 61 / 0.8);
}
.bg-green-700\\/85 {
  background-color: rgb(21 128 61 / 0.85);
}
.bg-green-700\\/90 {
  background-color: rgb(21 128 61 / 0.9);
}
.bg-green-700\\/95 {
  background-color: rgb(21 128 61 / 0.95);
}
.bg-green-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(22 101 52 / var(--tw-bg-opacity));
}
.bg-green-800\\/0 {
  background-color: rgb(22 101 52 / 0);
}
.bg-green-800\\/10 {
  background-color: rgb(22 101 52 / 0.1);
}
.bg-green-800\\/100 {
  background-color: rgb(22 101 52 / 1);
}
.bg-green-800\\/15 {
  background-color: rgb(22 101 52 / 0.15);
}
.bg-green-800\\/20 {
  background-color: rgb(22 101 52 / 0.2);
}
.bg-green-800\\/25 {
  background-color: rgb(22 101 52 / 0.25);
}
.bg-green-800\\/30 {
  background-color: rgb(22 101 52 / 0.3);
}
.bg-green-800\\/35 {
  background-color: rgb(22 101 52 / 0.35);
}
.bg-green-800\\/40 {
  background-color: rgb(22 101 52 / 0.4);
}
.bg-green-800\\/45 {
  background-color: rgb(22 101 52 / 0.45);
}
.bg-green-800\\/5 {
  background-color: rgb(22 101 52 / 0.05);
}
.bg-green-800\\/50 {
  background-color: rgb(22 101 52 / 0.5);
}
.bg-green-800\\/55 {
  background-color: rgb(22 101 52 / 0.55);
}
.bg-green-800\\/60 {
  background-color: rgb(22 101 52 / 0.6);
}
.bg-green-800\\/65 {
  background-color: rgb(22 101 52 / 0.65);
}
.bg-green-800\\/70 {
  background-color: rgb(22 101 52 / 0.7);
}
.bg-green-800\\/75 {
  background-color: rgb(22 101 52 / 0.75);
}
.bg-green-800\\/80 {
  background-color: rgb(22 101 52 / 0.8);
}
.bg-green-800\\/85 {
  background-color: rgb(22 101 52 / 0.85);
}
.bg-green-800\\/90 {
  background-color: rgb(22 101 52 / 0.9);
}
.bg-green-800\\/95 {
  background-color: rgb(22 101 52 / 0.95);
}
.bg-green-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(20 83 45 / var(--tw-bg-opacity));
}
.bg-green-900\\/0 {
  background-color: rgb(20 83 45 / 0);
}
.bg-green-900\\/10 {
  background-color: rgb(20 83 45 / 0.1);
}
.bg-green-900\\/100 {
  background-color: rgb(20 83 45 / 1);
}
.bg-green-900\\/15 {
  background-color: rgb(20 83 45 / 0.15);
}
.bg-green-900\\/20 {
  background-color: rgb(20 83 45 / 0.2);
}
.bg-green-900\\/25 {
  background-color: rgb(20 83 45 / 0.25);
}
.bg-green-900\\/30 {
  background-color: rgb(20 83 45 / 0.3);
}
.bg-green-900\\/35 {
  background-color: rgb(20 83 45 / 0.35);
}
.bg-green-900\\/40 {
  background-color: rgb(20 83 45 / 0.4);
}
.bg-green-900\\/45 {
  background-color: rgb(20 83 45 / 0.45);
}
.bg-green-900\\/5 {
  background-color: rgb(20 83 45 / 0.05);
}
.bg-green-900\\/50 {
  background-color: rgb(20 83 45 / 0.5);
}
.bg-green-900\\/55 {
  background-color: rgb(20 83 45 / 0.55);
}
.bg-green-900\\/60 {
  background-color: rgb(20 83 45 / 0.6);
}
.bg-green-900\\/65 {
  background-color: rgb(20 83 45 / 0.65);
}
.bg-green-900\\/70 {
  background-color: rgb(20 83 45 / 0.7);
}
.bg-green-900\\/75 {
  background-color: rgb(20 83 45 / 0.75);
}
.bg-green-900\\/80 {
  background-color: rgb(20 83 45 / 0.8);
}
.bg-green-900\\/85 {
  background-color: rgb(20 83 45 / 0.85);
}
.bg-green-900\\/90 {
  background-color: rgb(20 83 45 / 0.9);
}
.bg-green-900\\/95 {
  background-color: rgb(20 83 45 / 0.95);
}
.bg-green-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(5 46 22 / var(--tw-bg-opacity));
}
.bg-green-950\\/0 {
  background-color: rgb(5 46 22 / 0);
}
.bg-green-950\\/10 {
  background-color: rgb(5 46 22 / 0.1);
}
.bg-green-950\\/100 {
  background-color: rgb(5 46 22 / 1);
}
.bg-green-950\\/15 {
  background-color: rgb(5 46 22 / 0.15);
}
.bg-green-950\\/20 {
  background-color: rgb(5 46 22 / 0.2);
}
.bg-green-950\\/25 {
  background-color: rgb(5 46 22 / 0.25);
}
.bg-green-950\\/30 {
  background-color: rgb(5 46 22 / 0.3);
}
.bg-green-950\\/35 {
  background-color: rgb(5 46 22 / 0.35);
}
.bg-green-950\\/40 {
  background-color: rgb(5 46 22 / 0.4);
}
.bg-green-950\\/45 {
  background-color: rgb(5 46 22 / 0.45);
}
.bg-green-950\\/5 {
  background-color: rgb(5 46 22 / 0.05);
}
.bg-green-950\\/50 {
  background-color: rgb(5 46 22 / 0.5);
}
.bg-green-950\\/55 {
  background-color: rgb(5 46 22 / 0.55);
}
.bg-green-950\\/60 {
  background-color: rgb(5 46 22 / 0.6);
}
.bg-green-950\\/65 {
  background-color: rgb(5 46 22 / 0.65);
}
.bg-green-950\\/70 {
  background-color: rgb(5 46 22 / 0.7);
}
.bg-green-950\\/75 {
  background-color: rgb(5 46 22 / 0.75);
}
.bg-green-950\\/80 {
  background-color: rgb(5 46 22 / 0.8);
}
.bg-green-950\\/85 {
  background-color: rgb(5 46 22 / 0.85);
}
.bg-green-950\\/90 {
  background-color: rgb(5 46 22 / 0.9);
}
.bg-green-950\\/95 {
  background-color: rgb(5 46 22 / 0.95);
}
.bg-indigo-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(224 231 255 / var(--tw-bg-opacity));
}
.bg-indigo-100\\/0 {
  background-color: rgb(224 231 255 / 0);
}
.bg-indigo-100\\/10 {
  background-color: rgb(224 231 255 / 0.1);
}
.bg-indigo-100\\/100 {
  background-color: rgb(224 231 255 / 1);
}
.bg-indigo-100\\/15 {
  background-color: rgb(224 231 255 / 0.15);
}
.bg-indigo-100\\/20 {
  background-color: rgb(224 231 255 / 0.2);
}
.bg-indigo-100\\/25 {
  background-color: rgb(224 231 255 / 0.25);
}
.bg-indigo-100\\/30 {
  background-color: rgb(224 231 255 / 0.3);
}
.bg-indigo-100\\/35 {
  background-color: rgb(224 231 255 / 0.35);
}
.bg-indigo-100\\/40 {
  background-color: rgb(224 231 255 / 0.4);
}
.bg-indigo-100\\/45 {
  background-color: rgb(224 231 255 / 0.45);
}
.bg-indigo-100\\/5 {
  background-color: rgb(224 231 255 / 0.05);
}
.bg-indigo-100\\/50 {
  background-color: rgb(224 231 255 / 0.5);
}
.bg-indigo-100\\/55 {
  background-color: rgb(224 231 255 / 0.55);
}
.bg-indigo-100\\/60 {
  background-color: rgb(224 231 255 / 0.6);
}
.bg-indigo-100\\/65 {
  background-color: rgb(224 231 255 / 0.65);
}
.bg-indigo-100\\/70 {
  background-color: rgb(224 231 255 / 0.7);
}
.bg-indigo-100\\/75 {
  background-color: rgb(224 231 255 / 0.75);
}
.bg-indigo-100\\/80 {
  background-color: rgb(224 231 255 / 0.8);
}
.bg-indigo-100\\/85 {
  background-color: rgb(224 231 255 / 0.85);
}
.bg-indigo-100\\/90 {
  background-color: rgb(224 231 255 / 0.9);
}
.bg-indigo-100\\/95 {
  background-color: rgb(224 231 255 / 0.95);
}
.bg-indigo-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(199 210 254 / var(--tw-bg-opacity));
}
.bg-indigo-200\\/0 {
  background-color: rgb(199 210 254 / 0);
}
.bg-indigo-200\\/10 {
  background-color: rgb(199 210 254 / 0.1);
}
.bg-indigo-200\\/100 {
  background-color: rgb(199 210 254 / 1);
}
.bg-indigo-200\\/15 {
  background-color: rgb(199 210 254 / 0.15);
}
.bg-indigo-200\\/20 {
  background-color: rgb(199 210 254 / 0.2);
}
.bg-indigo-200\\/25 {
  background-color: rgb(199 210 254 / 0.25);
}
.bg-indigo-200\\/30 {
  background-color: rgb(199 210 254 / 0.3);
}
.bg-indigo-200\\/35 {
  background-color: rgb(199 210 254 / 0.35);
}
.bg-indigo-200\\/40 {
  background-color: rgb(199 210 254 / 0.4);
}
.bg-indigo-200\\/45 {
  background-color: rgb(199 210 254 / 0.45);
}
.bg-indigo-200\\/5 {
  background-color: rgb(199 210 254 / 0.05);
}
.bg-indigo-200\\/50 {
  background-color: rgb(199 210 254 / 0.5);
}
.bg-indigo-200\\/55 {
  background-color: rgb(199 210 254 / 0.55);
}
.bg-indigo-200\\/60 {
  background-color: rgb(199 210 254 / 0.6);
}
.bg-indigo-200\\/65 {
  background-color: rgb(199 210 254 / 0.65);
}
.bg-indigo-200\\/70 {
  background-color: rgb(199 210 254 / 0.7);
}
.bg-indigo-200\\/75 {
  background-color: rgb(199 210 254 / 0.75);
}
.bg-indigo-200\\/80 {
  background-color: rgb(199 210 254 / 0.8);
}
.bg-indigo-200\\/85 {
  background-color: rgb(199 210 254 / 0.85);
}
.bg-indigo-200\\/90 {
  background-color: rgb(199 210 254 / 0.9);
}
.bg-indigo-200\\/95 {
  background-color: rgb(199 210 254 / 0.95);
}
.bg-indigo-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(165 180 252 / var(--tw-bg-opacity));
}
.bg-indigo-300\\/0 {
  background-color: rgb(165 180 252 / 0);
}
.bg-indigo-300\\/10 {
  background-color: rgb(165 180 252 / 0.1);
}
.bg-indigo-300\\/100 {
  background-color: rgb(165 180 252 / 1);
}
.bg-indigo-300\\/15 {
  background-color: rgb(165 180 252 / 0.15);
}
.bg-indigo-300\\/20 {
  background-color: rgb(165 180 252 / 0.2);
}
.bg-indigo-300\\/25 {
  background-color: rgb(165 180 252 / 0.25);
}
.bg-indigo-300\\/30 {
  background-color: rgb(165 180 252 / 0.3);
}
.bg-indigo-300\\/35 {
  background-color: rgb(165 180 252 / 0.35);
}
.bg-indigo-300\\/40 {
  background-color: rgb(165 180 252 / 0.4);
}
.bg-indigo-300\\/45 {
  background-color: rgb(165 180 252 / 0.45);
}
.bg-indigo-300\\/5 {
  background-color: rgb(165 180 252 / 0.05);
}
.bg-indigo-300\\/50 {
  background-color: rgb(165 180 252 / 0.5);
}
.bg-indigo-300\\/55 {
  background-color: rgb(165 180 252 / 0.55);
}
.bg-indigo-300\\/60 {
  background-color: rgb(165 180 252 / 0.6);
}
.bg-indigo-300\\/65 {
  background-color: rgb(165 180 252 / 0.65);
}
.bg-indigo-300\\/70 {
  background-color: rgb(165 180 252 / 0.7);
}
.bg-indigo-300\\/75 {
  background-color: rgb(165 180 252 / 0.75);
}
.bg-indigo-300\\/80 {
  background-color: rgb(165 180 252 / 0.8);
}
.bg-indigo-300\\/85 {
  background-color: rgb(165 180 252 / 0.85);
}
.bg-indigo-300\\/90 {
  background-color: rgb(165 180 252 / 0.9);
}
.bg-indigo-300\\/95 {
  background-color: rgb(165 180 252 / 0.95);
}
.bg-indigo-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(129 140 248 / var(--tw-bg-opacity));
}
.bg-indigo-400\\/0 {
  background-color: rgb(129 140 248 / 0);
}
.bg-indigo-400\\/10 {
  background-color: rgb(129 140 248 / 0.1);
}
.bg-indigo-400\\/100 {
  background-color: rgb(129 140 248 / 1);
}
.bg-indigo-400\\/15 {
  background-color: rgb(129 140 248 / 0.15);
}
.bg-indigo-400\\/20 {
  background-color: rgb(129 140 248 / 0.2);
}
.bg-indigo-400\\/25 {
  background-color: rgb(129 140 248 / 0.25);
}
.bg-indigo-400\\/30 {
  background-color: rgb(129 140 248 / 0.3);
}
.bg-indigo-400\\/35 {
  background-color: rgb(129 140 248 / 0.35);
}
.bg-indigo-400\\/40 {
  background-color: rgb(129 140 248 / 0.4);
}
.bg-indigo-400\\/45 {
  background-color: rgb(129 140 248 / 0.45);
}
.bg-indigo-400\\/5 {
  background-color: rgb(129 140 248 / 0.05);
}
.bg-indigo-400\\/50 {
  background-color: rgb(129 140 248 / 0.5);
}
.bg-indigo-400\\/55 {
  background-color: rgb(129 140 248 / 0.55);
}
.bg-indigo-400\\/60 {
  background-color: rgb(129 140 248 / 0.6);
}
.bg-indigo-400\\/65 {
  background-color: rgb(129 140 248 / 0.65);
}
.bg-indigo-400\\/70 {
  background-color: rgb(129 140 248 / 0.7);
}
.bg-indigo-400\\/75 {
  background-color: rgb(129 140 248 / 0.75);
}
.bg-indigo-400\\/80 {
  background-color: rgb(129 140 248 / 0.8);
}
.bg-indigo-400\\/85 {
  background-color: rgb(129 140 248 / 0.85);
}
.bg-indigo-400\\/90 {
  background-color: rgb(129 140 248 / 0.9);
}
.bg-indigo-400\\/95 {
  background-color: rgb(129 140 248 / 0.95);
}
.bg-indigo-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(238 242 255 / var(--tw-bg-opacity));
}
.bg-indigo-50\\/0 {
  background-color: rgb(238 242 255 / 0);
}
.bg-indigo-50\\/10 {
  background-color: rgb(238 242 255 / 0.1);
}
.bg-indigo-50\\/100 {
  background-color: rgb(238 242 255 / 1);
}
.bg-indigo-50\\/15 {
  background-color: rgb(238 242 255 / 0.15);
}
.bg-indigo-50\\/20 {
  background-color: rgb(238 242 255 / 0.2);
}
.bg-indigo-50\\/25 {
  background-color: rgb(238 242 255 / 0.25);
}
.bg-indigo-50\\/30 {
  background-color: rgb(238 242 255 / 0.3);
}
.bg-indigo-50\\/35 {
  background-color: rgb(238 242 255 / 0.35);
}
.bg-indigo-50\\/40 {
  background-color: rgb(238 242 255 / 0.4);
}
.bg-indigo-50\\/45 {
  background-color: rgb(238 242 255 / 0.45);
}
.bg-indigo-50\\/5 {
  background-color: rgb(238 242 255 / 0.05);
}
.bg-indigo-50\\/50 {
  background-color: rgb(238 242 255 / 0.5);
}
.bg-indigo-50\\/55 {
  background-color: rgb(238 242 255 / 0.55);
}
.bg-indigo-50\\/60 {
  background-color: rgb(238 242 255 / 0.6);
}
.bg-indigo-50\\/65 {
  background-color: rgb(238 242 255 / 0.65);
}
.bg-indigo-50\\/70 {
  background-color: rgb(238 242 255 / 0.7);
}
.bg-indigo-50\\/75 {
  background-color: rgb(238 242 255 / 0.75);
}
.bg-indigo-50\\/80 {
  background-color: rgb(238 242 255 / 0.8);
}
.bg-indigo-50\\/85 {
  background-color: rgb(238 242 255 / 0.85);
}
.bg-indigo-50\\/90 {
  background-color: rgb(238 242 255 / 0.9);
}
.bg-indigo-50\\/95 {
  background-color: rgb(238 242 255 / 0.95);
}
.bg-indigo-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(99 102 241 / var(--tw-bg-opacity));
}
.bg-indigo-500\\/0 {
  background-color: rgb(99 102 241 / 0);
}
.bg-indigo-500\\/10 {
  background-color: rgb(99 102 241 / 0.1);
}
.bg-indigo-500\\/100 {
  background-color: rgb(99 102 241 / 1);
}
.bg-indigo-500\\/15 {
  background-color: rgb(99 102 241 / 0.15);
}
.bg-indigo-500\\/20 {
  background-color: rgb(99 102 241 / 0.2);
}
.bg-indigo-500\\/25 {
  background-color: rgb(99 102 241 / 0.25);
}
.bg-indigo-500\\/30 {
  background-color: rgb(99 102 241 / 0.3);
}
.bg-indigo-500\\/35 {
  background-color: rgb(99 102 241 / 0.35);
}
.bg-indigo-500\\/40 {
  background-color: rgb(99 102 241 / 0.4);
}
.bg-indigo-500\\/45 {
  background-color: rgb(99 102 241 / 0.45);
}
.bg-indigo-500\\/5 {
  background-color: rgb(99 102 241 / 0.05);
}
.bg-indigo-500\\/50 {
  background-color: rgb(99 102 241 / 0.5);
}
.bg-indigo-500\\/55 {
  background-color: rgb(99 102 241 / 0.55);
}
.bg-indigo-500\\/60 {
  background-color: rgb(99 102 241 / 0.6);
}
.bg-indigo-500\\/65 {
  background-color: rgb(99 102 241 / 0.65);
}
.bg-indigo-500\\/70 {
  background-color: rgb(99 102 241 / 0.7);
}
.bg-indigo-500\\/75 {
  background-color: rgb(99 102 241 / 0.75);
}
.bg-indigo-500\\/80 {
  background-color: rgb(99 102 241 / 0.8);
}
.bg-indigo-500\\/85 {
  background-color: rgb(99 102 241 / 0.85);
}
.bg-indigo-500\\/90 {
  background-color: rgb(99 102 241 / 0.9);
}
.bg-indigo-500\\/95 {
  background-color: rgb(99 102 241 / 0.95);
}
.bg-indigo-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(79 70 229 / var(--tw-bg-opacity));
}
.bg-indigo-600\\/0 {
  background-color: rgb(79 70 229 / 0);
}
.bg-indigo-600\\/10 {
  background-color: rgb(79 70 229 / 0.1);
}
.bg-indigo-600\\/100 {
  background-color: rgb(79 70 229 / 1);
}
.bg-indigo-600\\/15 {
  background-color: rgb(79 70 229 / 0.15);
}
.bg-indigo-600\\/20 {
  background-color: rgb(79 70 229 / 0.2);
}
.bg-indigo-600\\/25 {
  background-color: rgb(79 70 229 / 0.25);
}
.bg-indigo-600\\/30 {
  background-color: rgb(79 70 229 / 0.3);
}
.bg-indigo-600\\/35 {
  background-color: rgb(79 70 229 / 0.35);
}
.bg-indigo-600\\/40 {
  background-color: rgb(79 70 229 / 0.4);
}
.bg-indigo-600\\/45 {
  background-color: rgb(79 70 229 / 0.45);
}
.bg-indigo-600\\/5 {
  background-color: rgb(79 70 229 / 0.05);
}
.bg-indigo-600\\/50 {
  background-color: rgb(79 70 229 / 0.5);
}
.bg-indigo-600\\/55 {
  background-color: rgb(79 70 229 / 0.55);
}
.bg-indigo-600\\/60 {
  background-color: rgb(79 70 229 / 0.6);
}
.bg-indigo-600\\/65 {
  background-color: rgb(79 70 229 / 0.65);
}
.bg-indigo-600\\/70 {
  background-color: rgb(79 70 229 / 0.7);
}
.bg-indigo-600\\/75 {
  background-color: rgb(79 70 229 / 0.75);
}
.bg-indigo-600\\/80 {
  background-color: rgb(79 70 229 / 0.8);
}
.bg-indigo-600\\/85 {
  background-color: rgb(79 70 229 / 0.85);
}
.bg-indigo-600\\/90 {
  background-color: rgb(79 70 229 / 0.9);
}
.bg-indigo-600\\/95 {
  background-color: rgb(79 70 229 / 0.95);
}
.bg-indigo-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(67 56 202 / var(--tw-bg-opacity));
}
.bg-indigo-700\\/0 {
  background-color: rgb(67 56 202 / 0);
}
.bg-indigo-700\\/10 {
  background-color: rgb(67 56 202 / 0.1);
}
.bg-indigo-700\\/100 {
  background-color: rgb(67 56 202 / 1);
}
.bg-indigo-700\\/15 {
  background-color: rgb(67 56 202 / 0.15);
}
.bg-indigo-700\\/20 {
  background-color: rgb(67 56 202 / 0.2);
}
.bg-indigo-700\\/25 {
  background-color: rgb(67 56 202 / 0.25);
}
.bg-indigo-700\\/30 {
  background-color: rgb(67 56 202 / 0.3);
}
.bg-indigo-700\\/35 {
  background-color: rgb(67 56 202 / 0.35);
}
.bg-indigo-700\\/40 {
  background-color: rgb(67 56 202 / 0.4);
}
.bg-indigo-700\\/45 {
  background-color: rgb(67 56 202 / 0.45);
}
.bg-indigo-700\\/5 {
  background-color: rgb(67 56 202 / 0.05);
}
.bg-indigo-700\\/50 {
  background-color: rgb(67 56 202 / 0.5);
}
.bg-indigo-700\\/55 {
  background-color: rgb(67 56 202 / 0.55);
}
.bg-indigo-700\\/60 {
  background-color: rgb(67 56 202 / 0.6);
}
.bg-indigo-700\\/65 {
  background-color: rgb(67 56 202 / 0.65);
}
.bg-indigo-700\\/70 {
  background-color: rgb(67 56 202 / 0.7);
}
.bg-indigo-700\\/75 {
  background-color: rgb(67 56 202 / 0.75);
}
.bg-indigo-700\\/80 {
  background-color: rgb(67 56 202 / 0.8);
}
.bg-indigo-700\\/85 {
  background-color: rgb(67 56 202 / 0.85);
}
.bg-indigo-700\\/90 {
  background-color: rgb(67 56 202 / 0.9);
}
.bg-indigo-700\\/95 {
  background-color: rgb(67 56 202 / 0.95);
}
.bg-indigo-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(55 48 163 / var(--tw-bg-opacity));
}
.bg-indigo-800\\/0 {
  background-color: rgb(55 48 163 / 0);
}
.bg-indigo-800\\/10 {
  background-color: rgb(55 48 163 / 0.1);
}
.bg-indigo-800\\/100 {
  background-color: rgb(55 48 163 / 1);
}
.bg-indigo-800\\/15 {
  background-color: rgb(55 48 163 / 0.15);
}
.bg-indigo-800\\/20 {
  background-color: rgb(55 48 163 / 0.2);
}
.bg-indigo-800\\/25 {
  background-color: rgb(55 48 163 / 0.25);
}
.bg-indigo-800\\/30 {
  background-color: rgb(55 48 163 / 0.3);
}
.bg-indigo-800\\/35 {
  background-color: rgb(55 48 163 / 0.35);
}
.bg-indigo-800\\/40 {
  background-color: rgb(55 48 163 / 0.4);
}
.bg-indigo-800\\/45 {
  background-color: rgb(55 48 163 / 0.45);
}
.bg-indigo-800\\/5 {
  background-color: rgb(55 48 163 / 0.05);
}
.bg-indigo-800\\/50 {
  background-color: rgb(55 48 163 / 0.5);
}
.bg-indigo-800\\/55 {
  background-color: rgb(55 48 163 / 0.55);
}
.bg-indigo-800\\/60 {
  background-color: rgb(55 48 163 / 0.6);
}
.bg-indigo-800\\/65 {
  background-color: rgb(55 48 163 / 0.65);
}
.bg-indigo-800\\/70 {
  background-color: rgb(55 48 163 / 0.7);
}
.bg-indigo-800\\/75 {
  background-color: rgb(55 48 163 / 0.75);
}
.bg-indigo-800\\/80 {
  background-color: rgb(55 48 163 / 0.8);
}
.bg-indigo-800\\/85 {
  background-color: rgb(55 48 163 / 0.85);
}
.bg-indigo-800\\/90 {
  background-color: rgb(55 48 163 / 0.9);
}
.bg-indigo-800\\/95 {
  background-color: rgb(55 48 163 / 0.95);
}
.bg-indigo-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(49 46 129 / var(--tw-bg-opacity));
}
.bg-indigo-900\\/0 {
  background-color: rgb(49 46 129 / 0);
}
.bg-indigo-900\\/10 {
  background-color: rgb(49 46 129 / 0.1);
}
.bg-indigo-900\\/100 {
  background-color: rgb(49 46 129 / 1);
}
.bg-indigo-900\\/15 {
  background-color: rgb(49 46 129 / 0.15);
}
.bg-indigo-900\\/20 {
  background-color: rgb(49 46 129 / 0.2);
}
.bg-indigo-900\\/25 {
  background-color: rgb(49 46 129 / 0.25);
}
.bg-indigo-900\\/30 {
  background-color: rgb(49 46 129 / 0.3);
}
.bg-indigo-900\\/35 {
  background-color: rgb(49 46 129 / 0.35);
}
.bg-indigo-900\\/40 {
  background-color: rgb(49 46 129 / 0.4);
}
.bg-indigo-900\\/45 {
  background-color: rgb(49 46 129 / 0.45);
}
.bg-indigo-900\\/5 {
  background-color: rgb(49 46 129 / 0.05);
}
.bg-indigo-900\\/50 {
  background-color: rgb(49 46 129 / 0.5);
}
.bg-indigo-900\\/55 {
  background-color: rgb(49 46 129 / 0.55);
}
.bg-indigo-900\\/60 {
  background-color: rgb(49 46 129 / 0.6);
}
.bg-indigo-900\\/65 {
  background-color: rgb(49 46 129 / 0.65);
}
.bg-indigo-900\\/70 {
  background-color: rgb(49 46 129 / 0.7);
}
.bg-indigo-900\\/75 {
  background-color: rgb(49 46 129 / 0.75);
}
.bg-indigo-900\\/80 {
  background-color: rgb(49 46 129 / 0.8);
}
.bg-indigo-900\\/85 {
  background-color: rgb(49 46 129 / 0.85);
}
.bg-indigo-900\\/90 {
  background-color: rgb(49 46 129 / 0.9);
}
.bg-indigo-900\\/95 {
  background-color: rgb(49 46 129 / 0.95);
}
.bg-indigo-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(30 27 75 / var(--tw-bg-opacity));
}
.bg-indigo-950\\/0 {
  background-color: rgb(30 27 75 / 0);
}
.bg-indigo-950\\/10 {
  background-color: rgb(30 27 75 / 0.1);
}
.bg-indigo-950\\/100 {
  background-color: rgb(30 27 75 / 1);
}
.bg-indigo-950\\/15 {
  background-color: rgb(30 27 75 / 0.15);
}
.bg-indigo-950\\/20 {
  background-color: rgb(30 27 75 / 0.2);
}
.bg-indigo-950\\/25 {
  background-color: rgb(30 27 75 / 0.25);
}
.bg-indigo-950\\/30 {
  background-color: rgb(30 27 75 / 0.3);
}
.bg-indigo-950\\/35 {
  background-color: rgb(30 27 75 / 0.35);
}
.bg-indigo-950\\/40 {
  background-color: rgb(30 27 75 / 0.4);
}
.bg-indigo-950\\/45 {
  background-color: rgb(30 27 75 / 0.45);
}
.bg-indigo-950\\/5 {
  background-color: rgb(30 27 75 / 0.05);
}
.bg-indigo-950\\/50 {
  background-color: rgb(30 27 75 / 0.5);
}
.bg-indigo-950\\/55 {
  background-color: rgb(30 27 75 / 0.55);
}
.bg-indigo-950\\/60 {
  background-color: rgb(30 27 75 / 0.6);
}
.bg-indigo-950\\/65 {
  background-color: rgb(30 27 75 / 0.65);
}
.bg-indigo-950\\/70 {
  background-color: rgb(30 27 75 / 0.7);
}
.bg-indigo-950\\/75 {
  background-color: rgb(30 27 75 / 0.75);
}
.bg-indigo-950\\/80 {
  background-color: rgb(30 27 75 / 0.8);
}
.bg-indigo-950\\/85 {
  background-color: rgb(30 27 75 / 0.85);
}
.bg-indigo-950\\/90 {
  background-color: rgb(30 27 75 / 0.9);
}
.bg-indigo-950\\/95 {
  background-color: rgb(30 27 75 / 0.95);
}
.bg-inherit {
  background-color: inherit;
}
.bg-lime-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(236 252 203 / var(--tw-bg-opacity));
}
.bg-lime-100\\/0 {
  background-color: rgb(236 252 203 / 0);
}
.bg-lime-100\\/10 {
  background-color: rgb(236 252 203 / 0.1);
}
.bg-lime-100\\/100 {
  background-color: rgb(236 252 203 / 1);
}
.bg-lime-100\\/15 {
  background-color: rgb(236 252 203 / 0.15);
}
.bg-lime-100\\/20 {
  background-color: rgb(236 252 203 / 0.2);
}
.bg-lime-100\\/25 {
  background-color: rgb(236 252 203 / 0.25);
}
.bg-lime-100\\/30 {
  background-color: rgb(236 252 203 / 0.3);
}
.bg-lime-100\\/35 {
  background-color: rgb(236 252 203 / 0.35);
}
.bg-lime-100\\/40 {
  background-color: rgb(236 252 203 / 0.4);
}
.bg-lime-100\\/45 {
  background-color: rgb(236 252 203 / 0.45);
}
.bg-lime-100\\/5 {
  background-color: rgb(236 252 203 / 0.05);
}
.bg-lime-100\\/50 {
  background-color: rgb(236 252 203 / 0.5);
}
.bg-lime-100\\/55 {
  background-color: rgb(236 252 203 / 0.55);
}
.bg-lime-100\\/60 {
  background-color: rgb(236 252 203 / 0.6);
}
.bg-lime-100\\/65 {
  background-color: rgb(236 252 203 / 0.65);
}
.bg-lime-100\\/70 {
  background-color: rgb(236 252 203 / 0.7);
}
.bg-lime-100\\/75 {
  background-color: rgb(236 252 203 / 0.75);
}
.bg-lime-100\\/80 {
  background-color: rgb(236 252 203 / 0.8);
}
.bg-lime-100\\/85 {
  background-color: rgb(236 252 203 / 0.85);
}
.bg-lime-100\\/90 {
  background-color: rgb(236 252 203 / 0.9);
}
.bg-lime-100\\/95 {
  background-color: rgb(236 252 203 / 0.95);
}
.bg-lime-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(217 249 157 / var(--tw-bg-opacity));
}
.bg-lime-200\\/0 {
  background-color: rgb(217 249 157 / 0);
}
.bg-lime-200\\/10 {
  background-color: rgb(217 249 157 / 0.1);
}
.bg-lime-200\\/100 {
  background-color: rgb(217 249 157 / 1);
}
.bg-lime-200\\/15 {
  background-color: rgb(217 249 157 / 0.15);
}
.bg-lime-200\\/20 {
  background-color: rgb(217 249 157 / 0.2);
}
.bg-lime-200\\/25 {
  background-color: rgb(217 249 157 / 0.25);
}
.bg-lime-200\\/30 {
  background-color: rgb(217 249 157 / 0.3);
}
.bg-lime-200\\/35 {
  background-color: rgb(217 249 157 / 0.35);
}
.bg-lime-200\\/40 {
  background-color: rgb(217 249 157 / 0.4);
}
.bg-lime-200\\/45 {
  background-color: rgb(217 249 157 / 0.45);
}
.bg-lime-200\\/5 {
  background-color: rgb(217 249 157 / 0.05);
}
.bg-lime-200\\/50 {
  background-color: rgb(217 249 157 / 0.5);
}
.bg-lime-200\\/55 {
  background-color: rgb(217 249 157 / 0.55);
}
.bg-lime-200\\/60 {
  background-color: rgb(217 249 157 / 0.6);
}
.bg-lime-200\\/65 {
  background-color: rgb(217 249 157 / 0.65);
}
.bg-lime-200\\/70 {
  background-color: rgb(217 249 157 / 0.7);
}
.bg-lime-200\\/75 {
  background-color: rgb(217 249 157 / 0.75);
}
.bg-lime-200\\/80 {
  background-color: rgb(217 249 157 / 0.8);
}
.bg-lime-200\\/85 {
  background-color: rgb(217 249 157 / 0.85);
}
.bg-lime-200\\/90 {
  background-color: rgb(217 249 157 / 0.9);
}
.bg-lime-200\\/95 {
  background-color: rgb(217 249 157 / 0.95);
}
.bg-lime-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(190 242 100 / var(--tw-bg-opacity));
}
.bg-lime-300\\/0 {
  background-color: rgb(190 242 100 / 0);
}
.bg-lime-300\\/10 {
  background-color: rgb(190 242 100 / 0.1);
}
.bg-lime-300\\/100 {
  background-color: rgb(190 242 100 / 1);
}
.bg-lime-300\\/15 {
  background-color: rgb(190 242 100 / 0.15);
}
.bg-lime-300\\/20 {
  background-color: rgb(190 242 100 / 0.2);
}
.bg-lime-300\\/25 {
  background-color: rgb(190 242 100 / 0.25);
}
.bg-lime-300\\/30 {
  background-color: rgb(190 242 100 / 0.3);
}
.bg-lime-300\\/35 {
  background-color: rgb(190 242 100 / 0.35);
}
.bg-lime-300\\/40 {
  background-color: rgb(190 242 100 / 0.4);
}
.bg-lime-300\\/45 {
  background-color: rgb(190 242 100 / 0.45);
}
.bg-lime-300\\/5 {
  background-color: rgb(190 242 100 / 0.05);
}
.bg-lime-300\\/50 {
  background-color: rgb(190 242 100 / 0.5);
}
.bg-lime-300\\/55 {
  background-color: rgb(190 242 100 / 0.55);
}
.bg-lime-300\\/60 {
  background-color: rgb(190 242 100 / 0.6);
}
.bg-lime-300\\/65 {
  background-color: rgb(190 242 100 / 0.65);
}
.bg-lime-300\\/70 {
  background-color: rgb(190 242 100 / 0.7);
}
.bg-lime-300\\/75 {
  background-color: rgb(190 242 100 / 0.75);
}
.bg-lime-300\\/80 {
  background-color: rgb(190 242 100 / 0.8);
}
.bg-lime-300\\/85 {
  background-color: rgb(190 242 100 / 0.85);
}
.bg-lime-300\\/90 {
  background-color: rgb(190 242 100 / 0.9);
}
.bg-lime-300\\/95 {
  background-color: rgb(190 242 100 / 0.95);
}
.bg-lime-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(163 230 53 / var(--tw-bg-opacity));
}
.bg-lime-400\\/0 {
  background-color: rgb(163 230 53 / 0);
}
.bg-lime-400\\/10 {
  background-color: rgb(163 230 53 / 0.1);
}
.bg-lime-400\\/100 {
  background-color: rgb(163 230 53 / 1);
}
.bg-lime-400\\/15 {
  background-color: rgb(163 230 53 / 0.15);
}
.bg-lime-400\\/20 {
  background-color: rgb(163 230 53 / 0.2);
}
.bg-lime-400\\/25 {
  background-color: rgb(163 230 53 / 0.25);
}
.bg-lime-400\\/30 {
  background-color: rgb(163 230 53 / 0.3);
}
.bg-lime-400\\/35 {
  background-color: rgb(163 230 53 / 0.35);
}
.bg-lime-400\\/40 {
  background-color: rgb(163 230 53 / 0.4);
}
.bg-lime-400\\/45 {
  background-color: rgb(163 230 53 / 0.45);
}
.bg-lime-400\\/5 {
  background-color: rgb(163 230 53 / 0.05);
}
.bg-lime-400\\/50 {
  background-color: rgb(163 230 53 / 0.5);
}
.bg-lime-400\\/55 {
  background-color: rgb(163 230 53 / 0.55);
}
.bg-lime-400\\/60 {
  background-color: rgb(163 230 53 / 0.6);
}
.bg-lime-400\\/65 {
  background-color: rgb(163 230 53 / 0.65);
}
.bg-lime-400\\/70 {
  background-color: rgb(163 230 53 / 0.7);
}
.bg-lime-400\\/75 {
  background-color: rgb(163 230 53 / 0.75);
}
.bg-lime-400\\/80 {
  background-color: rgb(163 230 53 / 0.8);
}
.bg-lime-400\\/85 {
  background-color: rgb(163 230 53 / 0.85);
}
.bg-lime-400\\/90 {
  background-color: rgb(163 230 53 / 0.9);
}
.bg-lime-400\\/95 {
  background-color: rgb(163 230 53 / 0.95);
}
.bg-lime-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(247 254 231 / var(--tw-bg-opacity));
}
.bg-lime-50\\/0 {
  background-color: rgb(247 254 231 / 0);
}
.bg-lime-50\\/10 {
  background-color: rgb(247 254 231 / 0.1);
}
.bg-lime-50\\/100 {
  background-color: rgb(247 254 231 / 1);
}
.bg-lime-50\\/15 {
  background-color: rgb(247 254 231 / 0.15);
}
.bg-lime-50\\/20 {
  background-color: rgb(247 254 231 / 0.2);
}
.bg-lime-50\\/25 {
  background-color: rgb(247 254 231 / 0.25);
}
.bg-lime-50\\/30 {
  background-color: rgb(247 254 231 / 0.3);
}
.bg-lime-50\\/35 {
  background-color: rgb(247 254 231 / 0.35);
}
.bg-lime-50\\/40 {
  background-color: rgb(247 254 231 / 0.4);
}
.bg-lime-50\\/45 {
  background-color: rgb(247 254 231 / 0.45);
}
.bg-lime-50\\/5 {
  background-color: rgb(247 254 231 / 0.05);
}
.bg-lime-50\\/50 {
  background-color: rgb(247 254 231 / 0.5);
}
.bg-lime-50\\/55 {
  background-color: rgb(247 254 231 / 0.55);
}
.bg-lime-50\\/60 {
  background-color: rgb(247 254 231 / 0.6);
}
.bg-lime-50\\/65 {
  background-color: rgb(247 254 231 / 0.65);
}
.bg-lime-50\\/70 {
  background-color: rgb(247 254 231 / 0.7);
}
.bg-lime-50\\/75 {
  background-color: rgb(247 254 231 / 0.75);
}
.bg-lime-50\\/80 {
  background-color: rgb(247 254 231 / 0.8);
}
.bg-lime-50\\/85 {
  background-color: rgb(247 254 231 / 0.85);
}
.bg-lime-50\\/90 {
  background-color: rgb(247 254 231 / 0.9);
}
.bg-lime-50\\/95 {
  background-color: rgb(247 254 231 / 0.95);
}
.bg-lime-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(132 204 22 / var(--tw-bg-opacity));
}
.bg-lime-500\\/0 {
  background-color: rgb(132 204 22 / 0);
}
.bg-lime-500\\/10 {
  background-color: rgb(132 204 22 / 0.1);
}
.bg-lime-500\\/100 {
  background-color: rgb(132 204 22 / 1);
}
.bg-lime-500\\/15 {
  background-color: rgb(132 204 22 / 0.15);
}
.bg-lime-500\\/20 {
  background-color: rgb(132 204 22 / 0.2);
}
.bg-lime-500\\/25 {
  background-color: rgb(132 204 22 / 0.25);
}
.bg-lime-500\\/30 {
  background-color: rgb(132 204 22 / 0.3);
}
.bg-lime-500\\/35 {
  background-color: rgb(132 204 22 / 0.35);
}
.bg-lime-500\\/40 {
  background-color: rgb(132 204 22 / 0.4);
}
.bg-lime-500\\/45 {
  background-color: rgb(132 204 22 / 0.45);
}
.bg-lime-500\\/5 {
  background-color: rgb(132 204 22 / 0.05);
}
.bg-lime-500\\/50 {
  background-color: rgb(132 204 22 / 0.5);
}
.bg-lime-500\\/55 {
  background-color: rgb(132 204 22 / 0.55);
}
.bg-lime-500\\/60 {
  background-color: rgb(132 204 22 / 0.6);
}
.bg-lime-500\\/65 {
  background-color: rgb(132 204 22 / 0.65);
}
.bg-lime-500\\/70 {
  background-color: rgb(132 204 22 / 0.7);
}
.bg-lime-500\\/75 {
  background-color: rgb(132 204 22 / 0.75);
}
.bg-lime-500\\/80 {
  background-color: rgb(132 204 22 / 0.8);
}
.bg-lime-500\\/85 {
  background-color: rgb(132 204 22 / 0.85);
}
.bg-lime-500\\/90 {
  background-color: rgb(132 204 22 / 0.9);
}
.bg-lime-500\\/95 {
  background-color: rgb(132 204 22 / 0.95);
}
.bg-lime-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(101 163 13 / var(--tw-bg-opacity));
}
.bg-lime-600\\/0 {
  background-color: rgb(101 163 13 / 0);
}
.bg-lime-600\\/10 {
  background-color: rgb(101 163 13 / 0.1);
}
.bg-lime-600\\/100 {
  background-color: rgb(101 163 13 / 1);
}
.bg-lime-600\\/15 {
  background-color: rgb(101 163 13 / 0.15);
}
.bg-lime-600\\/20 {
  background-color: rgb(101 163 13 / 0.2);
}
.bg-lime-600\\/25 {
  background-color: rgb(101 163 13 / 0.25);
}
.bg-lime-600\\/30 {
  background-color: rgb(101 163 13 / 0.3);
}
.bg-lime-600\\/35 {
  background-color: rgb(101 163 13 / 0.35);
}
.bg-lime-600\\/40 {
  background-color: rgb(101 163 13 / 0.4);
}
.bg-lime-600\\/45 {
  background-color: rgb(101 163 13 / 0.45);
}
.bg-lime-600\\/5 {
  background-color: rgb(101 163 13 / 0.05);
}
.bg-lime-600\\/50 {
  background-color: rgb(101 163 13 / 0.5);
}
.bg-lime-600\\/55 {
  background-color: rgb(101 163 13 / 0.55);
}
.bg-lime-600\\/60 {
  background-color: rgb(101 163 13 / 0.6);
}
.bg-lime-600\\/65 {
  background-color: rgb(101 163 13 / 0.65);
}
.bg-lime-600\\/70 {
  background-color: rgb(101 163 13 / 0.7);
}
.bg-lime-600\\/75 {
  background-color: rgb(101 163 13 / 0.75);
}
.bg-lime-600\\/80 {
  background-color: rgb(101 163 13 / 0.8);
}
.bg-lime-600\\/85 {
  background-color: rgb(101 163 13 / 0.85);
}
.bg-lime-600\\/90 {
  background-color: rgb(101 163 13 / 0.9);
}
.bg-lime-600\\/95 {
  background-color: rgb(101 163 13 / 0.95);
}
.bg-lime-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(77 124 15 / var(--tw-bg-opacity));
}
.bg-lime-700\\/0 {
  background-color: rgb(77 124 15 / 0);
}
.bg-lime-700\\/10 {
  background-color: rgb(77 124 15 / 0.1);
}
.bg-lime-700\\/100 {
  background-color: rgb(77 124 15 / 1);
}
.bg-lime-700\\/15 {
  background-color: rgb(77 124 15 / 0.15);
}
.bg-lime-700\\/20 {
  background-color: rgb(77 124 15 / 0.2);
}
.bg-lime-700\\/25 {
  background-color: rgb(77 124 15 / 0.25);
}
.bg-lime-700\\/30 {
  background-color: rgb(77 124 15 / 0.3);
}
.bg-lime-700\\/35 {
  background-color: rgb(77 124 15 / 0.35);
}
.bg-lime-700\\/40 {
  background-color: rgb(77 124 15 / 0.4);
}
.bg-lime-700\\/45 {
  background-color: rgb(77 124 15 / 0.45);
}
.bg-lime-700\\/5 {
  background-color: rgb(77 124 15 / 0.05);
}
.bg-lime-700\\/50 {
  background-color: rgb(77 124 15 / 0.5);
}
.bg-lime-700\\/55 {
  background-color: rgb(77 124 15 / 0.55);
}
.bg-lime-700\\/60 {
  background-color: rgb(77 124 15 / 0.6);
}
.bg-lime-700\\/65 {
  background-color: rgb(77 124 15 / 0.65);
}
.bg-lime-700\\/70 {
  background-color: rgb(77 124 15 / 0.7);
}
.bg-lime-700\\/75 {
  background-color: rgb(77 124 15 / 0.75);
}
.bg-lime-700\\/80 {
  background-color: rgb(77 124 15 / 0.8);
}
.bg-lime-700\\/85 {
  background-color: rgb(77 124 15 / 0.85);
}
.bg-lime-700\\/90 {
  background-color: rgb(77 124 15 / 0.9);
}
.bg-lime-700\\/95 {
  background-color: rgb(77 124 15 / 0.95);
}
.bg-lime-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(63 98 18 / var(--tw-bg-opacity));
}
.bg-lime-800\\/0 {
  background-color: rgb(63 98 18 / 0);
}
.bg-lime-800\\/10 {
  background-color: rgb(63 98 18 / 0.1);
}
.bg-lime-800\\/100 {
  background-color: rgb(63 98 18 / 1);
}
.bg-lime-800\\/15 {
  background-color: rgb(63 98 18 / 0.15);
}
.bg-lime-800\\/20 {
  background-color: rgb(63 98 18 / 0.2);
}
.bg-lime-800\\/25 {
  background-color: rgb(63 98 18 / 0.25);
}
.bg-lime-800\\/30 {
  background-color: rgb(63 98 18 / 0.3);
}
.bg-lime-800\\/35 {
  background-color: rgb(63 98 18 / 0.35);
}
.bg-lime-800\\/40 {
  background-color: rgb(63 98 18 / 0.4);
}
.bg-lime-800\\/45 {
  background-color: rgb(63 98 18 / 0.45);
}
.bg-lime-800\\/5 {
  background-color: rgb(63 98 18 / 0.05);
}
.bg-lime-800\\/50 {
  background-color: rgb(63 98 18 / 0.5);
}
.bg-lime-800\\/55 {
  background-color: rgb(63 98 18 / 0.55);
}
.bg-lime-800\\/60 {
  background-color: rgb(63 98 18 / 0.6);
}
.bg-lime-800\\/65 {
  background-color: rgb(63 98 18 / 0.65);
}
.bg-lime-800\\/70 {
  background-color: rgb(63 98 18 / 0.7);
}
.bg-lime-800\\/75 {
  background-color: rgb(63 98 18 / 0.75);
}
.bg-lime-800\\/80 {
  background-color: rgb(63 98 18 / 0.8);
}
.bg-lime-800\\/85 {
  background-color: rgb(63 98 18 / 0.85);
}
.bg-lime-800\\/90 {
  background-color: rgb(63 98 18 / 0.9);
}
.bg-lime-800\\/95 {
  background-color: rgb(63 98 18 / 0.95);
}
.bg-lime-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(54 83 20 / var(--tw-bg-opacity));
}
.bg-lime-900\\/0 {
  background-color: rgb(54 83 20 / 0);
}
.bg-lime-900\\/10 {
  background-color: rgb(54 83 20 / 0.1);
}
.bg-lime-900\\/100 {
  background-color: rgb(54 83 20 / 1);
}
.bg-lime-900\\/15 {
  background-color: rgb(54 83 20 / 0.15);
}
.bg-lime-900\\/20 {
  background-color: rgb(54 83 20 / 0.2);
}
.bg-lime-900\\/25 {
  background-color: rgb(54 83 20 / 0.25);
}
.bg-lime-900\\/30 {
  background-color: rgb(54 83 20 / 0.3);
}
.bg-lime-900\\/35 {
  background-color: rgb(54 83 20 / 0.35);
}
.bg-lime-900\\/40 {
  background-color: rgb(54 83 20 / 0.4);
}
.bg-lime-900\\/45 {
  background-color: rgb(54 83 20 / 0.45);
}
.bg-lime-900\\/5 {
  background-color: rgb(54 83 20 / 0.05);
}
.bg-lime-900\\/50 {
  background-color: rgb(54 83 20 / 0.5);
}
.bg-lime-900\\/55 {
  background-color: rgb(54 83 20 / 0.55);
}
.bg-lime-900\\/60 {
  background-color: rgb(54 83 20 / 0.6);
}
.bg-lime-900\\/65 {
  background-color: rgb(54 83 20 / 0.65);
}
.bg-lime-900\\/70 {
  background-color: rgb(54 83 20 / 0.7);
}
.bg-lime-900\\/75 {
  background-color: rgb(54 83 20 / 0.75);
}
.bg-lime-900\\/80 {
  background-color: rgb(54 83 20 / 0.8);
}
.bg-lime-900\\/85 {
  background-color: rgb(54 83 20 / 0.85);
}
.bg-lime-900\\/90 {
  background-color: rgb(54 83 20 / 0.9);
}
.bg-lime-900\\/95 {
  background-color: rgb(54 83 20 / 0.95);
}
.bg-lime-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(26 46 5 / var(--tw-bg-opacity));
}
.bg-lime-950\\/0 {
  background-color: rgb(26 46 5 / 0);
}
.bg-lime-950\\/10 {
  background-color: rgb(26 46 5 / 0.1);
}
.bg-lime-950\\/100 {
  background-color: rgb(26 46 5 / 1);
}
.bg-lime-950\\/15 {
  background-color: rgb(26 46 5 / 0.15);
}
.bg-lime-950\\/20 {
  background-color: rgb(26 46 5 / 0.2);
}
.bg-lime-950\\/25 {
  background-color: rgb(26 46 5 / 0.25);
}
.bg-lime-950\\/30 {
  background-color: rgb(26 46 5 / 0.3);
}
.bg-lime-950\\/35 {
  background-color: rgb(26 46 5 / 0.35);
}
.bg-lime-950\\/40 {
  background-color: rgb(26 46 5 / 0.4);
}
.bg-lime-950\\/45 {
  background-color: rgb(26 46 5 / 0.45);
}
.bg-lime-950\\/5 {
  background-color: rgb(26 46 5 / 0.05);
}
.bg-lime-950\\/50 {
  background-color: rgb(26 46 5 / 0.5);
}
.bg-lime-950\\/55 {
  background-color: rgb(26 46 5 / 0.55);
}
.bg-lime-950\\/60 {
  background-color: rgb(26 46 5 / 0.6);
}
.bg-lime-950\\/65 {
  background-color: rgb(26 46 5 / 0.65);
}
.bg-lime-950\\/70 {
  background-color: rgb(26 46 5 / 0.7);
}
.bg-lime-950\\/75 {
  background-color: rgb(26 46 5 / 0.75);
}
.bg-lime-950\\/80 {
  background-color: rgb(26 46 5 / 0.8);
}
.bg-lime-950\\/85 {
  background-color: rgb(26 46 5 / 0.85);
}
.bg-lime-950\\/90 {
  background-color: rgb(26 46 5 / 0.9);
}
.bg-lime-950\\/95 {
  background-color: rgb(26 46 5 / 0.95);
}
.bg-neutral-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(245 245 245 / var(--tw-bg-opacity));
}
.bg-neutral-100\\/0 {
  background-color: rgb(245 245 245 / 0);
}
.bg-neutral-100\\/10 {
  background-color: rgb(245 245 245 / 0.1);
}
.bg-neutral-100\\/100 {
  background-color: rgb(245 245 245 / 1);
}
.bg-neutral-100\\/15 {
  background-color: rgb(245 245 245 / 0.15);
}
.bg-neutral-100\\/20 {
  background-color: rgb(245 245 245 / 0.2);
}
.bg-neutral-100\\/25 {
  background-color: rgb(245 245 245 / 0.25);
}
.bg-neutral-100\\/30 {
  background-color: rgb(245 245 245 / 0.3);
}
.bg-neutral-100\\/35 {
  background-color: rgb(245 245 245 / 0.35);
}
.bg-neutral-100\\/40 {
  background-color: rgb(245 245 245 / 0.4);
}
.bg-neutral-100\\/45 {
  background-color: rgb(245 245 245 / 0.45);
}
.bg-neutral-100\\/5 {
  background-color: rgb(245 245 245 / 0.05);
}
.bg-neutral-100\\/50 {
  background-color: rgb(245 245 245 / 0.5);
}
.bg-neutral-100\\/55 {
  background-color: rgb(245 245 245 / 0.55);
}
.bg-neutral-100\\/60 {
  background-color: rgb(245 245 245 / 0.6);
}
.bg-neutral-100\\/65 {
  background-color: rgb(245 245 245 / 0.65);
}
.bg-neutral-100\\/70 {
  background-color: rgb(245 245 245 / 0.7);
}
.bg-neutral-100\\/75 {
  background-color: rgb(245 245 245 / 0.75);
}
.bg-neutral-100\\/80 {
  background-color: rgb(245 245 245 / 0.8);
}
.bg-neutral-100\\/85 {
  background-color: rgb(245 245 245 / 0.85);
}
.bg-neutral-100\\/90 {
  background-color: rgb(245 245 245 / 0.9);
}
.bg-neutral-100\\/95 {
  background-color: rgb(245 245 245 / 0.95);
}
.bg-neutral-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(229 229 229 / var(--tw-bg-opacity));
}
.bg-neutral-200\\/0 {
  background-color: rgb(229 229 229 / 0);
}
.bg-neutral-200\\/10 {
  background-color: rgb(229 229 229 / 0.1);
}
.bg-neutral-200\\/100 {
  background-color: rgb(229 229 229 / 1);
}
.bg-neutral-200\\/15 {
  background-color: rgb(229 229 229 / 0.15);
}
.bg-neutral-200\\/20 {
  background-color: rgb(229 229 229 / 0.2);
}
.bg-neutral-200\\/25 {
  background-color: rgb(229 229 229 / 0.25);
}
.bg-neutral-200\\/30 {
  background-color: rgb(229 229 229 / 0.3);
}
.bg-neutral-200\\/35 {
  background-color: rgb(229 229 229 / 0.35);
}
.bg-neutral-200\\/40 {
  background-color: rgb(229 229 229 / 0.4);
}
.bg-neutral-200\\/45 {
  background-color: rgb(229 229 229 / 0.45);
}
.bg-neutral-200\\/5 {
  background-color: rgb(229 229 229 / 0.05);
}
.bg-neutral-200\\/50 {
  background-color: rgb(229 229 229 / 0.5);
}
.bg-neutral-200\\/55 {
  background-color: rgb(229 229 229 / 0.55);
}
.bg-neutral-200\\/60 {
  background-color: rgb(229 229 229 / 0.6);
}
.bg-neutral-200\\/65 {
  background-color: rgb(229 229 229 / 0.65);
}
.bg-neutral-200\\/70 {
  background-color: rgb(229 229 229 / 0.7);
}
.bg-neutral-200\\/75 {
  background-color: rgb(229 229 229 / 0.75);
}
.bg-neutral-200\\/80 {
  background-color: rgb(229 229 229 / 0.8);
}
.bg-neutral-200\\/85 {
  background-color: rgb(229 229 229 / 0.85);
}
.bg-neutral-200\\/90 {
  background-color: rgb(229 229 229 / 0.9);
}
.bg-neutral-200\\/95 {
  background-color: rgb(229 229 229 / 0.95);
}
.bg-neutral-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(212 212 212 / var(--tw-bg-opacity));
}
.bg-neutral-300\\/0 {
  background-color: rgb(212 212 212 / 0);
}
.bg-neutral-300\\/10 {
  background-color: rgb(212 212 212 / 0.1);
}
.bg-neutral-300\\/100 {
  background-color: rgb(212 212 212 / 1);
}
.bg-neutral-300\\/15 {
  background-color: rgb(212 212 212 / 0.15);
}
.bg-neutral-300\\/20 {
  background-color: rgb(212 212 212 / 0.2);
}
.bg-neutral-300\\/25 {
  background-color: rgb(212 212 212 / 0.25);
}
.bg-neutral-300\\/30 {
  background-color: rgb(212 212 212 / 0.3);
}
.bg-neutral-300\\/35 {
  background-color: rgb(212 212 212 / 0.35);
}
.bg-neutral-300\\/40 {
  background-color: rgb(212 212 212 / 0.4);
}
.bg-neutral-300\\/45 {
  background-color: rgb(212 212 212 / 0.45);
}
.bg-neutral-300\\/5 {
  background-color: rgb(212 212 212 / 0.05);
}
.bg-neutral-300\\/50 {
  background-color: rgb(212 212 212 / 0.5);
}
.bg-neutral-300\\/55 {
  background-color: rgb(212 212 212 / 0.55);
}
.bg-neutral-300\\/60 {
  background-color: rgb(212 212 212 / 0.6);
}
.bg-neutral-300\\/65 {
  background-color: rgb(212 212 212 / 0.65);
}
.bg-neutral-300\\/70 {
  background-color: rgb(212 212 212 / 0.7);
}
.bg-neutral-300\\/75 {
  background-color: rgb(212 212 212 / 0.75);
}
.bg-neutral-300\\/80 {
  background-color: rgb(212 212 212 / 0.8);
}
.bg-neutral-300\\/85 {
  background-color: rgb(212 212 212 / 0.85);
}
.bg-neutral-300\\/90 {
  background-color: rgb(212 212 212 / 0.9);
}
.bg-neutral-300\\/95 {
  background-color: rgb(212 212 212 / 0.95);
}
.bg-neutral-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(163 163 163 / var(--tw-bg-opacity));
}
.bg-neutral-400\\/0 {
  background-color: rgb(163 163 163 / 0);
}
.bg-neutral-400\\/10 {
  background-color: rgb(163 163 163 / 0.1);
}
.bg-neutral-400\\/100 {
  background-color: rgb(163 163 163 / 1);
}
.bg-neutral-400\\/15 {
  background-color: rgb(163 163 163 / 0.15);
}
.bg-neutral-400\\/20 {
  background-color: rgb(163 163 163 / 0.2);
}
.bg-neutral-400\\/25 {
  background-color: rgb(163 163 163 / 0.25);
}
.bg-neutral-400\\/30 {
  background-color: rgb(163 163 163 / 0.3);
}
.bg-neutral-400\\/35 {
  background-color: rgb(163 163 163 / 0.35);
}
.bg-neutral-400\\/40 {
  background-color: rgb(163 163 163 / 0.4);
}
.bg-neutral-400\\/45 {
  background-color: rgb(163 163 163 / 0.45);
}
.bg-neutral-400\\/5 {
  background-color: rgb(163 163 163 / 0.05);
}
.bg-neutral-400\\/50 {
  background-color: rgb(163 163 163 / 0.5);
}
.bg-neutral-400\\/55 {
  background-color: rgb(163 163 163 / 0.55);
}
.bg-neutral-400\\/60 {
  background-color: rgb(163 163 163 / 0.6);
}
.bg-neutral-400\\/65 {
  background-color: rgb(163 163 163 / 0.65);
}
.bg-neutral-400\\/70 {
  background-color: rgb(163 163 163 / 0.7);
}
.bg-neutral-400\\/75 {
  background-color: rgb(163 163 163 / 0.75);
}
.bg-neutral-400\\/80 {
  background-color: rgb(163 163 163 / 0.8);
}
.bg-neutral-400\\/85 {
  background-color: rgb(163 163 163 / 0.85);
}
.bg-neutral-400\\/90 {
  background-color: rgb(163 163 163 / 0.9);
}
.bg-neutral-400\\/95 {
  background-color: rgb(163 163 163 / 0.95);
}
.bg-neutral-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 250 250 / var(--tw-bg-opacity));
}
.bg-neutral-50\\/0 {
  background-color: rgb(250 250 250 / 0);
}
.bg-neutral-50\\/10 {
  background-color: rgb(250 250 250 / 0.1);
}
.bg-neutral-50\\/100 {
  background-color: rgb(250 250 250 / 1);
}
.bg-neutral-50\\/15 {
  background-color: rgb(250 250 250 / 0.15);
}
.bg-neutral-50\\/20 {
  background-color: rgb(250 250 250 / 0.2);
}
.bg-neutral-50\\/25 {
  background-color: rgb(250 250 250 / 0.25);
}
.bg-neutral-50\\/30 {
  background-color: rgb(250 250 250 / 0.3);
}
.bg-neutral-50\\/35 {
  background-color: rgb(250 250 250 / 0.35);
}
.bg-neutral-50\\/40 {
  background-color: rgb(250 250 250 / 0.4);
}
.bg-neutral-50\\/45 {
  background-color: rgb(250 250 250 / 0.45);
}
.bg-neutral-50\\/5 {
  background-color: rgb(250 250 250 / 0.05);
}
.bg-neutral-50\\/50 {
  background-color: rgb(250 250 250 / 0.5);
}
.bg-neutral-50\\/55 {
  background-color: rgb(250 250 250 / 0.55);
}
.bg-neutral-50\\/60 {
  background-color: rgb(250 250 250 / 0.6);
}
.bg-neutral-50\\/65 {
  background-color: rgb(250 250 250 / 0.65);
}
.bg-neutral-50\\/70 {
  background-color: rgb(250 250 250 / 0.7);
}
.bg-neutral-50\\/75 {
  background-color: rgb(250 250 250 / 0.75);
}
.bg-neutral-50\\/80 {
  background-color: rgb(250 250 250 / 0.8);
}
.bg-neutral-50\\/85 {
  background-color: rgb(250 250 250 / 0.85);
}
.bg-neutral-50\\/90 {
  background-color: rgb(250 250 250 / 0.9);
}
.bg-neutral-50\\/95 {
  background-color: rgb(250 250 250 / 0.95);
}
.bg-neutral-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(115 115 115 / var(--tw-bg-opacity));
}
.bg-neutral-500\\/0 {
  background-color: rgb(115 115 115 / 0);
}
.bg-neutral-500\\/10 {
  background-color: rgb(115 115 115 / 0.1);
}
.bg-neutral-500\\/100 {
  background-color: rgb(115 115 115 / 1);
}
.bg-neutral-500\\/15 {
  background-color: rgb(115 115 115 / 0.15);
}
.bg-neutral-500\\/20 {
  background-color: rgb(115 115 115 / 0.2);
}
.bg-neutral-500\\/25 {
  background-color: rgb(115 115 115 / 0.25);
}
.bg-neutral-500\\/30 {
  background-color: rgb(115 115 115 / 0.3);
}
.bg-neutral-500\\/35 {
  background-color: rgb(115 115 115 / 0.35);
}
.bg-neutral-500\\/40 {
  background-color: rgb(115 115 115 / 0.4);
}
.bg-neutral-500\\/45 {
  background-color: rgb(115 115 115 / 0.45);
}
.bg-neutral-500\\/5 {
  background-color: rgb(115 115 115 / 0.05);
}
.bg-neutral-500\\/50 {
  background-color: rgb(115 115 115 / 0.5);
}
.bg-neutral-500\\/55 {
  background-color: rgb(115 115 115 / 0.55);
}
.bg-neutral-500\\/60 {
  background-color: rgb(115 115 115 / 0.6);
}
.bg-neutral-500\\/65 {
  background-color: rgb(115 115 115 / 0.65);
}
.bg-neutral-500\\/70 {
  background-color: rgb(115 115 115 / 0.7);
}
.bg-neutral-500\\/75 {
  background-color: rgb(115 115 115 / 0.75);
}
.bg-neutral-500\\/80 {
  background-color: rgb(115 115 115 / 0.8);
}
.bg-neutral-500\\/85 {
  background-color: rgb(115 115 115 / 0.85);
}
.bg-neutral-500\\/90 {
  background-color: rgb(115 115 115 / 0.9);
}
.bg-neutral-500\\/95 {
  background-color: rgb(115 115 115 / 0.95);
}
.bg-neutral-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(82 82 82 / var(--tw-bg-opacity));
}
.bg-neutral-600\\/0 {
  background-color: rgb(82 82 82 / 0);
}
.bg-neutral-600\\/10 {
  background-color: rgb(82 82 82 / 0.1);
}
.bg-neutral-600\\/100 {
  background-color: rgb(82 82 82 / 1);
}
.bg-neutral-600\\/15 {
  background-color: rgb(82 82 82 / 0.15);
}
.bg-neutral-600\\/20 {
  background-color: rgb(82 82 82 / 0.2);
}
.bg-neutral-600\\/25 {
  background-color: rgb(82 82 82 / 0.25);
}
.bg-neutral-600\\/30 {
  background-color: rgb(82 82 82 / 0.3);
}
.bg-neutral-600\\/35 {
  background-color: rgb(82 82 82 / 0.35);
}
.bg-neutral-600\\/40 {
  background-color: rgb(82 82 82 / 0.4);
}
.bg-neutral-600\\/45 {
  background-color: rgb(82 82 82 / 0.45);
}
.bg-neutral-600\\/5 {
  background-color: rgb(82 82 82 / 0.05);
}
.bg-neutral-600\\/50 {
  background-color: rgb(82 82 82 / 0.5);
}
.bg-neutral-600\\/55 {
  background-color: rgb(82 82 82 / 0.55);
}
.bg-neutral-600\\/60 {
  background-color: rgb(82 82 82 / 0.6);
}
.bg-neutral-600\\/65 {
  background-color: rgb(82 82 82 / 0.65);
}
.bg-neutral-600\\/70 {
  background-color: rgb(82 82 82 / 0.7);
}
.bg-neutral-600\\/75 {
  background-color: rgb(82 82 82 / 0.75);
}
.bg-neutral-600\\/80 {
  background-color: rgb(82 82 82 / 0.8);
}
.bg-neutral-600\\/85 {
  background-color: rgb(82 82 82 / 0.85);
}
.bg-neutral-600\\/90 {
  background-color: rgb(82 82 82 / 0.9);
}
.bg-neutral-600\\/95 {
  background-color: rgb(82 82 82 / 0.95);
}
.bg-neutral-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(64 64 64 / var(--tw-bg-opacity));
}
.bg-neutral-700\\/0 {
  background-color: rgb(64 64 64 / 0);
}
.bg-neutral-700\\/10 {
  background-color: rgb(64 64 64 / 0.1);
}
.bg-neutral-700\\/100 {
  background-color: rgb(64 64 64 / 1);
}
.bg-neutral-700\\/15 {
  background-color: rgb(64 64 64 / 0.15);
}
.bg-neutral-700\\/20 {
  background-color: rgb(64 64 64 / 0.2);
}
.bg-neutral-700\\/25 {
  background-color: rgb(64 64 64 / 0.25);
}
.bg-neutral-700\\/30 {
  background-color: rgb(64 64 64 / 0.3);
}
.bg-neutral-700\\/35 {
  background-color: rgb(64 64 64 / 0.35);
}
.bg-neutral-700\\/40 {
  background-color: rgb(64 64 64 / 0.4);
}
.bg-neutral-700\\/45 {
  background-color: rgb(64 64 64 / 0.45);
}
.bg-neutral-700\\/5 {
  background-color: rgb(64 64 64 / 0.05);
}
.bg-neutral-700\\/50 {
  background-color: rgb(64 64 64 / 0.5);
}
.bg-neutral-700\\/55 {
  background-color: rgb(64 64 64 / 0.55);
}
.bg-neutral-700\\/60 {
  background-color: rgb(64 64 64 / 0.6);
}
.bg-neutral-700\\/65 {
  background-color: rgb(64 64 64 / 0.65);
}
.bg-neutral-700\\/70 {
  background-color: rgb(64 64 64 / 0.7);
}
.bg-neutral-700\\/75 {
  background-color: rgb(64 64 64 / 0.75);
}
.bg-neutral-700\\/80 {
  background-color: rgb(64 64 64 / 0.8);
}
.bg-neutral-700\\/85 {
  background-color: rgb(64 64 64 / 0.85);
}
.bg-neutral-700\\/90 {
  background-color: rgb(64 64 64 / 0.9);
}
.bg-neutral-700\\/95 {
  background-color: rgb(64 64 64 / 0.95);
}
.bg-neutral-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(38 38 38 / var(--tw-bg-opacity));
}
.bg-neutral-800\\/0 {
  background-color: rgb(38 38 38 / 0);
}
.bg-neutral-800\\/10 {
  background-color: rgb(38 38 38 / 0.1);
}
.bg-neutral-800\\/100 {
  background-color: rgb(38 38 38 / 1);
}
.bg-neutral-800\\/15 {
  background-color: rgb(38 38 38 / 0.15);
}
.bg-neutral-800\\/20 {
  background-color: rgb(38 38 38 / 0.2);
}
.bg-neutral-800\\/25 {
  background-color: rgb(38 38 38 / 0.25);
}
.bg-neutral-800\\/30 {
  background-color: rgb(38 38 38 / 0.3);
}
.bg-neutral-800\\/35 {
  background-color: rgb(38 38 38 / 0.35);
}
.bg-neutral-800\\/40 {
  background-color: rgb(38 38 38 / 0.4);
}
.bg-neutral-800\\/45 {
  background-color: rgb(38 38 38 / 0.45);
}
.bg-neutral-800\\/5 {
  background-color: rgb(38 38 38 / 0.05);
}
.bg-neutral-800\\/50 {
  background-color: rgb(38 38 38 / 0.5);
}
.bg-neutral-800\\/55 {
  background-color: rgb(38 38 38 / 0.55);
}
.bg-neutral-800\\/60 {
  background-color: rgb(38 38 38 / 0.6);
}
.bg-neutral-800\\/65 {
  background-color: rgb(38 38 38 / 0.65);
}
.bg-neutral-800\\/70 {
  background-color: rgb(38 38 38 / 0.7);
}
.bg-neutral-800\\/75 {
  background-color: rgb(38 38 38 / 0.75);
}
.bg-neutral-800\\/80 {
  background-color: rgb(38 38 38 / 0.8);
}
.bg-neutral-800\\/85 {
  background-color: rgb(38 38 38 / 0.85);
}
.bg-neutral-800\\/90 {
  background-color: rgb(38 38 38 / 0.9);
}
.bg-neutral-800\\/95 {
  background-color: rgb(38 38 38 / 0.95);
}
.bg-neutral-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(23 23 23 / var(--tw-bg-opacity));
}
.bg-neutral-900\\/0 {
  background-color: rgb(23 23 23 / 0);
}
.bg-neutral-900\\/10 {
  background-color: rgb(23 23 23 / 0.1);
}
.bg-neutral-900\\/100 {
  background-color: rgb(23 23 23 / 1);
}
.bg-neutral-900\\/15 {
  background-color: rgb(23 23 23 / 0.15);
}
.bg-neutral-900\\/20 {
  background-color: rgb(23 23 23 / 0.2);
}
.bg-neutral-900\\/25 {
  background-color: rgb(23 23 23 / 0.25);
}
.bg-neutral-900\\/30 {
  background-color: rgb(23 23 23 / 0.3);
}
.bg-neutral-900\\/35 {
  background-color: rgb(23 23 23 / 0.35);
}
.bg-neutral-900\\/40 {
  background-color: rgb(23 23 23 / 0.4);
}
.bg-neutral-900\\/45 {
  background-color: rgb(23 23 23 / 0.45);
}
.bg-neutral-900\\/5 {
  background-color: rgb(23 23 23 / 0.05);
}
.bg-neutral-900\\/50 {
  background-color: rgb(23 23 23 / 0.5);
}
.bg-neutral-900\\/55 {
  background-color: rgb(23 23 23 / 0.55);
}
.bg-neutral-900\\/60 {
  background-color: rgb(23 23 23 / 0.6);
}
.bg-neutral-900\\/65 {
  background-color: rgb(23 23 23 / 0.65);
}
.bg-neutral-900\\/70 {
  background-color: rgb(23 23 23 / 0.7);
}
.bg-neutral-900\\/75 {
  background-color: rgb(23 23 23 / 0.75);
}
.bg-neutral-900\\/80 {
  background-color: rgb(23 23 23 / 0.8);
}
.bg-neutral-900\\/85 {
  background-color: rgb(23 23 23 / 0.85);
}
.bg-neutral-900\\/90 {
  background-color: rgb(23 23 23 / 0.9);
}
.bg-neutral-900\\/95 {
  background-color: rgb(23 23 23 / 0.95);
}
.bg-neutral-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(10 10 10 / var(--tw-bg-opacity));
}
.bg-neutral-950\\/0 {
  background-color: rgb(10 10 10 / 0);
}
.bg-neutral-950\\/10 {
  background-color: rgb(10 10 10 / 0.1);
}
.bg-neutral-950\\/100 {
  background-color: rgb(10 10 10 / 1);
}
.bg-neutral-950\\/15 {
  background-color: rgb(10 10 10 / 0.15);
}
.bg-neutral-950\\/20 {
  background-color: rgb(10 10 10 / 0.2);
}
.bg-neutral-950\\/25 {
  background-color: rgb(10 10 10 / 0.25);
}
.bg-neutral-950\\/30 {
  background-color: rgb(10 10 10 / 0.3);
}
.bg-neutral-950\\/35 {
  background-color: rgb(10 10 10 / 0.35);
}
.bg-neutral-950\\/40 {
  background-color: rgb(10 10 10 / 0.4);
}
.bg-neutral-950\\/45 {
  background-color: rgb(10 10 10 / 0.45);
}
.bg-neutral-950\\/5 {
  background-color: rgb(10 10 10 / 0.05);
}
.bg-neutral-950\\/50 {
  background-color: rgb(10 10 10 / 0.5);
}
.bg-neutral-950\\/55 {
  background-color: rgb(10 10 10 / 0.55);
}
.bg-neutral-950\\/60 {
  background-color: rgb(10 10 10 / 0.6);
}
.bg-neutral-950\\/65 {
  background-color: rgb(10 10 10 / 0.65);
}
.bg-neutral-950\\/70 {
  background-color: rgb(10 10 10 / 0.7);
}
.bg-neutral-950\\/75 {
  background-color: rgb(10 10 10 / 0.75);
}
.bg-neutral-950\\/80 {
  background-color: rgb(10 10 10 / 0.8);
}
.bg-neutral-950\\/85 {
  background-color: rgb(10 10 10 / 0.85);
}
.bg-neutral-950\\/90 {
  background-color: rgb(10 10 10 / 0.9);
}
.bg-neutral-950\\/95 {
  background-color: rgb(10 10 10 / 0.95);
}
.bg-orange-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(255 237 213 / var(--tw-bg-opacity));
}
.bg-orange-100\\/0 {
  background-color: rgb(255 237 213 / 0);
}
.bg-orange-100\\/10 {
  background-color: rgb(255 237 213 / 0.1);
}
.bg-orange-100\\/100 {
  background-color: rgb(255 237 213 / 1);
}
.bg-orange-100\\/15 {
  background-color: rgb(255 237 213 / 0.15);
}
.bg-orange-100\\/20 {
  background-color: rgb(255 237 213 / 0.2);
}
.bg-orange-100\\/25 {
  background-color: rgb(255 237 213 / 0.25);
}
.bg-orange-100\\/30 {
  background-color: rgb(255 237 213 / 0.3);
}
.bg-orange-100\\/35 {
  background-color: rgb(255 237 213 / 0.35);
}
.bg-orange-100\\/40 {
  background-color: rgb(255 237 213 / 0.4);
}
.bg-orange-100\\/45 {
  background-color: rgb(255 237 213 / 0.45);
}
.bg-orange-100\\/5 {
  background-color: rgb(255 237 213 / 0.05);
}
.bg-orange-100\\/50 {
  background-color: rgb(255 237 213 / 0.5);
}
.bg-orange-100\\/55 {
  background-color: rgb(255 237 213 / 0.55);
}
.bg-orange-100\\/60 {
  background-color: rgb(255 237 213 / 0.6);
}
.bg-orange-100\\/65 {
  background-color: rgb(255 237 213 / 0.65);
}
.bg-orange-100\\/70 {
  background-color: rgb(255 237 213 / 0.7);
}
.bg-orange-100\\/75 {
  background-color: rgb(255 237 213 / 0.75);
}
.bg-orange-100\\/80 {
  background-color: rgb(255 237 213 / 0.8);
}
.bg-orange-100\\/85 {
  background-color: rgb(255 237 213 / 0.85);
}
.bg-orange-100\\/90 {
  background-color: rgb(255 237 213 / 0.9);
}
.bg-orange-100\\/95 {
  background-color: rgb(255 237 213 / 0.95);
}
.bg-orange-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 215 170 / var(--tw-bg-opacity));
}
.bg-orange-200\\/0 {
  background-color: rgb(254 215 170 / 0);
}
.bg-orange-200\\/10 {
  background-color: rgb(254 215 170 / 0.1);
}
.bg-orange-200\\/100 {
  background-color: rgb(254 215 170 / 1);
}
.bg-orange-200\\/15 {
  background-color: rgb(254 215 170 / 0.15);
}
.bg-orange-200\\/20 {
  background-color: rgb(254 215 170 / 0.2);
}
.bg-orange-200\\/25 {
  background-color: rgb(254 215 170 / 0.25);
}
.bg-orange-200\\/30 {
  background-color: rgb(254 215 170 / 0.3);
}
.bg-orange-200\\/35 {
  background-color: rgb(254 215 170 / 0.35);
}
.bg-orange-200\\/40 {
  background-color: rgb(254 215 170 / 0.4);
}
.bg-orange-200\\/45 {
  background-color: rgb(254 215 170 / 0.45);
}
.bg-orange-200\\/5 {
  background-color: rgb(254 215 170 / 0.05);
}
.bg-orange-200\\/50 {
  background-color: rgb(254 215 170 / 0.5);
}
.bg-orange-200\\/55 {
  background-color: rgb(254 215 170 / 0.55);
}
.bg-orange-200\\/60 {
  background-color: rgb(254 215 170 / 0.6);
}
.bg-orange-200\\/65 {
  background-color: rgb(254 215 170 / 0.65);
}
.bg-orange-200\\/70 {
  background-color: rgb(254 215 170 / 0.7);
}
.bg-orange-200\\/75 {
  background-color: rgb(254 215 170 / 0.75);
}
.bg-orange-200\\/80 {
  background-color: rgb(254 215 170 / 0.8);
}
.bg-orange-200\\/85 {
  background-color: rgb(254 215 170 / 0.85);
}
.bg-orange-200\\/90 {
  background-color: rgb(254 215 170 / 0.9);
}
.bg-orange-200\\/95 {
  background-color: rgb(254 215 170 / 0.95);
}
.bg-orange-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 186 116 / var(--tw-bg-opacity));
}
.bg-orange-300\\/0 {
  background-color: rgb(253 186 116 / 0);
}
.bg-orange-300\\/10 {
  background-color: rgb(253 186 116 / 0.1);
}
.bg-orange-300\\/100 {
  background-color: rgb(253 186 116 / 1);
}
.bg-orange-300\\/15 {
  background-color: rgb(253 186 116 / 0.15);
}
.bg-orange-300\\/20 {
  background-color: rgb(253 186 116 / 0.2);
}
.bg-orange-300\\/25 {
  background-color: rgb(253 186 116 / 0.25);
}
.bg-orange-300\\/30 {
  background-color: rgb(253 186 116 / 0.3);
}
.bg-orange-300\\/35 {
  background-color: rgb(253 186 116 / 0.35);
}
.bg-orange-300\\/40 {
  background-color: rgb(253 186 116 / 0.4);
}
.bg-orange-300\\/45 {
  background-color: rgb(253 186 116 / 0.45);
}
.bg-orange-300\\/5 {
  background-color: rgb(253 186 116 / 0.05);
}
.bg-orange-300\\/50 {
  background-color: rgb(253 186 116 / 0.5);
}
.bg-orange-300\\/55 {
  background-color: rgb(253 186 116 / 0.55);
}
.bg-orange-300\\/60 {
  background-color: rgb(253 186 116 / 0.6);
}
.bg-orange-300\\/65 {
  background-color: rgb(253 186 116 / 0.65);
}
.bg-orange-300\\/70 {
  background-color: rgb(253 186 116 / 0.7);
}
.bg-orange-300\\/75 {
  background-color: rgb(253 186 116 / 0.75);
}
.bg-orange-300\\/80 {
  background-color: rgb(253 186 116 / 0.8);
}
.bg-orange-300\\/85 {
  background-color: rgb(253 186 116 / 0.85);
}
.bg-orange-300\\/90 {
  background-color: rgb(253 186 116 / 0.9);
}
.bg-orange-300\\/95 {
  background-color: rgb(253 186 116 / 0.95);
}
.bg-orange-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(251 146 60 / var(--tw-bg-opacity));
}
.bg-orange-400\\/0 {
  background-color: rgb(251 146 60 / 0);
}
.bg-orange-400\\/10 {
  background-color: rgb(251 146 60 / 0.1);
}
.bg-orange-400\\/100 {
  background-color: rgb(251 146 60 / 1);
}
.bg-orange-400\\/15 {
  background-color: rgb(251 146 60 / 0.15);
}
.bg-orange-400\\/20 {
  background-color: rgb(251 146 60 / 0.2);
}
.bg-orange-400\\/25 {
  background-color: rgb(251 146 60 / 0.25);
}
.bg-orange-400\\/30 {
  background-color: rgb(251 146 60 / 0.3);
}
.bg-orange-400\\/35 {
  background-color: rgb(251 146 60 / 0.35);
}
.bg-orange-400\\/40 {
  background-color: rgb(251 146 60 / 0.4);
}
.bg-orange-400\\/45 {
  background-color: rgb(251 146 60 / 0.45);
}
.bg-orange-400\\/5 {
  background-color: rgb(251 146 60 / 0.05);
}
.bg-orange-400\\/50 {
  background-color: rgb(251 146 60 / 0.5);
}
.bg-orange-400\\/55 {
  background-color: rgb(251 146 60 / 0.55);
}
.bg-orange-400\\/60 {
  background-color: rgb(251 146 60 / 0.6);
}
.bg-orange-400\\/65 {
  background-color: rgb(251 146 60 / 0.65);
}
.bg-orange-400\\/70 {
  background-color: rgb(251 146 60 / 0.7);
}
.bg-orange-400\\/75 {
  background-color: rgb(251 146 60 / 0.75);
}
.bg-orange-400\\/80 {
  background-color: rgb(251 146 60 / 0.8);
}
.bg-orange-400\\/85 {
  background-color: rgb(251 146 60 / 0.85);
}
.bg-orange-400\\/90 {
  background-color: rgb(251 146 60 / 0.9);
}
.bg-orange-400\\/95 {
  background-color: rgb(251 146 60 / 0.95);
}
.bg-orange-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(255 247 237 / var(--tw-bg-opacity));
}
.bg-orange-50\\/0 {
  background-color: rgb(255 247 237 / 0);
}
.bg-orange-50\\/10 {
  background-color: rgb(255 247 237 / 0.1);
}
.bg-orange-50\\/100 {
  background-color: rgb(255 247 237 / 1);
}
.bg-orange-50\\/15 {
  background-color: rgb(255 247 237 / 0.15);
}
.bg-orange-50\\/20 {
  background-color: rgb(255 247 237 / 0.2);
}
.bg-orange-50\\/25 {
  background-color: rgb(255 247 237 / 0.25);
}
.bg-orange-50\\/30 {
  background-color: rgb(255 247 237 / 0.3);
}
.bg-orange-50\\/35 {
  background-color: rgb(255 247 237 / 0.35);
}
.bg-orange-50\\/40 {
  background-color: rgb(255 247 237 / 0.4);
}
.bg-orange-50\\/45 {
  background-color: rgb(255 247 237 / 0.45);
}
.bg-orange-50\\/5 {
  background-color: rgb(255 247 237 / 0.05);
}
.bg-orange-50\\/50 {
  background-color: rgb(255 247 237 / 0.5);
}
.bg-orange-50\\/55 {
  background-color: rgb(255 247 237 / 0.55);
}
.bg-orange-50\\/60 {
  background-color: rgb(255 247 237 / 0.6);
}
.bg-orange-50\\/65 {
  background-color: rgb(255 247 237 / 0.65);
}
.bg-orange-50\\/70 {
  background-color: rgb(255 247 237 / 0.7);
}
.bg-orange-50\\/75 {
  background-color: rgb(255 247 237 / 0.75);
}
.bg-orange-50\\/80 {
  background-color: rgb(255 247 237 / 0.8);
}
.bg-orange-50\\/85 {
  background-color: rgb(255 247 237 / 0.85);
}
.bg-orange-50\\/90 {
  background-color: rgb(255 247 237 / 0.9);
}
.bg-orange-50\\/95 {
  background-color: rgb(255 247 237 / 0.95);
}
.bg-orange-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 115 22 / var(--tw-bg-opacity));
}
.bg-orange-500\\/0 {
  background-color: rgb(249 115 22 / 0);
}
.bg-orange-500\\/10 {
  background-color: rgb(249 115 22 / 0.1);
}
.bg-orange-500\\/100 {
  background-color: rgb(249 115 22 / 1);
}
.bg-orange-500\\/15 {
  background-color: rgb(249 115 22 / 0.15);
}
.bg-orange-500\\/20 {
  background-color: rgb(249 115 22 / 0.2);
}
.bg-orange-500\\/25 {
  background-color: rgb(249 115 22 / 0.25);
}
.bg-orange-500\\/30 {
  background-color: rgb(249 115 22 / 0.3);
}
.bg-orange-500\\/35 {
  background-color: rgb(249 115 22 / 0.35);
}
.bg-orange-500\\/40 {
  background-color: rgb(249 115 22 / 0.4);
}
.bg-orange-500\\/45 {
  background-color: rgb(249 115 22 / 0.45);
}
.bg-orange-500\\/5 {
  background-color: rgb(249 115 22 / 0.05);
}
.bg-orange-500\\/50 {
  background-color: rgb(249 115 22 / 0.5);
}
.bg-orange-500\\/55 {
  background-color: rgb(249 115 22 / 0.55);
}
.bg-orange-500\\/60 {
  background-color: rgb(249 115 22 / 0.6);
}
.bg-orange-500\\/65 {
  background-color: rgb(249 115 22 / 0.65);
}
.bg-orange-500\\/70 {
  background-color: rgb(249 115 22 / 0.7);
}
.bg-orange-500\\/75 {
  background-color: rgb(249 115 22 / 0.75);
}
.bg-orange-500\\/80 {
  background-color: rgb(249 115 22 / 0.8);
}
.bg-orange-500\\/85 {
  background-color: rgb(249 115 22 / 0.85);
}
.bg-orange-500\\/90 {
  background-color: rgb(249 115 22 / 0.9);
}
.bg-orange-500\\/95 {
  background-color: rgb(249 115 22 / 0.95);
}
.bg-orange-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(234 88 12 / var(--tw-bg-opacity));
}
.bg-orange-600\\/0 {
  background-color: rgb(234 88 12 / 0);
}
.bg-orange-600\\/10 {
  background-color: rgb(234 88 12 / 0.1);
}
.bg-orange-600\\/100 {
  background-color: rgb(234 88 12 / 1);
}
.bg-orange-600\\/15 {
  background-color: rgb(234 88 12 / 0.15);
}
.bg-orange-600\\/20 {
  background-color: rgb(234 88 12 / 0.2);
}
.bg-orange-600\\/25 {
  background-color: rgb(234 88 12 / 0.25);
}
.bg-orange-600\\/30 {
  background-color: rgb(234 88 12 / 0.3);
}
.bg-orange-600\\/35 {
  background-color: rgb(234 88 12 / 0.35);
}
.bg-orange-600\\/40 {
  background-color: rgb(234 88 12 / 0.4);
}
.bg-orange-600\\/45 {
  background-color: rgb(234 88 12 / 0.45);
}
.bg-orange-600\\/5 {
  background-color: rgb(234 88 12 / 0.05);
}
.bg-orange-600\\/50 {
  background-color: rgb(234 88 12 / 0.5);
}
.bg-orange-600\\/55 {
  background-color: rgb(234 88 12 / 0.55);
}
.bg-orange-600\\/60 {
  background-color: rgb(234 88 12 / 0.6);
}
.bg-orange-600\\/65 {
  background-color: rgb(234 88 12 / 0.65);
}
.bg-orange-600\\/70 {
  background-color: rgb(234 88 12 / 0.7);
}
.bg-orange-600\\/75 {
  background-color: rgb(234 88 12 / 0.75);
}
.bg-orange-600\\/80 {
  background-color: rgb(234 88 12 / 0.8);
}
.bg-orange-600\\/85 {
  background-color: rgb(234 88 12 / 0.85);
}
.bg-orange-600\\/90 {
  background-color: rgb(234 88 12 / 0.9);
}
.bg-orange-600\\/95 {
  background-color: rgb(234 88 12 / 0.95);
}
.bg-orange-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(194 65 12 / var(--tw-bg-opacity));
}
.bg-orange-700\\/0 {
  background-color: rgb(194 65 12 / 0);
}
.bg-orange-700\\/10 {
  background-color: rgb(194 65 12 / 0.1);
}
.bg-orange-700\\/100 {
  background-color: rgb(194 65 12 / 1);
}
.bg-orange-700\\/15 {
  background-color: rgb(194 65 12 / 0.15);
}
.bg-orange-700\\/20 {
  background-color: rgb(194 65 12 / 0.2);
}
.bg-orange-700\\/25 {
  background-color: rgb(194 65 12 / 0.25);
}
.bg-orange-700\\/30 {
  background-color: rgb(194 65 12 / 0.3);
}
.bg-orange-700\\/35 {
  background-color: rgb(194 65 12 / 0.35);
}
.bg-orange-700\\/40 {
  background-color: rgb(194 65 12 / 0.4);
}
.bg-orange-700\\/45 {
  background-color: rgb(194 65 12 / 0.45);
}
.bg-orange-700\\/5 {
  background-color: rgb(194 65 12 / 0.05);
}
.bg-orange-700\\/50 {
  background-color: rgb(194 65 12 / 0.5);
}
.bg-orange-700\\/55 {
  background-color: rgb(194 65 12 / 0.55);
}
.bg-orange-700\\/60 {
  background-color: rgb(194 65 12 / 0.6);
}
.bg-orange-700\\/65 {
  background-color: rgb(194 65 12 / 0.65);
}
.bg-orange-700\\/70 {
  background-color: rgb(194 65 12 / 0.7);
}
.bg-orange-700\\/75 {
  background-color: rgb(194 65 12 / 0.75);
}
.bg-orange-700\\/80 {
  background-color: rgb(194 65 12 / 0.8);
}
.bg-orange-700\\/85 {
  background-color: rgb(194 65 12 / 0.85);
}
.bg-orange-700\\/90 {
  background-color: rgb(194 65 12 / 0.9);
}
.bg-orange-700\\/95 {
  background-color: rgb(194 65 12 / 0.95);
}
.bg-orange-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(154 52 18 / var(--tw-bg-opacity));
}
.bg-orange-800\\/0 {
  background-color: rgb(154 52 18 / 0);
}
.bg-orange-800\\/10 {
  background-color: rgb(154 52 18 / 0.1);
}
.bg-orange-800\\/100 {
  background-color: rgb(154 52 18 / 1);
}
.bg-orange-800\\/15 {
  background-color: rgb(154 52 18 / 0.15);
}
.bg-orange-800\\/20 {
  background-color: rgb(154 52 18 / 0.2);
}
.bg-orange-800\\/25 {
  background-color: rgb(154 52 18 / 0.25);
}
.bg-orange-800\\/30 {
  background-color: rgb(154 52 18 / 0.3);
}
.bg-orange-800\\/35 {
  background-color: rgb(154 52 18 / 0.35);
}
.bg-orange-800\\/40 {
  background-color: rgb(154 52 18 / 0.4);
}
.bg-orange-800\\/45 {
  background-color: rgb(154 52 18 / 0.45);
}
.bg-orange-800\\/5 {
  background-color: rgb(154 52 18 / 0.05);
}
.bg-orange-800\\/50 {
  background-color: rgb(154 52 18 / 0.5);
}
.bg-orange-800\\/55 {
  background-color: rgb(154 52 18 / 0.55);
}
.bg-orange-800\\/60 {
  background-color: rgb(154 52 18 / 0.6);
}
.bg-orange-800\\/65 {
  background-color: rgb(154 52 18 / 0.65);
}
.bg-orange-800\\/70 {
  background-color: rgb(154 52 18 / 0.7);
}
.bg-orange-800\\/75 {
  background-color: rgb(154 52 18 / 0.75);
}
.bg-orange-800\\/80 {
  background-color: rgb(154 52 18 / 0.8);
}
.bg-orange-800\\/85 {
  background-color: rgb(154 52 18 / 0.85);
}
.bg-orange-800\\/90 {
  background-color: rgb(154 52 18 / 0.9);
}
.bg-orange-800\\/95 {
  background-color: rgb(154 52 18 / 0.95);
}
.bg-orange-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(124 45 18 / var(--tw-bg-opacity));
}
.bg-orange-900\\/0 {
  background-color: rgb(124 45 18 / 0);
}
.bg-orange-900\\/10 {
  background-color: rgb(124 45 18 / 0.1);
}
.bg-orange-900\\/100 {
  background-color: rgb(124 45 18 / 1);
}
.bg-orange-900\\/15 {
  background-color: rgb(124 45 18 / 0.15);
}
.bg-orange-900\\/20 {
  background-color: rgb(124 45 18 / 0.2);
}
.bg-orange-900\\/25 {
  background-color: rgb(124 45 18 / 0.25);
}
.bg-orange-900\\/30 {
  background-color: rgb(124 45 18 / 0.3);
}
.bg-orange-900\\/35 {
  background-color: rgb(124 45 18 / 0.35);
}
.bg-orange-900\\/40 {
  background-color: rgb(124 45 18 / 0.4);
}
.bg-orange-900\\/45 {
  background-color: rgb(124 45 18 / 0.45);
}
.bg-orange-900\\/5 {
  background-color: rgb(124 45 18 / 0.05);
}
.bg-orange-900\\/50 {
  background-color: rgb(124 45 18 / 0.5);
}
.bg-orange-900\\/55 {
  background-color: rgb(124 45 18 / 0.55);
}
.bg-orange-900\\/60 {
  background-color: rgb(124 45 18 / 0.6);
}
.bg-orange-900\\/65 {
  background-color: rgb(124 45 18 / 0.65);
}
.bg-orange-900\\/70 {
  background-color: rgb(124 45 18 / 0.7);
}
.bg-orange-900\\/75 {
  background-color: rgb(124 45 18 / 0.75);
}
.bg-orange-900\\/80 {
  background-color: rgb(124 45 18 / 0.8);
}
.bg-orange-900\\/85 {
  background-color: rgb(124 45 18 / 0.85);
}
.bg-orange-900\\/90 {
  background-color: rgb(124 45 18 / 0.9);
}
.bg-orange-900\\/95 {
  background-color: rgb(124 45 18 / 0.95);
}
.bg-orange-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(67 20 7 / var(--tw-bg-opacity));
}
.bg-orange-950\\/0 {
  background-color: rgb(67 20 7 / 0);
}
.bg-orange-950\\/10 {
  background-color: rgb(67 20 7 / 0.1);
}
.bg-orange-950\\/100 {
  background-color: rgb(67 20 7 / 1);
}
.bg-orange-950\\/15 {
  background-color: rgb(67 20 7 / 0.15);
}
.bg-orange-950\\/20 {
  background-color: rgb(67 20 7 / 0.2);
}
.bg-orange-950\\/25 {
  background-color: rgb(67 20 7 / 0.25);
}
.bg-orange-950\\/30 {
  background-color: rgb(67 20 7 / 0.3);
}
.bg-orange-950\\/35 {
  background-color: rgb(67 20 7 / 0.35);
}
.bg-orange-950\\/40 {
  background-color: rgb(67 20 7 / 0.4);
}
.bg-orange-950\\/45 {
  background-color: rgb(67 20 7 / 0.45);
}
.bg-orange-950\\/5 {
  background-color: rgb(67 20 7 / 0.05);
}
.bg-orange-950\\/50 {
  background-color: rgb(67 20 7 / 0.5);
}
.bg-orange-950\\/55 {
  background-color: rgb(67 20 7 / 0.55);
}
.bg-orange-950\\/60 {
  background-color: rgb(67 20 7 / 0.6);
}
.bg-orange-950\\/65 {
  background-color: rgb(67 20 7 / 0.65);
}
.bg-orange-950\\/70 {
  background-color: rgb(67 20 7 / 0.7);
}
.bg-orange-950\\/75 {
  background-color: rgb(67 20 7 / 0.75);
}
.bg-orange-950\\/80 {
  background-color: rgb(67 20 7 / 0.8);
}
.bg-orange-950\\/85 {
  background-color: rgb(67 20 7 / 0.85);
}
.bg-orange-950\\/90 {
  background-color: rgb(67 20 7 / 0.9);
}
.bg-orange-950\\/95 {
  background-color: rgb(67 20 7 / 0.95);
}
.bg-pink-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(252 231 243 / var(--tw-bg-opacity));
}
.bg-pink-100\\/0 {
  background-color: rgb(252 231 243 / 0);
}
.bg-pink-100\\/10 {
  background-color: rgb(252 231 243 / 0.1);
}
.bg-pink-100\\/100 {
  background-color: rgb(252 231 243 / 1);
}
.bg-pink-100\\/15 {
  background-color: rgb(252 231 243 / 0.15);
}
.bg-pink-100\\/20 {
  background-color: rgb(252 231 243 / 0.2);
}
.bg-pink-100\\/25 {
  background-color: rgb(252 231 243 / 0.25);
}
.bg-pink-100\\/30 {
  background-color: rgb(252 231 243 / 0.3);
}
.bg-pink-100\\/35 {
  background-color: rgb(252 231 243 / 0.35);
}
.bg-pink-100\\/40 {
  background-color: rgb(252 231 243 / 0.4);
}
.bg-pink-100\\/45 {
  background-color: rgb(252 231 243 / 0.45);
}
.bg-pink-100\\/5 {
  background-color: rgb(252 231 243 / 0.05);
}
.bg-pink-100\\/50 {
  background-color: rgb(252 231 243 / 0.5);
}
.bg-pink-100\\/55 {
  background-color: rgb(252 231 243 / 0.55);
}
.bg-pink-100\\/60 {
  background-color: rgb(252 231 243 / 0.6);
}
.bg-pink-100\\/65 {
  background-color: rgb(252 231 243 / 0.65);
}
.bg-pink-100\\/70 {
  background-color: rgb(252 231 243 / 0.7);
}
.bg-pink-100\\/75 {
  background-color: rgb(252 231 243 / 0.75);
}
.bg-pink-100\\/80 {
  background-color: rgb(252 231 243 / 0.8);
}
.bg-pink-100\\/85 {
  background-color: rgb(252 231 243 / 0.85);
}
.bg-pink-100\\/90 {
  background-color: rgb(252 231 243 / 0.9);
}
.bg-pink-100\\/95 {
  background-color: rgb(252 231 243 / 0.95);
}
.bg-pink-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(251 207 232 / var(--tw-bg-opacity));
}
.bg-pink-200\\/0 {
  background-color: rgb(251 207 232 / 0);
}
.bg-pink-200\\/10 {
  background-color: rgb(251 207 232 / 0.1);
}
.bg-pink-200\\/100 {
  background-color: rgb(251 207 232 / 1);
}
.bg-pink-200\\/15 {
  background-color: rgb(251 207 232 / 0.15);
}
.bg-pink-200\\/20 {
  background-color: rgb(251 207 232 / 0.2);
}
.bg-pink-200\\/25 {
  background-color: rgb(251 207 232 / 0.25);
}
.bg-pink-200\\/30 {
  background-color: rgb(251 207 232 / 0.3);
}
.bg-pink-200\\/35 {
  background-color: rgb(251 207 232 / 0.35);
}
.bg-pink-200\\/40 {
  background-color: rgb(251 207 232 / 0.4);
}
.bg-pink-200\\/45 {
  background-color: rgb(251 207 232 / 0.45);
}
.bg-pink-200\\/5 {
  background-color: rgb(251 207 232 / 0.05);
}
.bg-pink-200\\/50 {
  background-color: rgb(251 207 232 / 0.5);
}
.bg-pink-200\\/55 {
  background-color: rgb(251 207 232 / 0.55);
}
.bg-pink-200\\/60 {
  background-color: rgb(251 207 232 / 0.6);
}
.bg-pink-200\\/65 {
  background-color: rgb(251 207 232 / 0.65);
}
.bg-pink-200\\/70 {
  background-color: rgb(251 207 232 / 0.7);
}
.bg-pink-200\\/75 {
  background-color: rgb(251 207 232 / 0.75);
}
.bg-pink-200\\/80 {
  background-color: rgb(251 207 232 / 0.8);
}
.bg-pink-200\\/85 {
  background-color: rgb(251 207 232 / 0.85);
}
.bg-pink-200\\/90 {
  background-color: rgb(251 207 232 / 0.9);
}
.bg-pink-200\\/95 {
  background-color: rgb(251 207 232 / 0.95);
}
.bg-pink-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(249 168 212 / var(--tw-bg-opacity));
}
.bg-pink-300\\/0 {
  background-color: rgb(249 168 212 / 0);
}
.bg-pink-300\\/10 {
  background-color: rgb(249 168 212 / 0.1);
}
.bg-pink-300\\/100 {
  background-color: rgb(249 168 212 / 1);
}
.bg-pink-300\\/15 {
  background-color: rgb(249 168 212 / 0.15);
}
.bg-pink-300\\/20 {
  background-color: rgb(249 168 212 / 0.2);
}
.bg-pink-300\\/25 {
  background-color: rgb(249 168 212 / 0.25);
}
.bg-pink-300\\/30 {
  background-color: rgb(249 168 212 / 0.3);
}
.bg-pink-300\\/35 {
  background-color: rgb(249 168 212 / 0.35);
}
.bg-pink-300\\/40 {
  background-color: rgb(249 168 212 / 0.4);
}
.bg-pink-300\\/45 {
  background-color: rgb(249 168 212 / 0.45);
}
.bg-pink-300\\/5 {
  background-color: rgb(249 168 212 / 0.05);
}
.bg-pink-300\\/50 {
  background-color: rgb(249 168 212 / 0.5);
}
.bg-pink-300\\/55 {
  background-color: rgb(249 168 212 / 0.55);
}
.bg-pink-300\\/60 {
  background-color: rgb(249 168 212 / 0.6);
}
.bg-pink-300\\/65 {
  background-color: rgb(249 168 212 / 0.65);
}
.bg-pink-300\\/70 {
  background-color: rgb(249 168 212 / 0.7);
}
.bg-pink-300\\/75 {
  background-color: rgb(249 168 212 / 0.75);
}
.bg-pink-300\\/80 {
  background-color: rgb(249 168 212 / 0.8);
}
.bg-pink-300\\/85 {
  background-color: rgb(249 168 212 / 0.85);
}
.bg-pink-300\\/90 {
  background-color: rgb(249 168 212 / 0.9);
}
.bg-pink-300\\/95 {
  background-color: rgb(249 168 212 / 0.95);
}
.bg-pink-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(244 114 182 / var(--tw-bg-opacity));
}
.bg-pink-400\\/0 {
  background-color: rgb(244 114 182 / 0);
}
.bg-pink-400\\/10 {
  background-color: rgb(244 114 182 / 0.1);
}
.bg-pink-400\\/100 {
  background-color: rgb(244 114 182 / 1);
}
.bg-pink-400\\/15 {
  background-color: rgb(244 114 182 / 0.15);
}
.bg-pink-400\\/20 {
  background-color: rgb(244 114 182 / 0.2);
}
.bg-pink-400\\/25 {
  background-color: rgb(244 114 182 / 0.25);
}
.bg-pink-400\\/30 {
  background-color: rgb(244 114 182 / 0.3);
}
.bg-pink-400\\/35 {
  background-color: rgb(244 114 182 / 0.35);
}
.bg-pink-400\\/40 {
  background-color: rgb(244 114 182 / 0.4);
}
.bg-pink-400\\/45 {
  background-color: rgb(244 114 182 / 0.45);
}
.bg-pink-400\\/5 {
  background-color: rgb(244 114 182 / 0.05);
}
.bg-pink-400\\/50 {
  background-color: rgb(244 114 182 / 0.5);
}
.bg-pink-400\\/55 {
  background-color: rgb(244 114 182 / 0.55);
}
.bg-pink-400\\/60 {
  background-color: rgb(244 114 182 / 0.6);
}
.bg-pink-400\\/65 {
  background-color: rgb(244 114 182 / 0.65);
}
.bg-pink-400\\/70 {
  background-color: rgb(244 114 182 / 0.7);
}
.bg-pink-400\\/75 {
  background-color: rgb(244 114 182 / 0.75);
}
.bg-pink-400\\/80 {
  background-color: rgb(244 114 182 / 0.8);
}
.bg-pink-400\\/85 {
  background-color: rgb(244 114 182 / 0.85);
}
.bg-pink-400\\/90 {
  background-color: rgb(244 114 182 / 0.9);
}
.bg-pink-400\\/95 {
  background-color: rgb(244 114 182 / 0.95);
}
.bg-pink-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 242 248 / var(--tw-bg-opacity));
}
.bg-pink-50\\/0 {
  background-color: rgb(253 242 248 / 0);
}
.bg-pink-50\\/10 {
  background-color: rgb(253 242 248 / 0.1);
}
.bg-pink-50\\/100 {
  background-color: rgb(253 242 248 / 1);
}
.bg-pink-50\\/15 {
  background-color: rgb(253 242 248 / 0.15);
}
.bg-pink-50\\/20 {
  background-color: rgb(253 242 248 / 0.2);
}
.bg-pink-50\\/25 {
  background-color: rgb(253 242 248 / 0.25);
}
.bg-pink-50\\/30 {
  background-color: rgb(253 242 248 / 0.3);
}
.bg-pink-50\\/35 {
  background-color: rgb(253 242 248 / 0.35);
}
.bg-pink-50\\/40 {
  background-color: rgb(253 242 248 / 0.4);
}
.bg-pink-50\\/45 {
  background-color: rgb(253 242 248 / 0.45);
}
.bg-pink-50\\/5 {
  background-color: rgb(253 242 248 / 0.05);
}
.bg-pink-50\\/50 {
  background-color: rgb(253 242 248 / 0.5);
}
.bg-pink-50\\/55 {
  background-color: rgb(253 242 248 / 0.55);
}
.bg-pink-50\\/60 {
  background-color: rgb(253 242 248 / 0.6);
}
.bg-pink-50\\/65 {
  background-color: rgb(253 242 248 / 0.65);
}
.bg-pink-50\\/70 {
  background-color: rgb(253 242 248 / 0.7);
}
.bg-pink-50\\/75 {
  background-color: rgb(253 242 248 / 0.75);
}
.bg-pink-50\\/80 {
  background-color: rgb(253 242 248 / 0.8);
}
.bg-pink-50\\/85 {
  background-color: rgb(253 242 248 / 0.85);
}
.bg-pink-50\\/90 {
  background-color: rgb(253 242 248 / 0.9);
}
.bg-pink-50\\/95 {
  background-color: rgb(253 242 248 / 0.95);
}
.bg-pink-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(236 72 153 / var(--tw-bg-opacity));
}
.bg-pink-500\\/0 {
  background-color: rgb(236 72 153 / 0);
}
.bg-pink-500\\/10 {
  background-color: rgb(236 72 153 / 0.1);
}
.bg-pink-500\\/100 {
  background-color: rgb(236 72 153 / 1);
}
.bg-pink-500\\/15 {
  background-color: rgb(236 72 153 / 0.15);
}
.bg-pink-500\\/20 {
  background-color: rgb(236 72 153 / 0.2);
}
.bg-pink-500\\/25 {
  background-color: rgb(236 72 153 / 0.25);
}
.bg-pink-500\\/30 {
  background-color: rgb(236 72 153 / 0.3);
}
.bg-pink-500\\/35 {
  background-color: rgb(236 72 153 / 0.35);
}
.bg-pink-500\\/40 {
  background-color: rgb(236 72 153 / 0.4);
}
.bg-pink-500\\/45 {
  background-color: rgb(236 72 153 / 0.45);
}
.bg-pink-500\\/5 {
  background-color: rgb(236 72 153 / 0.05);
}
.bg-pink-500\\/50 {
  background-color: rgb(236 72 153 / 0.5);
}
.bg-pink-500\\/55 {
  background-color: rgb(236 72 153 / 0.55);
}
.bg-pink-500\\/60 {
  background-color: rgb(236 72 153 / 0.6);
}
.bg-pink-500\\/65 {
  background-color: rgb(236 72 153 / 0.65);
}
.bg-pink-500\\/70 {
  background-color: rgb(236 72 153 / 0.7);
}
.bg-pink-500\\/75 {
  background-color: rgb(236 72 153 / 0.75);
}
.bg-pink-500\\/80 {
  background-color: rgb(236 72 153 / 0.8);
}
.bg-pink-500\\/85 {
  background-color: rgb(236 72 153 / 0.85);
}
.bg-pink-500\\/90 {
  background-color: rgb(236 72 153 / 0.9);
}
.bg-pink-500\\/95 {
  background-color: rgb(236 72 153 / 0.95);
}
.bg-pink-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(219 39 119 / var(--tw-bg-opacity));
}
.bg-pink-600\\/0 {
  background-color: rgb(219 39 119 / 0);
}
.bg-pink-600\\/10 {
  background-color: rgb(219 39 119 / 0.1);
}
.bg-pink-600\\/100 {
  background-color: rgb(219 39 119 / 1);
}
.bg-pink-600\\/15 {
  background-color: rgb(219 39 119 / 0.15);
}
.bg-pink-600\\/20 {
  background-color: rgb(219 39 119 / 0.2);
}
.bg-pink-600\\/25 {
  background-color: rgb(219 39 119 / 0.25);
}
.bg-pink-600\\/30 {
  background-color: rgb(219 39 119 / 0.3);
}
.bg-pink-600\\/35 {
  background-color: rgb(219 39 119 / 0.35);
}
.bg-pink-600\\/40 {
  background-color: rgb(219 39 119 / 0.4);
}
.bg-pink-600\\/45 {
  background-color: rgb(219 39 119 / 0.45);
}
.bg-pink-600\\/5 {
  background-color: rgb(219 39 119 / 0.05);
}
.bg-pink-600\\/50 {
  background-color: rgb(219 39 119 / 0.5);
}
.bg-pink-600\\/55 {
  background-color: rgb(219 39 119 / 0.55);
}
.bg-pink-600\\/60 {
  background-color: rgb(219 39 119 / 0.6);
}
.bg-pink-600\\/65 {
  background-color: rgb(219 39 119 / 0.65);
}
.bg-pink-600\\/70 {
  background-color: rgb(219 39 119 / 0.7);
}
.bg-pink-600\\/75 {
  background-color: rgb(219 39 119 / 0.75);
}
.bg-pink-600\\/80 {
  background-color: rgb(219 39 119 / 0.8);
}
.bg-pink-600\\/85 {
  background-color: rgb(219 39 119 / 0.85);
}
.bg-pink-600\\/90 {
  background-color: rgb(219 39 119 / 0.9);
}
.bg-pink-600\\/95 {
  background-color: rgb(219 39 119 / 0.95);
}
.bg-pink-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(190 24 93 / var(--tw-bg-opacity));
}
.bg-pink-700\\/0 {
  background-color: rgb(190 24 93 / 0);
}
.bg-pink-700\\/10 {
  background-color: rgb(190 24 93 / 0.1);
}
.bg-pink-700\\/100 {
  background-color: rgb(190 24 93 / 1);
}
.bg-pink-700\\/15 {
  background-color: rgb(190 24 93 / 0.15);
}
.bg-pink-700\\/20 {
  background-color: rgb(190 24 93 / 0.2);
}
.bg-pink-700\\/25 {
  background-color: rgb(190 24 93 / 0.25);
}
.bg-pink-700\\/30 {
  background-color: rgb(190 24 93 / 0.3);
}
.bg-pink-700\\/35 {
  background-color: rgb(190 24 93 / 0.35);
}
.bg-pink-700\\/40 {
  background-color: rgb(190 24 93 / 0.4);
}
.bg-pink-700\\/45 {
  background-color: rgb(190 24 93 / 0.45);
}
.bg-pink-700\\/5 {
  background-color: rgb(190 24 93 / 0.05);
}
.bg-pink-700\\/50 {
  background-color: rgb(190 24 93 / 0.5);
}
.bg-pink-700\\/55 {
  background-color: rgb(190 24 93 / 0.55);
}
.bg-pink-700\\/60 {
  background-color: rgb(190 24 93 / 0.6);
}
.bg-pink-700\\/65 {
  background-color: rgb(190 24 93 / 0.65);
}
.bg-pink-700\\/70 {
  background-color: rgb(190 24 93 / 0.7);
}
.bg-pink-700\\/75 {
  background-color: rgb(190 24 93 / 0.75);
}
.bg-pink-700\\/80 {
  background-color: rgb(190 24 93 / 0.8);
}
.bg-pink-700\\/85 {
  background-color: rgb(190 24 93 / 0.85);
}
.bg-pink-700\\/90 {
  background-color: rgb(190 24 93 / 0.9);
}
.bg-pink-700\\/95 {
  background-color: rgb(190 24 93 / 0.95);
}
.bg-pink-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(157 23 77 / var(--tw-bg-opacity));
}
.bg-pink-800\\/0 {
  background-color: rgb(157 23 77 / 0);
}
.bg-pink-800\\/10 {
  background-color: rgb(157 23 77 / 0.1);
}
.bg-pink-800\\/100 {
  background-color: rgb(157 23 77 / 1);
}
.bg-pink-800\\/15 {
  background-color: rgb(157 23 77 / 0.15);
}
.bg-pink-800\\/20 {
  background-color: rgb(157 23 77 / 0.2);
}
.bg-pink-800\\/25 {
  background-color: rgb(157 23 77 / 0.25);
}
.bg-pink-800\\/30 {
  background-color: rgb(157 23 77 / 0.3);
}
.bg-pink-800\\/35 {
  background-color: rgb(157 23 77 / 0.35);
}
.bg-pink-800\\/40 {
  background-color: rgb(157 23 77 / 0.4);
}
.bg-pink-800\\/45 {
  background-color: rgb(157 23 77 / 0.45);
}
.bg-pink-800\\/5 {
  background-color: rgb(157 23 77 / 0.05);
}
.bg-pink-800\\/50 {
  background-color: rgb(157 23 77 / 0.5);
}
.bg-pink-800\\/55 {
  background-color: rgb(157 23 77 / 0.55);
}
.bg-pink-800\\/60 {
  background-color: rgb(157 23 77 / 0.6);
}
.bg-pink-800\\/65 {
  background-color: rgb(157 23 77 / 0.65);
}
.bg-pink-800\\/70 {
  background-color: rgb(157 23 77 / 0.7);
}
.bg-pink-800\\/75 {
  background-color: rgb(157 23 77 / 0.75);
}
.bg-pink-800\\/80 {
  background-color: rgb(157 23 77 / 0.8);
}
.bg-pink-800\\/85 {
  background-color: rgb(157 23 77 / 0.85);
}
.bg-pink-800\\/90 {
  background-color: rgb(157 23 77 / 0.9);
}
.bg-pink-800\\/95 {
  background-color: rgb(157 23 77 / 0.95);
}
.bg-pink-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(131 24 67 / var(--tw-bg-opacity));
}
.bg-pink-900\\/0 {
  background-color: rgb(131 24 67 / 0);
}
.bg-pink-900\\/10 {
  background-color: rgb(131 24 67 / 0.1);
}
.bg-pink-900\\/100 {
  background-color: rgb(131 24 67 / 1);
}
.bg-pink-900\\/15 {
  background-color: rgb(131 24 67 / 0.15);
}
.bg-pink-900\\/20 {
  background-color: rgb(131 24 67 / 0.2);
}
.bg-pink-900\\/25 {
  background-color: rgb(131 24 67 / 0.25);
}
.bg-pink-900\\/30 {
  background-color: rgb(131 24 67 / 0.3);
}
.bg-pink-900\\/35 {
  background-color: rgb(131 24 67 / 0.35);
}
.bg-pink-900\\/40 {
  background-color: rgb(131 24 67 / 0.4);
}
.bg-pink-900\\/45 {
  background-color: rgb(131 24 67 / 0.45);
}
.bg-pink-900\\/5 {
  background-color: rgb(131 24 67 / 0.05);
}
.bg-pink-900\\/50 {
  background-color: rgb(131 24 67 / 0.5);
}
.bg-pink-900\\/55 {
  background-color: rgb(131 24 67 / 0.55);
}
.bg-pink-900\\/60 {
  background-color: rgb(131 24 67 / 0.6);
}
.bg-pink-900\\/65 {
  background-color: rgb(131 24 67 / 0.65);
}
.bg-pink-900\\/70 {
  background-color: rgb(131 24 67 / 0.7);
}
.bg-pink-900\\/75 {
  background-color: rgb(131 24 67 / 0.75);
}
.bg-pink-900\\/80 {
  background-color: rgb(131 24 67 / 0.8);
}
.bg-pink-900\\/85 {
  background-color: rgb(131 24 67 / 0.85);
}
.bg-pink-900\\/90 {
  background-color: rgb(131 24 67 / 0.9);
}
.bg-pink-900\\/95 {
  background-color: rgb(131 24 67 / 0.95);
}
.bg-pink-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(80 7 36 / var(--tw-bg-opacity));
}
.bg-pink-950\\/0 {
  background-color: rgb(80 7 36 / 0);
}
.bg-pink-950\\/10 {
  background-color: rgb(80 7 36 / 0.1);
}
.bg-pink-950\\/100 {
  background-color: rgb(80 7 36 / 1);
}
.bg-pink-950\\/15 {
  background-color: rgb(80 7 36 / 0.15);
}
.bg-pink-950\\/20 {
  background-color: rgb(80 7 36 / 0.2);
}
.bg-pink-950\\/25 {
  background-color: rgb(80 7 36 / 0.25);
}
.bg-pink-950\\/30 {
  background-color: rgb(80 7 36 / 0.3);
}
.bg-pink-950\\/35 {
  background-color: rgb(80 7 36 / 0.35);
}
.bg-pink-950\\/40 {
  background-color: rgb(80 7 36 / 0.4);
}
.bg-pink-950\\/45 {
  background-color: rgb(80 7 36 / 0.45);
}
.bg-pink-950\\/5 {
  background-color: rgb(80 7 36 / 0.05);
}
.bg-pink-950\\/50 {
  background-color: rgb(80 7 36 / 0.5);
}
.bg-pink-950\\/55 {
  background-color: rgb(80 7 36 / 0.55);
}
.bg-pink-950\\/60 {
  background-color: rgb(80 7 36 / 0.6);
}
.bg-pink-950\\/65 {
  background-color: rgb(80 7 36 / 0.65);
}
.bg-pink-950\\/70 {
  background-color: rgb(80 7 36 / 0.7);
}
.bg-pink-950\\/75 {
  background-color: rgb(80 7 36 / 0.75);
}
.bg-pink-950\\/80 {
  background-color: rgb(80 7 36 / 0.8);
}
.bg-pink-950\\/85 {
  background-color: rgb(80 7 36 / 0.85);
}
.bg-pink-950\\/90 {
  background-color: rgb(80 7 36 / 0.9);
}
.bg-pink-950\\/95 {
  background-color: rgb(80 7 36 / 0.95);
}
.bg-purple-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(243 232 255 / var(--tw-bg-opacity));
}
.bg-purple-100\\/0 {
  background-color: rgb(243 232 255 / 0);
}
.bg-purple-100\\/10 {
  background-color: rgb(243 232 255 / 0.1);
}
.bg-purple-100\\/100 {
  background-color: rgb(243 232 255 / 1);
}
.bg-purple-100\\/15 {
  background-color: rgb(243 232 255 / 0.15);
}
.bg-purple-100\\/20 {
  background-color: rgb(243 232 255 / 0.2);
}
.bg-purple-100\\/25 {
  background-color: rgb(243 232 255 / 0.25);
}
.bg-purple-100\\/30 {
  background-color: rgb(243 232 255 / 0.3);
}
.bg-purple-100\\/35 {
  background-color: rgb(243 232 255 / 0.35);
}
.bg-purple-100\\/40 {
  background-color: rgb(243 232 255 / 0.4);
}
.bg-purple-100\\/45 {
  background-color: rgb(243 232 255 / 0.45);
}
.bg-purple-100\\/5 {
  background-color: rgb(243 232 255 / 0.05);
}
.bg-purple-100\\/50 {
  background-color: rgb(243 232 255 / 0.5);
}
.bg-purple-100\\/55 {
  background-color: rgb(243 232 255 / 0.55);
}
.bg-purple-100\\/60 {
  background-color: rgb(243 232 255 / 0.6);
}
.bg-purple-100\\/65 {
  background-color: rgb(243 232 255 / 0.65);
}
.bg-purple-100\\/70 {
  background-color: rgb(243 232 255 / 0.7);
}
.bg-purple-100\\/75 {
  background-color: rgb(243 232 255 / 0.75);
}
.bg-purple-100\\/80 {
  background-color: rgb(243 232 255 / 0.8);
}
.bg-purple-100\\/85 {
  background-color: rgb(243 232 255 / 0.85);
}
.bg-purple-100\\/90 {
  background-color: rgb(243 232 255 / 0.9);
}
.bg-purple-100\\/95 {
  background-color: rgb(243 232 255 / 0.95);
}
.bg-purple-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(233 213 255 / var(--tw-bg-opacity));
}
.bg-purple-200\\/0 {
  background-color: rgb(233 213 255 / 0);
}
.bg-purple-200\\/10 {
  background-color: rgb(233 213 255 / 0.1);
}
.bg-purple-200\\/100 {
  background-color: rgb(233 213 255 / 1);
}
.bg-purple-200\\/15 {
  background-color: rgb(233 213 255 / 0.15);
}
.bg-purple-200\\/20 {
  background-color: rgb(233 213 255 / 0.2);
}
.bg-purple-200\\/25 {
  background-color: rgb(233 213 255 / 0.25);
}
.bg-purple-200\\/30 {
  background-color: rgb(233 213 255 / 0.3);
}
.bg-purple-200\\/35 {
  background-color: rgb(233 213 255 / 0.35);
}
.bg-purple-200\\/40 {
  background-color: rgb(233 213 255 / 0.4);
}
.bg-purple-200\\/45 {
  background-color: rgb(233 213 255 / 0.45);
}
.bg-purple-200\\/5 {
  background-color: rgb(233 213 255 / 0.05);
}
.bg-purple-200\\/50 {
  background-color: rgb(233 213 255 / 0.5);
}
.bg-purple-200\\/55 {
  background-color: rgb(233 213 255 / 0.55);
}
.bg-purple-200\\/60 {
  background-color: rgb(233 213 255 / 0.6);
}
.bg-purple-200\\/65 {
  background-color: rgb(233 213 255 / 0.65);
}
.bg-purple-200\\/70 {
  background-color: rgb(233 213 255 / 0.7);
}
.bg-purple-200\\/75 {
  background-color: rgb(233 213 255 / 0.75);
}
.bg-purple-200\\/80 {
  background-color: rgb(233 213 255 / 0.8);
}
.bg-purple-200\\/85 {
  background-color: rgb(233 213 255 / 0.85);
}
.bg-purple-200\\/90 {
  background-color: rgb(233 213 255 / 0.9);
}
.bg-purple-200\\/95 {
  background-color: rgb(233 213 255 / 0.95);
}
.bg-purple-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(216 180 254 / var(--tw-bg-opacity));
}
.bg-purple-300\\/0 {
  background-color: rgb(216 180 254 / 0);
}
.bg-purple-300\\/10 {
  background-color: rgb(216 180 254 / 0.1);
}
.bg-purple-300\\/100 {
  background-color: rgb(216 180 254 / 1);
}
.bg-purple-300\\/15 {
  background-color: rgb(216 180 254 / 0.15);
}
.bg-purple-300\\/20 {
  background-color: rgb(216 180 254 / 0.2);
}
.bg-purple-300\\/25 {
  background-color: rgb(216 180 254 / 0.25);
}
.bg-purple-300\\/30 {
  background-color: rgb(216 180 254 / 0.3);
}
.bg-purple-300\\/35 {
  background-color: rgb(216 180 254 / 0.35);
}
.bg-purple-300\\/40 {
  background-color: rgb(216 180 254 / 0.4);
}
.bg-purple-300\\/45 {
  background-color: rgb(216 180 254 / 0.45);
}
.bg-purple-300\\/5 {
  background-color: rgb(216 180 254 / 0.05);
}
.bg-purple-300\\/50 {
  background-color: rgb(216 180 254 / 0.5);
}
.bg-purple-300\\/55 {
  background-color: rgb(216 180 254 / 0.55);
}
.bg-purple-300\\/60 {
  background-color: rgb(216 180 254 / 0.6);
}
.bg-purple-300\\/65 {
  background-color: rgb(216 180 254 / 0.65);
}
.bg-purple-300\\/70 {
  background-color: rgb(216 180 254 / 0.7);
}
.bg-purple-300\\/75 {
  background-color: rgb(216 180 254 / 0.75);
}
.bg-purple-300\\/80 {
  background-color: rgb(216 180 254 / 0.8);
}
.bg-purple-300\\/85 {
  background-color: rgb(216 180 254 / 0.85);
}
.bg-purple-300\\/90 {
  background-color: rgb(216 180 254 / 0.9);
}
.bg-purple-300\\/95 {
  background-color: rgb(216 180 254 / 0.95);
}
.bg-purple-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(192 132 252 / var(--tw-bg-opacity));
}
.bg-purple-400\\/0 {
  background-color: rgb(192 132 252 / 0);
}
.bg-purple-400\\/10 {
  background-color: rgb(192 132 252 / 0.1);
}
.bg-purple-400\\/100 {
  background-color: rgb(192 132 252 / 1);
}
.bg-purple-400\\/15 {
  background-color: rgb(192 132 252 / 0.15);
}
.bg-purple-400\\/20 {
  background-color: rgb(192 132 252 / 0.2);
}
.bg-purple-400\\/25 {
  background-color: rgb(192 132 252 / 0.25);
}
.bg-purple-400\\/30 {
  background-color: rgb(192 132 252 / 0.3);
}
.bg-purple-400\\/35 {
  background-color: rgb(192 132 252 / 0.35);
}
.bg-purple-400\\/40 {
  background-color: rgb(192 132 252 / 0.4);
}
.bg-purple-400\\/45 {
  background-color: rgb(192 132 252 / 0.45);
}
.bg-purple-400\\/5 {
  background-color: rgb(192 132 252 / 0.05);
}
.bg-purple-400\\/50 {
  background-color: rgb(192 132 252 / 0.5);
}
.bg-purple-400\\/55 {
  background-color: rgb(192 132 252 / 0.55);
}
.bg-purple-400\\/60 {
  background-color: rgb(192 132 252 / 0.6);
}
.bg-purple-400\\/65 {
  background-color: rgb(192 132 252 / 0.65);
}
.bg-purple-400\\/70 {
  background-color: rgb(192 132 252 / 0.7);
}
.bg-purple-400\\/75 {
  background-color: rgb(192 132 252 / 0.75);
}
.bg-purple-400\\/80 {
  background-color: rgb(192 132 252 / 0.8);
}
.bg-purple-400\\/85 {
  background-color: rgb(192 132 252 / 0.85);
}
.bg-purple-400\\/90 {
  background-color: rgb(192 132 252 / 0.9);
}
.bg-purple-400\\/95 {
  background-color: rgb(192 132 252 / 0.95);
}
.bg-purple-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 245 255 / var(--tw-bg-opacity));
}
.bg-purple-50\\/0 {
  background-color: rgb(250 245 255 / 0);
}
.bg-purple-50\\/10 {
  background-color: rgb(250 245 255 / 0.1);
}
.bg-purple-50\\/100 {
  background-color: rgb(250 245 255 / 1);
}
.bg-purple-50\\/15 {
  background-color: rgb(250 245 255 / 0.15);
}
.bg-purple-50\\/20 {
  background-color: rgb(250 245 255 / 0.2);
}
.bg-purple-50\\/25 {
  background-color: rgb(250 245 255 / 0.25);
}
.bg-purple-50\\/30 {
  background-color: rgb(250 245 255 / 0.3);
}
.bg-purple-50\\/35 {
  background-color: rgb(250 245 255 / 0.35);
}
.bg-purple-50\\/40 {
  background-color: rgb(250 245 255 / 0.4);
}
.bg-purple-50\\/45 {
  background-color: rgb(250 245 255 / 0.45);
}
.bg-purple-50\\/5 {
  background-color: rgb(250 245 255 / 0.05);
}
.bg-purple-50\\/50 {
  background-color: rgb(250 245 255 / 0.5);
}
.bg-purple-50\\/55 {
  background-color: rgb(250 245 255 / 0.55);
}
.bg-purple-50\\/60 {
  background-color: rgb(250 245 255 / 0.6);
}
.bg-purple-50\\/65 {
  background-color: rgb(250 245 255 / 0.65);
}
.bg-purple-50\\/70 {
  background-color: rgb(250 245 255 / 0.7);
}
.bg-purple-50\\/75 {
  background-color: rgb(250 245 255 / 0.75);
}
.bg-purple-50\\/80 {
  background-color: rgb(250 245 255 / 0.8);
}
.bg-purple-50\\/85 {
  background-color: rgb(250 245 255 / 0.85);
}
.bg-purple-50\\/90 {
  background-color: rgb(250 245 255 / 0.9);
}
.bg-purple-50\\/95 {
  background-color: rgb(250 245 255 / 0.95);
}
.bg-purple-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(168 85 247 / var(--tw-bg-opacity));
}
.bg-purple-500\\/0 {
  background-color: rgb(168 85 247 / 0);
}
.bg-purple-500\\/10 {
  background-color: rgb(168 85 247 / 0.1);
}
.bg-purple-500\\/100 {
  background-color: rgb(168 85 247 / 1);
}
.bg-purple-500\\/15 {
  background-color: rgb(168 85 247 / 0.15);
}
.bg-purple-500\\/20 {
  background-color: rgb(168 85 247 / 0.2);
}
.bg-purple-500\\/25 {
  background-color: rgb(168 85 247 / 0.25);
}
.bg-purple-500\\/30 {
  background-color: rgb(168 85 247 / 0.3);
}
.bg-purple-500\\/35 {
  background-color: rgb(168 85 247 / 0.35);
}
.bg-purple-500\\/40 {
  background-color: rgb(168 85 247 / 0.4);
}
.bg-purple-500\\/45 {
  background-color: rgb(168 85 247 / 0.45);
}
.bg-purple-500\\/5 {
  background-color: rgb(168 85 247 / 0.05);
}
.bg-purple-500\\/50 {
  background-color: rgb(168 85 247 / 0.5);
}
.bg-purple-500\\/55 {
  background-color: rgb(168 85 247 / 0.55);
}
.bg-purple-500\\/60 {
  background-color: rgb(168 85 247 / 0.6);
}
.bg-purple-500\\/65 {
  background-color: rgb(168 85 247 / 0.65);
}
.bg-purple-500\\/70 {
  background-color: rgb(168 85 247 / 0.7);
}
.bg-purple-500\\/75 {
  background-color: rgb(168 85 247 / 0.75);
}
.bg-purple-500\\/80 {
  background-color: rgb(168 85 247 / 0.8);
}
.bg-purple-500\\/85 {
  background-color: rgb(168 85 247 / 0.85);
}
.bg-purple-500\\/90 {
  background-color: rgb(168 85 247 / 0.9);
}
.bg-purple-500\\/95 {
  background-color: rgb(168 85 247 / 0.95);
}
.bg-purple-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(147 51 234 / var(--tw-bg-opacity));
}
.bg-purple-600\\/0 {
  background-color: rgb(147 51 234 / 0);
}
.bg-purple-600\\/10 {
  background-color: rgb(147 51 234 / 0.1);
}
.bg-purple-600\\/100 {
  background-color: rgb(147 51 234 / 1);
}
.bg-purple-600\\/15 {
  background-color: rgb(147 51 234 / 0.15);
}
.bg-purple-600\\/20 {
  background-color: rgb(147 51 234 / 0.2);
}
.bg-purple-600\\/25 {
  background-color: rgb(147 51 234 / 0.25);
}
.bg-purple-600\\/30 {
  background-color: rgb(147 51 234 / 0.3);
}
.bg-purple-600\\/35 {
  background-color: rgb(147 51 234 / 0.35);
}
.bg-purple-600\\/40 {
  background-color: rgb(147 51 234 / 0.4);
}
.bg-purple-600\\/45 {
  background-color: rgb(147 51 234 / 0.45);
}
.bg-purple-600\\/5 {
  background-color: rgb(147 51 234 / 0.05);
}
.bg-purple-600\\/50 {
  background-color: rgb(147 51 234 / 0.5);
}
.bg-purple-600\\/55 {
  background-color: rgb(147 51 234 / 0.55);
}
.bg-purple-600\\/60 {
  background-color: rgb(147 51 234 / 0.6);
}
.bg-purple-600\\/65 {
  background-color: rgb(147 51 234 / 0.65);
}
.bg-purple-600\\/70 {
  background-color: rgb(147 51 234 / 0.7);
}
.bg-purple-600\\/75 {
  background-color: rgb(147 51 234 / 0.75);
}
.bg-purple-600\\/80 {
  background-color: rgb(147 51 234 / 0.8);
}
.bg-purple-600\\/85 {
  background-color: rgb(147 51 234 / 0.85);
}
.bg-purple-600\\/90 {
  background-color: rgb(147 51 234 / 0.9);
}
.bg-purple-600\\/95 {
  background-color: rgb(147 51 234 / 0.95);
}
.bg-purple-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(126 34 206 / var(--tw-bg-opacity));
}
.bg-purple-700\\/0 {
  background-color: rgb(126 34 206 / 0);
}
.bg-purple-700\\/10 {
  background-color: rgb(126 34 206 / 0.1);
}
.bg-purple-700\\/100 {
  background-color: rgb(126 34 206 / 1);
}
.bg-purple-700\\/15 {
  background-color: rgb(126 34 206 / 0.15);
}
.bg-purple-700\\/20 {
  background-color: rgb(126 34 206 / 0.2);
}
.bg-purple-700\\/25 {
  background-color: rgb(126 34 206 / 0.25);
}
.bg-purple-700\\/30 {
  background-color: rgb(126 34 206 / 0.3);
}
.bg-purple-700\\/35 {
  background-color: rgb(126 34 206 / 0.35);
}
.bg-purple-700\\/40 {
  background-color: rgb(126 34 206 / 0.4);
}
.bg-purple-700\\/45 {
  background-color: rgb(126 34 206 / 0.45);
}
.bg-purple-700\\/5 {
  background-color: rgb(126 34 206 / 0.05);
}
.bg-purple-700\\/50 {
  background-color: rgb(126 34 206 / 0.5);
}
.bg-purple-700\\/55 {
  background-color: rgb(126 34 206 / 0.55);
}
.bg-purple-700\\/60 {
  background-color: rgb(126 34 206 / 0.6);
}
.bg-purple-700\\/65 {
  background-color: rgb(126 34 206 / 0.65);
}
.bg-purple-700\\/70 {
  background-color: rgb(126 34 206 / 0.7);
}
.bg-purple-700\\/75 {
  background-color: rgb(126 34 206 / 0.75);
}
.bg-purple-700\\/80 {
  background-color: rgb(126 34 206 / 0.8);
}
.bg-purple-700\\/85 {
  background-color: rgb(126 34 206 / 0.85);
}
.bg-purple-700\\/90 {
  background-color: rgb(126 34 206 / 0.9);
}
.bg-purple-700\\/95 {
  background-color: rgb(126 34 206 / 0.95);
}
.bg-purple-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(107 33 168 / var(--tw-bg-opacity));
}
.bg-purple-800\\/0 {
  background-color: rgb(107 33 168 / 0);
}
.bg-purple-800\\/10 {
  background-color: rgb(107 33 168 / 0.1);
}
.bg-purple-800\\/100 {
  background-color: rgb(107 33 168 / 1);
}
.bg-purple-800\\/15 {
  background-color: rgb(107 33 168 / 0.15);
}
.bg-purple-800\\/20 {
  background-color: rgb(107 33 168 / 0.2);
}
.bg-purple-800\\/25 {
  background-color: rgb(107 33 168 / 0.25);
}
.bg-purple-800\\/30 {
  background-color: rgb(107 33 168 / 0.3);
}
.bg-purple-800\\/35 {
  background-color: rgb(107 33 168 / 0.35);
}
.bg-purple-800\\/40 {
  background-color: rgb(107 33 168 / 0.4);
}
.bg-purple-800\\/45 {
  background-color: rgb(107 33 168 / 0.45);
}
.bg-purple-800\\/5 {
  background-color: rgb(107 33 168 / 0.05);
}
.bg-purple-800\\/50 {
  background-color: rgb(107 33 168 / 0.5);
}
.bg-purple-800\\/55 {
  background-color: rgb(107 33 168 / 0.55);
}
.bg-purple-800\\/60 {
  background-color: rgb(107 33 168 / 0.6);
}
.bg-purple-800\\/65 {
  background-color: rgb(107 33 168 / 0.65);
}
.bg-purple-800\\/70 {
  background-color: rgb(107 33 168 / 0.7);
}
.bg-purple-800\\/75 {
  background-color: rgb(107 33 168 / 0.75);
}
.bg-purple-800\\/80 {
  background-color: rgb(107 33 168 / 0.8);
}
.bg-purple-800\\/85 {
  background-color: rgb(107 33 168 / 0.85);
}
.bg-purple-800\\/90 {
  background-color: rgb(107 33 168 / 0.9);
}
.bg-purple-800\\/95 {
  background-color: rgb(107 33 168 / 0.95);
}
.bg-purple-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(88 28 135 / var(--tw-bg-opacity));
}
.bg-purple-900\\/0 {
  background-color: rgb(88 28 135 / 0);
}
.bg-purple-900\\/10 {
  background-color: rgb(88 28 135 / 0.1);
}
.bg-purple-900\\/100 {
  background-color: rgb(88 28 135 / 1);
}
.bg-purple-900\\/15 {
  background-color: rgb(88 28 135 / 0.15);
}
.bg-purple-900\\/20 {
  background-color: rgb(88 28 135 / 0.2);
}
.bg-purple-900\\/25 {
  background-color: rgb(88 28 135 / 0.25);
}
.bg-purple-900\\/30 {
  background-color: rgb(88 28 135 / 0.3);
}
.bg-purple-900\\/35 {
  background-color: rgb(88 28 135 / 0.35);
}
.bg-purple-900\\/40 {
  background-color: rgb(88 28 135 / 0.4);
}
.bg-purple-900\\/45 {
  background-color: rgb(88 28 135 / 0.45);
}
.bg-purple-900\\/5 {
  background-color: rgb(88 28 135 / 0.05);
}
.bg-purple-900\\/50 {
  background-color: rgb(88 28 135 / 0.5);
}
.bg-purple-900\\/55 {
  background-color: rgb(88 28 135 / 0.55);
}
.bg-purple-900\\/60 {
  background-color: rgb(88 28 135 / 0.6);
}
.bg-purple-900\\/65 {
  background-color: rgb(88 28 135 / 0.65);
}
.bg-purple-900\\/70 {
  background-color: rgb(88 28 135 / 0.7);
}
.bg-purple-900\\/75 {
  background-color: rgb(88 28 135 / 0.75);
}
.bg-purple-900\\/80 {
  background-color: rgb(88 28 135 / 0.8);
}
.bg-purple-900\\/85 {
  background-color: rgb(88 28 135 / 0.85);
}
.bg-purple-900\\/90 {
  background-color: rgb(88 28 135 / 0.9);
}
.bg-purple-900\\/95 {
  background-color: rgb(88 28 135 / 0.95);
}
.bg-purple-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(59 7 100 / var(--tw-bg-opacity));
}
.bg-purple-950\\/0 {
  background-color: rgb(59 7 100 / 0);
}
.bg-purple-950\\/10 {
  background-color: rgb(59 7 100 / 0.1);
}
.bg-purple-950\\/100 {
  background-color: rgb(59 7 100 / 1);
}
.bg-purple-950\\/15 {
  background-color: rgb(59 7 100 / 0.15);
}
.bg-purple-950\\/20 {
  background-color: rgb(59 7 100 / 0.2);
}
.bg-purple-950\\/25 {
  background-color: rgb(59 7 100 / 0.25);
}
.bg-purple-950\\/30 {
  background-color: rgb(59 7 100 / 0.3);
}
.bg-purple-950\\/35 {
  background-color: rgb(59 7 100 / 0.35);
}
.bg-purple-950\\/40 {
  background-color: rgb(59 7 100 / 0.4);
}
.bg-purple-950\\/45 {
  background-color: rgb(59 7 100 / 0.45);
}
.bg-purple-950\\/5 {
  background-color: rgb(59 7 100 / 0.05);
}
.bg-purple-950\\/50 {
  background-color: rgb(59 7 100 / 0.5);
}
.bg-purple-950\\/55 {
  background-color: rgb(59 7 100 / 0.55);
}
.bg-purple-950\\/60 {
  background-color: rgb(59 7 100 / 0.6);
}
.bg-purple-950\\/65 {
  background-color: rgb(59 7 100 / 0.65);
}
.bg-purple-950\\/70 {
  background-color: rgb(59 7 100 / 0.7);
}
.bg-purple-950\\/75 {
  background-color: rgb(59 7 100 / 0.75);
}
.bg-purple-950\\/80 {
  background-color: rgb(59 7 100 / 0.8);
}
.bg-purple-950\\/85 {
  background-color: rgb(59 7 100 / 0.85);
}
.bg-purple-950\\/90 {
  background-color: rgb(59 7 100 / 0.9);
}
.bg-purple-950\\/95 {
  background-color: rgb(59 7 100 / 0.95);
}
.bg-red-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 226 226 / var(--tw-bg-opacity));
}
.bg-red-100\\/0 {
  background-color: rgb(254 226 226 / 0);
}
.bg-red-100\\/10 {
  background-color: rgb(254 226 226 / 0.1);
}
.bg-red-100\\/100 {
  background-color: rgb(254 226 226 / 1);
}
.bg-red-100\\/15 {
  background-color: rgb(254 226 226 / 0.15);
}
.bg-red-100\\/20 {
  background-color: rgb(254 226 226 / 0.2);
}
.bg-red-100\\/25 {
  background-color: rgb(254 226 226 / 0.25);
}
.bg-red-100\\/30 {
  background-color: rgb(254 226 226 / 0.3);
}
.bg-red-100\\/35 {
  background-color: rgb(254 226 226 / 0.35);
}
.bg-red-100\\/40 {
  background-color: rgb(254 226 226 / 0.4);
}
.bg-red-100\\/45 {
  background-color: rgb(254 226 226 / 0.45);
}
.bg-red-100\\/5 {
  background-color: rgb(254 226 226 / 0.05);
}
.bg-red-100\\/50 {
  background-color: rgb(254 226 226 / 0.5);
}
.bg-red-100\\/55 {
  background-color: rgb(254 226 226 / 0.55);
}
.bg-red-100\\/60 {
  background-color: rgb(254 226 226 / 0.6);
}
.bg-red-100\\/65 {
  background-color: rgb(254 226 226 / 0.65);
}
.bg-red-100\\/70 {
  background-color: rgb(254 226 226 / 0.7);
}
.bg-red-100\\/75 {
  background-color: rgb(254 226 226 / 0.75);
}
.bg-red-100\\/80 {
  background-color: rgb(254 226 226 / 0.8);
}
.bg-red-100\\/85 {
  background-color: rgb(254 226 226 / 0.85);
}
.bg-red-100\\/90 {
  background-color: rgb(254 226 226 / 0.9);
}
.bg-red-100\\/95 {
  background-color: rgb(254 226 226 / 0.95);
}
.bg-red-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 202 202 / var(--tw-bg-opacity));
}
.bg-red-200\\/0 {
  background-color: rgb(254 202 202 / 0);
}
.bg-red-200\\/10 {
  background-color: rgb(254 202 202 / 0.1);
}
.bg-red-200\\/100 {
  background-color: rgb(254 202 202 / 1);
}
.bg-red-200\\/15 {
  background-color: rgb(254 202 202 / 0.15);
}
.bg-red-200\\/20 {
  background-color: rgb(254 202 202 / 0.2);
}
.bg-red-200\\/25 {
  background-color: rgb(254 202 202 / 0.25);
}
.bg-red-200\\/30 {
  background-color: rgb(254 202 202 / 0.3);
}
.bg-red-200\\/35 {
  background-color: rgb(254 202 202 / 0.35);
}
.bg-red-200\\/40 {
  background-color: rgb(254 202 202 / 0.4);
}
.bg-red-200\\/45 {
  background-color: rgb(254 202 202 / 0.45);
}
.bg-red-200\\/5 {
  background-color: rgb(254 202 202 / 0.05);
}
.bg-red-200\\/50 {
  background-color: rgb(254 202 202 / 0.5);
}
.bg-red-200\\/55 {
  background-color: rgb(254 202 202 / 0.55);
}
.bg-red-200\\/60 {
  background-color: rgb(254 202 202 / 0.6);
}
.bg-red-200\\/65 {
  background-color: rgb(254 202 202 / 0.65);
}
.bg-red-200\\/70 {
  background-color: rgb(254 202 202 / 0.7);
}
.bg-red-200\\/75 {
  background-color: rgb(254 202 202 / 0.75);
}
.bg-red-200\\/80 {
  background-color: rgb(254 202 202 / 0.8);
}
.bg-red-200\\/85 {
  background-color: rgb(254 202 202 / 0.85);
}
.bg-red-200\\/90 {
  background-color: rgb(254 202 202 / 0.9);
}
.bg-red-200\\/95 {
  background-color: rgb(254 202 202 / 0.95);
}
.bg-red-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(252 165 165 / var(--tw-bg-opacity));
}
.bg-red-300\\/0 {
  background-color: rgb(252 165 165 / 0);
}
.bg-red-300\\/10 {
  background-color: rgb(252 165 165 / 0.1);
}
.bg-red-300\\/100 {
  background-color: rgb(252 165 165 / 1);
}
.bg-red-300\\/15 {
  background-color: rgb(252 165 165 / 0.15);
}
.bg-red-300\\/20 {
  background-color: rgb(252 165 165 / 0.2);
}
.bg-red-300\\/25 {
  background-color: rgb(252 165 165 / 0.25);
}
.bg-red-300\\/30 {
  background-color: rgb(252 165 165 / 0.3);
}
.bg-red-300\\/35 {
  background-color: rgb(252 165 165 / 0.35);
}
.bg-red-300\\/40 {
  background-color: rgb(252 165 165 / 0.4);
}
.bg-red-300\\/45 {
  background-color: rgb(252 165 165 / 0.45);
}
.bg-red-300\\/5 {
  background-color: rgb(252 165 165 / 0.05);
}
.bg-red-300\\/50 {
  background-color: rgb(252 165 165 / 0.5);
}
.bg-red-300\\/55 {
  background-color: rgb(252 165 165 / 0.55);
}
.bg-red-300\\/60 {
  background-color: rgb(252 165 165 / 0.6);
}
.bg-red-300\\/65 {
  background-color: rgb(252 165 165 / 0.65);
}
.bg-red-300\\/70 {
  background-color: rgb(252 165 165 / 0.7);
}
.bg-red-300\\/75 {
  background-color: rgb(252 165 165 / 0.75);
}
.bg-red-300\\/80 {
  background-color: rgb(252 165 165 / 0.8);
}
.bg-red-300\\/85 {
  background-color: rgb(252 165 165 / 0.85);
}
.bg-red-300\\/90 {
  background-color: rgb(252 165 165 / 0.9);
}
.bg-red-300\\/95 {
  background-color: rgb(252 165 165 / 0.95);
}
.bg-red-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(248 113 113 / var(--tw-bg-opacity));
}
.bg-red-400\\/0 {
  background-color: rgb(248 113 113 / 0);
}
.bg-red-400\\/10 {
  background-color: rgb(248 113 113 / 0.1);
}
.bg-red-400\\/100 {
  background-color: rgb(248 113 113 / 1);
}
.bg-red-400\\/15 {
  background-color: rgb(248 113 113 / 0.15);
}
.bg-red-400\\/20 {
  background-color: rgb(248 113 113 / 0.2);
}
.bg-red-400\\/25 {
  background-color: rgb(248 113 113 / 0.25);
}
.bg-red-400\\/30 {
  background-color: rgb(248 113 113 / 0.3);
}
.bg-red-400\\/35 {
  background-color: rgb(248 113 113 / 0.35);
}
.bg-red-400\\/40 {
  background-color: rgb(248 113 113 / 0.4);
}
.bg-red-400\\/45 {
  background-color: rgb(248 113 113 / 0.45);
}
.bg-red-400\\/5 {
  background-color: rgb(248 113 113 / 0.05);
}
.bg-red-400\\/50 {
  background-color: rgb(248 113 113 / 0.5);
}
.bg-red-400\\/55 {
  background-color: rgb(248 113 113 / 0.55);
}
.bg-red-400\\/60 {
  background-color: rgb(248 113 113 / 0.6);
}
.bg-red-400\\/65 {
  background-color: rgb(248 113 113 / 0.65);
}
.bg-red-400\\/70 {
  background-color: rgb(248 113 113 / 0.7);
}
.bg-red-400\\/75 {
  background-color: rgb(248 113 113 / 0.75);
}
.bg-red-400\\/80 {
  background-color: rgb(248 113 113 / 0.8);
}
.bg-red-400\\/85 {
  background-color: rgb(248 113 113 / 0.85);
}
.bg-red-400\\/90 {
  background-color: rgb(248 113 113 / 0.9);
}
.bg-red-400\\/95 {
  background-color: rgb(248 113 113 / 0.95);
}
.bg-red-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 242 242 / var(--tw-bg-opacity));
}
.bg-red-50\\/0 {
  background-color: rgb(254 242 242 / 0);
}
.bg-red-50\\/10 {
  background-color: rgb(254 242 242 / 0.1);
}
.bg-red-50\\/100 {
  background-color: rgb(254 242 242 / 1);
}
.bg-red-50\\/15 {
  background-color: rgb(254 242 242 / 0.15);
}
.bg-red-50\\/20 {
  background-color: rgb(254 242 242 / 0.2);
}
.bg-red-50\\/25 {
  background-color: rgb(254 242 242 / 0.25);
}
.bg-red-50\\/30 {
  background-color: rgb(254 242 242 / 0.3);
}
.bg-red-50\\/35 {
  background-color: rgb(254 242 242 / 0.35);
}
.bg-red-50\\/40 {
  background-color: rgb(254 242 242 / 0.4);
}
.bg-red-50\\/45 {
  background-color: rgb(254 242 242 / 0.45);
}
.bg-red-50\\/5 {
  background-color: rgb(254 242 242 / 0.05);
}
.bg-red-50\\/50 {
  background-color: rgb(254 242 242 / 0.5);
}
.bg-red-50\\/55 {
  background-color: rgb(254 242 242 / 0.55);
}
.bg-red-50\\/60 {
  background-color: rgb(254 242 242 / 0.6);
}
.bg-red-50\\/65 {
  background-color: rgb(254 242 242 / 0.65);
}
.bg-red-50\\/70 {
  background-color: rgb(254 242 242 / 0.7);
}
.bg-red-50\\/75 {
  background-color: rgb(254 242 242 / 0.75);
}
.bg-red-50\\/80 {
  background-color: rgb(254 242 242 / 0.8);
}
.bg-red-50\\/85 {
  background-color: rgb(254 242 242 / 0.85);
}
.bg-red-50\\/90 {
  background-color: rgb(254 242 242 / 0.9);
}
.bg-red-50\\/95 {
  background-color: rgb(254 242 242 / 0.95);
}
.bg-red-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(239 68 68 / var(--tw-bg-opacity));
}
.bg-red-500\\/0 {
  background-color: rgb(239 68 68 / 0);
}
.bg-red-500\\/10 {
  background-color: rgb(239 68 68 / 0.1);
}
.bg-red-500\\/100 {
  background-color: rgb(239 68 68 / 1);
}
.bg-red-500\\/15 {
  background-color: rgb(239 68 68 / 0.15);
}
.bg-red-500\\/20 {
  background-color: rgb(239 68 68 / 0.2);
}
.bg-red-500\\/25 {
  background-color: rgb(239 68 68 / 0.25);
}
.bg-red-500\\/30 {
  background-color: rgb(239 68 68 / 0.3);
}
.bg-red-500\\/35 {
  background-color: rgb(239 68 68 / 0.35);
}
.bg-red-500\\/40 {
  background-color: rgb(239 68 68 / 0.4);
}
.bg-red-500\\/45 {
  background-color: rgb(239 68 68 / 0.45);
}
.bg-red-500\\/5 {
  background-color: rgb(239 68 68 / 0.05);
}
.bg-red-500\\/50 {
  background-color: rgb(239 68 68 / 0.5);
}
.bg-red-500\\/55 {
  background-color: rgb(239 68 68 / 0.55);
}
.bg-red-500\\/60 {
  background-color: rgb(239 68 68 / 0.6);
}
.bg-red-500\\/65 {
  background-color: rgb(239 68 68 / 0.65);
}
.bg-red-500\\/70 {
  background-color: rgb(239 68 68 / 0.7);
}
.bg-red-500\\/75 {
  background-color: rgb(239 68 68 / 0.75);
}
.bg-red-500\\/80 {
  background-color: rgb(239 68 68 / 0.8);
}
.bg-red-500\\/85 {
  background-color: rgb(239 68 68 / 0.85);
}
.bg-red-500\\/90 {
  background-color: rgb(239 68 68 / 0.9);
}
.bg-red-500\\/95 {
  background-color: rgb(239 68 68 / 0.95);
}
.bg-red-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(220 38 38 / var(--tw-bg-opacity));
}
.bg-red-600\\/0 {
  background-color: rgb(220 38 38 / 0);
}
.bg-red-600\\/10 {
  background-color: rgb(220 38 38 / 0.1);
}
.bg-red-600\\/100 {
  background-color: rgb(220 38 38 / 1);
}
.bg-red-600\\/15 {
  background-color: rgb(220 38 38 / 0.15);
}
.bg-red-600\\/20 {
  background-color: rgb(220 38 38 / 0.2);
}
.bg-red-600\\/25 {
  background-color: rgb(220 38 38 / 0.25);
}
.bg-red-600\\/30 {
  background-color: rgb(220 38 38 / 0.3);
}
.bg-red-600\\/35 {
  background-color: rgb(220 38 38 / 0.35);
}
.bg-red-600\\/40 {
  background-color: rgb(220 38 38 / 0.4);
}
.bg-red-600\\/45 {
  background-color: rgb(220 38 38 / 0.45);
}
.bg-red-600\\/5 {
  background-color: rgb(220 38 38 / 0.05);
}
.bg-red-600\\/50 {
  background-color: rgb(220 38 38 / 0.5);
}
.bg-red-600\\/55 {
  background-color: rgb(220 38 38 / 0.55);
}
.bg-red-600\\/60 {
  background-color: rgb(220 38 38 / 0.6);
}
.bg-red-600\\/65 {
  background-color: rgb(220 38 38 / 0.65);
}
.bg-red-600\\/70 {
  background-color: rgb(220 38 38 / 0.7);
}
.bg-red-600\\/75 {
  background-color: rgb(220 38 38 / 0.75);
}
.bg-red-600\\/80 {
  background-color: rgb(220 38 38 / 0.8);
}
.bg-red-600\\/85 {
  background-color: rgb(220 38 38 / 0.85);
}
.bg-red-600\\/90 {
  background-color: rgb(220 38 38 / 0.9);
}
.bg-red-600\\/95 {
  background-color: rgb(220 38 38 / 0.95);
}
.bg-red-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(185 28 28 / var(--tw-bg-opacity));
}
.bg-red-700\\/0 {
  background-color: rgb(185 28 28 / 0);
}
.bg-red-700\\/10 {
  background-color: rgb(185 28 28 / 0.1);
}
.bg-red-700\\/100 {
  background-color: rgb(185 28 28 / 1);
}
.bg-red-700\\/15 {
  background-color: rgb(185 28 28 / 0.15);
}
.bg-red-700\\/20 {
  background-color: rgb(185 28 28 / 0.2);
}
.bg-red-700\\/25 {
  background-color: rgb(185 28 28 / 0.25);
}
.bg-red-700\\/30 {
  background-color: rgb(185 28 28 / 0.3);
}
.bg-red-700\\/35 {
  background-color: rgb(185 28 28 / 0.35);
}
.bg-red-700\\/40 {
  background-color: rgb(185 28 28 / 0.4);
}
.bg-red-700\\/45 {
  background-color: rgb(185 28 28 / 0.45);
}
.bg-red-700\\/5 {
  background-color: rgb(185 28 28 / 0.05);
}
.bg-red-700\\/50 {
  background-color: rgb(185 28 28 / 0.5);
}
.bg-red-700\\/55 {
  background-color: rgb(185 28 28 / 0.55);
}
.bg-red-700\\/60 {
  background-color: rgb(185 28 28 / 0.6);
}
.bg-red-700\\/65 {
  background-color: rgb(185 28 28 / 0.65);
}
.bg-red-700\\/70 {
  background-color: rgb(185 28 28 / 0.7);
}
.bg-red-700\\/75 {
  background-color: rgb(185 28 28 / 0.75);
}
.bg-red-700\\/80 {
  background-color: rgb(185 28 28 / 0.8);
}
.bg-red-700\\/85 {
  background-color: rgb(185 28 28 / 0.85);
}
.bg-red-700\\/90 {
  background-color: rgb(185 28 28 / 0.9);
}
.bg-red-700\\/95 {
  background-color: rgb(185 28 28 / 0.95);
}
.bg-red-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(153 27 27 / var(--tw-bg-opacity));
}
.bg-red-800\\/0 {
  background-color: rgb(153 27 27 / 0);
}
.bg-red-800\\/10 {
  background-color: rgb(153 27 27 / 0.1);
}
.bg-red-800\\/100 {
  background-color: rgb(153 27 27 / 1);
}
.bg-red-800\\/15 {
  background-color: rgb(153 27 27 / 0.15);
}
.bg-red-800\\/20 {
  background-color: rgb(153 27 27 / 0.2);
}
.bg-red-800\\/25 {
  background-color: rgb(153 27 27 / 0.25);
}
.bg-red-800\\/30 {
  background-color: rgb(153 27 27 / 0.3);
}
.bg-red-800\\/35 {
  background-color: rgb(153 27 27 / 0.35);
}
.bg-red-800\\/40 {
  background-color: rgb(153 27 27 / 0.4);
}
.bg-red-800\\/45 {
  background-color: rgb(153 27 27 / 0.45);
}
.bg-red-800\\/5 {
  background-color: rgb(153 27 27 / 0.05);
}
.bg-red-800\\/50 {
  background-color: rgb(153 27 27 / 0.5);
}
.bg-red-800\\/55 {
  background-color: rgb(153 27 27 / 0.55);
}
.bg-red-800\\/60 {
  background-color: rgb(153 27 27 / 0.6);
}
.bg-red-800\\/65 {
  background-color: rgb(153 27 27 / 0.65);
}
.bg-red-800\\/70 {
  background-color: rgb(153 27 27 / 0.7);
}
.bg-red-800\\/75 {
  background-color: rgb(153 27 27 / 0.75);
}
.bg-red-800\\/80 {
  background-color: rgb(153 27 27 / 0.8);
}
.bg-red-800\\/85 {
  background-color: rgb(153 27 27 / 0.85);
}
.bg-red-800\\/90 {
  background-color: rgb(153 27 27 / 0.9);
}
.bg-red-800\\/95 {
  background-color: rgb(153 27 27 / 0.95);
}
.bg-red-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(127 29 29 / var(--tw-bg-opacity));
}
.bg-red-900\\/0 {
  background-color: rgb(127 29 29 / 0);
}
.bg-red-900\\/10 {
  background-color: rgb(127 29 29 / 0.1);
}
.bg-red-900\\/100 {
  background-color: rgb(127 29 29 / 1);
}
.bg-red-900\\/15 {
  background-color: rgb(127 29 29 / 0.15);
}
.bg-red-900\\/20 {
  background-color: rgb(127 29 29 / 0.2);
}
.bg-red-900\\/25 {
  background-color: rgb(127 29 29 / 0.25);
}
.bg-red-900\\/30 {
  background-color: rgb(127 29 29 / 0.3);
}
.bg-red-900\\/35 {
  background-color: rgb(127 29 29 / 0.35);
}
.bg-red-900\\/40 {
  background-color: rgb(127 29 29 / 0.4);
}
.bg-red-900\\/45 {
  background-color: rgb(127 29 29 / 0.45);
}
.bg-red-900\\/5 {
  background-color: rgb(127 29 29 / 0.05);
}
.bg-red-900\\/50 {
  background-color: rgb(127 29 29 / 0.5);
}
.bg-red-900\\/55 {
  background-color: rgb(127 29 29 / 0.55);
}
.bg-red-900\\/60 {
  background-color: rgb(127 29 29 / 0.6);
}
.bg-red-900\\/65 {
  background-color: rgb(127 29 29 / 0.65);
}
.bg-red-900\\/70 {
  background-color: rgb(127 29 29 / 0.7);
}
.bg-red-900\\/75 {
  background-color: rgb(127 29 29 / 0.75);
}
.bg-red-900\\/80 {
  background-color: rgb(127 29 29 / 0.8);
}
.bg-red-900\\/85 {
  background-color: rgb(127 29 29 / 0.85);
}
.bg-red-900\\/90 {
  background-color: rgb(127 29 29 / 0.9);
}
.bg-red-900\\/95 {
  background-color: rgb(127 29 29 / 0.95);
}
.bg-red-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(69 10 10 / var(--tw-bg-opacity));
}
.bg-red-950\\/0 {
  background-color: rgb(69 10 10 / 0);
}
.bg-red-950\\/10 {
  background-color: rgb(69 10 10 / 0.1);
}
.bg-red-950\\/100 {
  background-color: rgb(69 10 10 / 1);
}
.bg-red-950\\/15 {
  background-color: rgb(69 10 10 / 0.15);
}
.bg-red-950\\/20 {
  background-color: rgb(69 10 10 / 0.2);
}
.bg-red-950\\/25 {
  background-color: rgb(69 10 10 / 0.25);
}
.bg-red-950\\/30 {
  background-color: rgb(69 10 10 / 0.3);
}
.bg-red-950\\/35 {
  background-color: rgb(69 10 10 / 0.35);
}
.bg-red-950\\/40 {
  background-color: rgb(69 10 10 / 0.4);
}
.bg-red-950\\/45 {
  background-color: rgb(69 10 10 / 0.45);
}
.bg-red-950\\/5 {
  background-color: rgb(69 10 10 / 0.05);
}
.bg-red-950\\/50 {
  background-color: rgb(69 10 10 / 0.5);
}
.bg-red-950\\/55 {
  background-color: rgb(69 10 10 / 0.55);
}
.bg-red-950\\/60 {
  background-color: rgb(69 10 10 / 0.6);
}
.bg-red-950\\/65 {
  background-color: rgb(69 10 10 / 0.65);
}
.bg-red-950\\/70 {
  background-color: rgb(69 10 10 / 0.7);
}
.bg-red-950\\/75 {
  background-color: rgb(69 10 10 / 0.75);
}
.bg-red-950\\/80 {
  background-color: rgb(69 10 10 / 0.8);
}
.bg-red-950\\/85 {
  background-color: rgb(69 10 10 / 0.85);
}
.bg-red-950\\/90 {
  background-color: rgb(69 10 10 / 0.9);
}
.bg-red-950\\/95 {
  background-color: rgb(69 10 10 / 0.95);
}
.bg-rose-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(255 228 230 / var(--tw-bg-opacity));
}
.bg-rose-100\\/0 {
  background-color: rgb(255 228 230 / 0);
}
.bg-rose-100\\/10 {
  background-color: rgb(255 228 230 / 0.1);
}
.bg-rose-100\\/100 {
  background-color: rgb(255 228 230 / 1);
}
.bg-rose-100\\/15 {
  background-color: rgb(255 228 230 / 0.15);
}
.bg-rose-100\\/20 {
  background-color: rgb(255 228 230 / 0.2);
}
.bg-rose-100\\/25 {
  background-color: rgb(255 228 230 / 0.25);
}
.bg-rose-100\\/30 {
  background-color: rgb(255 228 230 / 0.3);
}
.bg-rose-100\\/35 {
  background-color: rgb(255 228 230 / 0.35);
}
.bg-rose-100\\/40 {
  background-color: rgb(255 228 230 / 0.4);
}
.bg-rose-100\\/45 {
  background-color: rgb(255 228 230 / 0.45);
}
.bg-rose-100\\/5 {
  background-color: rgb(255 228 230 / 0.05);
}
.bg-rose-100\\/50 {
  background-color: rgb(255 228 230 / 0.5);
}
.bg-rose-100\\/55 {
  background-color: rgb(255 228 230 / 0.55);
}
.bg-rose-100\\/60 {
  background-color: rgb(255 228 230 / 0.6);
}
.bg-rose-100\\/65 {
  background-color: rgb(255 228 230 / 0.65);
}
.bg-rose-100\\/70 {
  background-color: rgb(255 228 230 / 0.7);
}
.bg-rose-100\\/75 {
  background-color: rgb(255 228 230 / 0.75);
}
.bg-rose-100\\/80 {
  background-color: rgb(255 228 230 / 0.8);
}
.bg-rose-100\\/85 {
  background-color: rgb(255 228 230 / 0.85);
}
.bg-rose-100\\/90 {
  background-color: rgb(255 228 230 / 0.9);
}
.bg-rose-100\\/95 {
  background-color: rgb(255 228 230 / 0.95);
}
.bg-rose-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 205 211 / var(--tw-bg-opacity));
}
.bg-rose-200\\/0 {
  background-color: rgb(254 205 211 / 0);
}
.bg-rose-200\\/10 {
  background-color: rgb(254 205 211 / 0.1);
}
.bg-rose-200\\/100 {
  background-color: rgb(254 205 211 / 1);
}
.bg-rose-200\\/15 {
  background-color: rgb(254 205 211 / 0.15);
}
.bg-rose-200\\/20 {
  background-color: rgb(254 205 211 / 0.2);
}
.bg-rose-200\\/25 {
  background-color: rgb(254 205 211 / 0.25);
}
.bg-rose-200\\/30 {
  background-color: rgb(254 205 211 / 0.3);
}
.bg-rose-200\\/35 {
  background-color: rgb(254 205 211 / 0.35);
}
.bg-rose-200\\/40 {
  background-color: rgb(254 205 211 / 0.4);
}
.bg-rose-200\\/45 {
  background-color: rgb(254 205 211 / 0.45);
}
.bg-rose-200\\/5 {
  background-color: rgb(254 205 211 / 0.05);
}
.bg-rose-200\\/50 {
  background-color: rgb(254 205 211 / 0.5);
}
.bg-rose-200\\/55 {
  background-color: rgb(254 205 211 / 0.55);
}
.bg-rose-200\\/60 {
  background-color: rgb(254 205 211 / 0.6);
}
.bg-rose-200\\/65 {
  background-color: rgb(254 205 211 / 0.65);
}
.bg-rose-200\\/70 {
  background-color: rgb(254 205 211 / 0.7);
}
.bg-rose-200\\/75 {
  background-color: rgb(254 205 211 / 0.75);
}
.bg-rose-200\\/80 {
  background-color: rgb(254 205 211 / 0.8);
}
.bg-rose-200\\/85 {
  background-color: rgb(254 205 211 / 0.85);
}
.bg-rose-200\\/90 {
  background-color: rgb(254 205 211 / 0.9);
}
.bg-rose-200\\/95 {
  background-color: rgb(254 205 211 / 0.95);
}
.bg-rose-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 164 175 / var(--tw-bg-opacity));
}
.bg-rose-300\\/0 {
  background-color: rgb(253 164 175 / 0);
}
.bg-rose-300\\/10 {
  background-color: rgb(253 164 175 / 0.1);
}
.bg-rose-300\\/100 {
  background-color: rgb(253 164 175 / 1);
}
.bg-rose-300\\/15 {
  background-color: rgb(253 164 175 / 0.15);
}
.bg-rose-300\\/20 {
  background-color: rgb(253 164 175 / 0.2);
}
.bg-rose-300\\/25 {
  background-color: rgb(253 164 175 / 0.25);
}
.bg-rose-300\\/30 {
  background-color: rgb(253 164 175 / 0.3);
}
.bg-rose-300\\/35 {
  background-color: rgb(253 164 175 / 0.35);
}
.bg-rose-300\\/40 {
  background-color: rgb(253 164 175 / 0.4);
}
.bg-rose-300\\/45 {
  background-color: rgb(253 164 175 / 0.45);
}
.bg-rose-300\\/5 {
  background-color: rgb(253 164 175 / 0.05);
}
.bg-rose-300\\/50 {
  background-color: rgb(253 164 175 / 0.5);
}
.bg-rose-300\\/55 {
  background-color: rgb(253 164 175 / 0.55);
}
.bg-rose-300\\/60 {
  background-color: rgb(253 164 175 / 0.6);
}
.bg-rose-300\\/65 {
  background-color: rgb(253 164 175 / 0.65);
}
.bg-rose-300\\/70 {
  background-color: rgb(253 164 175 / 0.7);
}
.bg-rose-300\\/75 {
  background-color: rgb(253 164 175 / 0.75);
}
.bg-rose-300\\/80 {
  background-color: rgb(253 164 175 / 0.8);
}
.bg-rose-300\\/85 {
  background-color: rgb(253 164 175 / 0.85);
}
.bg-rose-300\\/90 {
  background-color: rgb(253 164 175 / 0.9);
}
.bg-rose-300\\/95 {
  background-color: rgb(253 164 175 / 0.95);
}
.bg-rose-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(251 113 133 / var(--tw-bg-opacity));
}
.bg-rose-400\\/0 {
  background-color: rgb(251 113 133 / 0);
}
.bg-rose-400\\/10 {
  background-color: rgb(251 113 133 / 0.1);
}
.bg-rose-400\\/100 {
  background-color: rgb(251 113 133 / 1);
}
.bg-rose-400\\/15 {
  background-color: rgb(251 113 133 / 0.15);
}
.bg-rose-400\\/20 {
  background-color: rgb(251 113 133 / 0.2);
}
.bg-rose-400\\/25 {
  background-color: rgb(251 113 133 / 0.25);
}
.bg-rose-400\\/30 {
  background-color: rgb(251 113 133 / 0.3);
}
.bg-rose-400\\/35 {
  background-color: rgb(251 113 133 / 0.35);
}
.bg-rose-400\\/40 {
  background-color: rgb(251 113 133 / 0.4);
}
.bg-rose-400\\/45 {
  background-color: rgb(251 113 133 / 0.45);
}
.bg-rose-400\\/5 {
  background-color: rgb(251 113 133 / 0.05);
}
.bg-rose-400\\/50 {
  background-color: rgb(251 113 133 / 0.5);
}
.bg-rose-400\\/55 {
  background-color: rgb(251 113 133 / 0.55);
}
.bg-rose-400\\/60 {
  background-color: rgb(251 113 133 / 0.6);
}
.bg-rose-400\\/65 {
  background-color: rgb(251 113 133 / 0.65);
}
.bg-rose-400\\/70 {
  background-color: rgb(251 113 133 / 0.7);
}
.bg-rose-400\\/75 {
  background-color: rgb(251 113 133 / 0.75);
}
.bg-rose-400\\/80 {
  background-color: rgb(251 113 133 / 0.8);
}
.bg-rose-400\\/85 {
  background-color: rgb(251 113 133 / 0.85);
}
.bg-rose-400\\/90 {
  background-color: rgb(251 113 133 / 0.9);
}
.bg-rose-400\\/95 {
  background-color: rgb(251 113 133 / 0.95);
}
.bg-rose-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(255 241 242 / var(--tw-bg-opacity));
}
.bg-rose-50\\/0 {
  background-color: rgb(255 241 242 / 0);
}
.bg-rose-50\\/10 {
  background-color: rgb(255 241 242 / 0.1);
}
.bg-rose-50\\/100 {
  background-color: rgb(255 241 242 / 1);
}
.bg-rose-50\\/15 {
  background-color: rgb(255 241 242 / 0.15);
}
.bg-rose-50\\/20 {
  background-color: rgb(255 241 242 / 0.2);
}
.bg-rose-50\\/25 {
  background-color: rgb(255 241 242 / 0.25);
}
.bg-rose-50\\/30 {
  background-color: rgb(255 241 242 / 0.3);
}
.bg-rose-50\\/35 {
  background-color: rgb(255 241 242 / 0.35);
}
.bg-rose-50\\/40 {
  background-color: rgb(255 241 242 / 0.4);
}
.bg-rose-50\\/45 {
  background-color: rgb(255 241 242 / 0.45);
}
.bg-rose-50\\/5 {
  background-color: rgb(255 241 242 / 0.05);
}
.bg-rose-50\\/50 {
  background-color: rgb(255 241 242 / 0.5);
}
.bg-rose-50\\/55 {
  background-color: rgb(255 241 242 / 0.55);
}
.bg-rose-50\\/60 {
  background-color: rgb(255 241 242 / 0.6);
}
.bg-rose-50\\/65 {
  background-color: rgb(255 241 242 / 0.65);
}
.bg-rose-50\\/70 {
  background-color: rgb(255 241 242 / 0.7);
}
.bg-rose-50\\/75 {
  background-color: rgb(255 241 242 / 0.75);
}
.bg-rose-50\\/80 {
  background-color: rgb(255 241 242 / 0.8);
}
.bg-rose-50\\/85 {
  background-color: rgb(255 241 242 / 0.85);
}
.bg-rose-50\\/90 {
  background-color: rgb(255 241 242 / 0.9);
}
.bg-rose-50\\/95 {
  background-color: rgb(255 241 242 / 0.95);
}
.bg-rose-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(244 63 94 / var(--tw-bg-opacity));
}
.bg-rose-500\\/0 {
  background-color: rgb(244 63 94 / 0);
}
.bg-rose-500\\/10 {
  background-color: rgb(244 63 94 / 0.1);
}
.bg-rose-500\\/100 {
  background-color: rgb(244 63 94 / 1);
}
.bg-rose-500\\/15 {
  background-color: rgb(244 63 94 / 0.15);
}
.bg-rose-500\\/20 {
  background-color: rgb(244 63 94 / 0.2);
}
.bg-rose-500\\/25 {
  background-color: rgb(244 63 94 / 0.25);
}
.bg-rose-500\\/30 {
  background-color: rgb(244 63 94 / 0.3);
}
.bg-rose-500\\/35 {
  background-color: rgb(244 63 94 / 0.35);
}
.bg-rose-500\\/40 {
  background-color: rgb(244 63 94 / 0.4);
}
.bg-rose-500\\/45 {
  background-color: rgb(244 63 94 / 0.45);
}
.bg-rose-500\\/5 {
  background-color: rgb(244 63 94 / 0.05);
}
.bg-rose-500\\/50 {
  background-color: rgb(244 63 94 / 0.5);
}
.bg-rose-500\\/55 {
  background-color: rgb(244 63 94 / 0.55);
}
.bg-rose-500\\/60 {
  background-color: rgb(244 63 94 / 0.6);
}
.bg-rose-500\\/65 {
  background-color: rgb(244 63 94 / 0.65);
}
.bg-rose-500\\/70 {
  background-color: rgb(244 63 94 / 0.7);
}
.bg-rose-500\\/75 {
  background-color: rgb(244 63 94 / 0.75);
}
.bg-rose-500\\/80 {
  background-color: rgb(244 63 94 / 0.8);
}
.bg-rose-500\\/85 {
  background-color: rgb(244 63 94 / 0.85);
}
.bg-rose-500\\/90 {
  background-color: rgb(244 63 94 / 0.9);
}
.bg-rose-500\\/95 {
  background-color: rgb(244 63 94 / 0.95);
}
.bg-rose-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(225 29 72 / var(--tw-bg-opacity));
}
.bg-rose-600\\/0 {
  background-color: rgb(225 29 72 / 0);
}
.bg-rose-600\\/10 {
  background-color: rgb(225 29 72 / 0.1);
}
.bg-rose-600\\/100 {
  background-color: rgb(225 29 72 / 1);
}
.bg-rose-600\\/15 {
  background-color: rgb(225 29 72 / 0.15);
}
.bg-rose-600\\/20 {
  background-color: rgb(225 29 72 / 0.2);
}
.bg-rose-600\\/25 {
  background-color: rgb(225 29 72 / 0.25);
}
.bg-rose-600\\/30 {
  background-color: rgb(225 29 72 / 0.3);
}
.bg-rose-600\\/35 {
  background-color: rgb(225 29 72 / 0.35);
}
.bg-rose-600\\/40 {
  background-color: rgb(225 29 72 / 0.4);
}
.bg-rose-600\\/45 {
  background-color: rgb(225 29 72 / 0.45);
}
.bg-rose-600\\/5 {
  background-color: rgb(225 29 72 / 0.05);
}
.bg-rose-600\\/50 {
  background-color: rgb(225 29 72 / 0.5);
}
.bg-rose-600\\/55 {
  background-color: rgb(225 29 72 / 0.55);
}
.bg-rose-600\\/60 {
  background-color: rgb(225 29 72 / 0.6);
}
.bg-rose-600\\/65 {
  background-color: rgb(225 29 72 / 0.65);
}
.bg-rose-600\\/70 {
  background-color: rgb(225 29 72 / 0.7);
}
.bg-rose-600\\/75 {
  background-color: rgb(225 29 72 / 0.75);
}
.bg-rose-600\\/80 {
  background-color: rgb(225 29 72 / 0.8);
}
.bg-rose-600\\/85 {
  background-color: rgb(225 29 72 / 0.85);
}
.bg-rose-600\\/90 {
  background-color: rgb(225 29 72 / 0.9);
}
.bg-rose-600\\/95 {
  background-color: rgb(225 29 72 / 0.95);
}
.bg-rose-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(190 18 60 / var(--tw-bg-opacity));
}
.bg-rose-700\\/0 {
  background-color: rgb(190 18 60 / 0);
}
.bg-rose-700\\/10 {
  background-color: rgb(190 18 60 / 0.1);
}
.bg-rose-700\\/100 {
  background-color: rgb(190 18 60 / 1);
}
.bg-rose-700\\/15 {
  background-color: rgb(190 18 60 / 0.15);
}
.bg-rose-700\\/20 {
  background-color: rgb(190 18 60 / 0.2);
}
.bg-rose-700\\/25 {
  background-color: rgb(190 18 60 / 0.25);
}
.bg-rose-700\\/30 {
  background-color: rgb(190 18 60 / 0.3);
}
.bg-rose-700\\/35 {
  background-color: rgb(190 18 60 / 0.35);
}
.bg-rose-700\\/40 {
  background-color: rgb(190 18 60 / 0.4);
}
.bg-rose-700\\/45 {
  background-color: rgb(190 18 60 / 0.45);
}
.bg-rose-700\\/5 {
  background-color: rgb(190 18 60 / 0.05);
}
.bg-rose-700\\/50 {
  background-color: rgb(190 18 60 / 0.5);
}
.bg-rose-700\\/55 {
  background-color: rgb(190 18 60 / 0.55);
}
.bg-rose-700\\/60 {
  background-color: rgb(190 18 60 / 0.6);
}
.bg-rose-700\\/65 {
  background-color: rgb(190 18 60 / 0.65);
}
.bg-rose-700\\/70 {
  background-color: rgb(190 18 60 / 0.7);
}
.bg-rose-700\\/75 {
  background-color: rgb(190 18 60 / 0.75);
}
.bg-rose-700\\/80 {
  background-color: rgb(190 18 60 / 0.8);
}
.bg-rose-700\\/85 {
  background-color: rgb(190 18 60 / 0.85);
}
.bg-rose-700\\/90 {
  background-color: rgb(190 18 60 / 0.9);
}
.bg-rose-700\\/95 {
  background-color: rgb(190 18 60 / 0.95);
}
.bg-rose-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(159 18 57 / var(--tw-bg-opacity));
}
.bg-rose-800\\/0 {
  background-color: rgb(159 18 57 / 0);
}
.bg-rose-800\\/10 {
  background-color: rgb(159 18 57 / 0.1);
}
.bg-rose-800\\/100 {
  background-color: rgb(159 18 57 / 1);
}
.bg-rose-800\\/15 {
  background-color: rgb(159 18 57 / 0.15);
}
.bg-rose-800\\/20 {
  background-color: rgb(159 18 57 / 0.2);
}
.bg-rose-800\\/25 {
  background-color: rgb(159 18 57 / 0.25);
}
.bg-rose-800\\/30 {
  background-color: rgb(159 18 57 / 0.3);
}
.bg-rose-800\\/35 {
  background-color: rgb(159 18 57 / 0.35);
}
.bg-rose-800\\/40 {
  background-color: rgb(159 18 57 / 0.4);
}
.bg-rose-800\\/45 {
  background-color: rgb(159 18 57 / 0.45);
}
.bg-rose-800\\/5 {
  background-color: rgb(159 18 57 / 0.05);
}
.bg-rose-800\\/50 {
  background-color: rgb(159 18 57 / 0.5);
}
.bg-rose-800\\/55 {
  background-color: rgb(159 18 57 / 0.55);
}
.bg-rose-800\\/60 {
  background-color: rgb(159 18 57 / 0.6);
}
.bg-rose-800\\/65 {
  background-color: rgb(159 18 57 / 0.65);
}
.bg-rose-800\\/70 {
  background-color: rgb(159 18 57 / 0.7);
}
.bg-rose-800\\/75 {
  background-color: rgb(159 18 57 / 0.75);
}
.bg-rose-800\\/80 {
  background-color: rgb(159 18 57 / 0.8);
}
.bg-rose-800\\/85 {
  background-color: rgb(159 18 57 / 0.85);
}
.bg-rose-800\\/90 {
  background-color: rgb(159 18 57 / 0.9);
}
.bg-rose-800\\/95 {
  background-color: rgb(159 18 57 / 0.95);
}
.bg-rose-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(136 19 55 / var(--tw-bg-opacity));
}
.bg-rose-900\\/0 {
  background-color: rgb(136 19 55 / 0);
}
.bg-rose-900\\/10 {
  background-color: rgb(136 19 55 / 0.1);
}
.bg-rose-900\\/100 {
  background-color: rgb(136 19 55 / 1);
}
.bg-rose-900\\/15 {
  background-color: rgb(136 19 55 / 0.15);
}
.bg-rose-900\\/20 {
  background-color: rgb(136 19 55 / 0.2);
}
.bg-rose-900\\/25 {
  background-color: rgb(136 19 55 / 0.25);
}
.bg-rose-900\\/30 {
  background-color: rgb(136 19 55 / 0.3);
}
.bg-rose-900\\/35 {
  background-color: rgb(136 19 55 / 0.35);
}
.bg-rose-900\\/40 {
  background-color: rgb(136 19 55 / 0.4);
}
.bg-rose-900\\/45 {
  background-color: rgb(136 19 55 / 0.45);
}
.bg-rose-900\\/5 {
  background-color: rgb(136 19 55 / 0.05);
}
.bg-rose-900\\/50 {
  background-color: rgb(136 19 55 / 0.5);
}
.bg-rose-900\\/55 {
  background-color: rgb(136 19 55 / 0.55);
}
.bg-rose-900\\/60 {
  background-color: rgb(136 19 55 / 0.6);
}
.bg-rose-900\\/65 {
  background-color: rgb(136 19 55 / 0.65);
}
.bg-rose-900\\/70 {
  background-color: rgb(136 19 55 / 0.7);
}
.bg-rose-900\\/75 {
  background-color: rgb(136 19 55 / 0.75);
}
.bg-rose-900\\/80 {
  background-color: rgb(136 19 55 / 0.8);
}
.bg-rose-900\\/85 {
  background-color: rgb(136 19 55 / 0.85);
}
.bg-rose-900\\/90 {
  background-color: rgb(136 19 55 / 0.9);
}
.bg-rose-900\\/95 {
  background-color: rgb(136 19 55 / 0.95);
}
.bg-rose-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(76 5 25 / var(--tw-bg-opacity));
}
.bg-rose-950\\/0 {
  background-color: rgb(76 5 25 / 0);
}
.bg-rose-950\\/10 {
  background-color: rgb(76 5 25 / 0.1);
}
.bg-rose-950\\/100 {
  background-color: rgb(76 5 25 / 1);
}
.bg-rose-950\\/15 {
  background-color: rgb(76 5 25 / 0.15);
}
.bg-rose-950\\/20 {
  background-color: rgb(76 5 25 / 0.2);
}
.bg-rose-950\\/25 {
  background-color: rgb(76 5 25 / 0.25);
}
.bg-rose-950\\/30 {
  background-color: rgb(76 5 25 / 0.3);
}
.bg-rose-950\\/35 {
  background-color: rgb(76 5 25 / 0.35);
}
.bg-rose-950\\/40 {
  background-color: rgb(76 5 25 / 0.4);
}
.bg-rose-950\\/45 {
  background-color: rgb(76 5 25 / 0.45);
}
.bg-rose-950\\/5 {
  background-color: rgb(76 5 25 / 0.05);
}
.bg-rose-950\\/50 {
  background-color: rgb(76 5 25 / 0.5);
}
.bg-rose-950\\/55 {
  background-color: rgb(76 5 25 / 0.55);
}
.bg-rose-950\\/60 {
  background-color: rgb(76 5 25 / 0.6);
}
.bg-rose-950\\/65 {
  background-color: rgb(76 5 25 / 0.65);
}
.bg-rose-950\\/70 {
  background-color: rgb(76 5 25 / 0.7);
}
.bg-rose-950\\/75 {
  background-color: rgb(76 5 25 / 0.75);
}
.bg-rose-950\\/80 {
  background-color: rgb(76 5 25 / 0.8);
}
.bg-rose-950\\/85 {
  background-color: rgb(76 5 25 / 0.85);
}
.bg-rose-950\\/90 {
  background-color: rgb(76 5 25 / 0.9);
}
.bg-rose-950\\/95 {
  background-color: rgb(76 5 25 / 0.95);
}
.bg-sky-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(224 242 254 / var(--tw-bg-opacity));
}
.bg-sky-100\\/0 {
  background-color: rgb(224 242 254 / 0);
}
.bg-sky-100\\/10 {
  background-color: rgb(224 242 254 / 0.1);
}
.bg-sky-100\\/100 {
  background-color: rgb(224 242 254 / 1);
}
.bg-sky-100\\/15 {
  background-color: rgb(224 242 254 / 0.15);
}
.bg-sky-100\\/20 {
  background-color: rgb(224 242 254 / 0.2);
}
.bg-sky-100\\/25 {
  background-color: rgb(224 242 254 / 0.25);
}
.bg-sky-100\\/30 {
  background-color: rgb(224 242 254 / 0.3);
}
.bg-sky-100\\/35 {
  background-color: rgb(224 242 254 / 0.35);
}
.bg-sky-100\\/40 {
  background-color: rgb(224 242 254 / 0.4);
}
.bg-sky-100\\/45 {
  background-color: rgb(224 242 254 / 0.45);
}
.bg-sky-100\\/5 {
  background-color: rgb(224 242 254 / 0.05);
}
.bg-sky-100\\/50 {
  background-color: rgb(224 242 254 / 0.5);
}
.bg-sky-100\\/55 {
  background-color: rgb(224 242 254 / 0.55);
}
.bg-sky-100\\/60 {
  background-color: rgb(224 242 254 / 0.6);
}
.bg-sky-100\\/65 {
  background-color: rgb(224 242 254 / 0.65);
}
.bg-sky-100\\/70 {
  background-color: rgb(224 242 254 / 0.7);
}
.bg-sky-100\\/75 {
  background-color: rgb(224 242 254 / 0.75);
}
.bg-sky-100\\/80 {
  background-color: rgb(224 242 254 / 0.8);
}
.bg-sky-100\\/85 {
  background-color: rgb(224 242 254 / 0.85);
}
.bg-sky-100\\/90 {
  background-color: rgb(224 242 254 / 0.9);
}
.bg-sky-100\\/95 {
  background-color: rgb(224 242 254 / 0.95);
}
.bg-sky-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(186 230 253 / var(--tw-bg-opacity));
}
.bg-sky-200\\/0 {
  background-color: rgb(186 230 253 / 0);
}
.bg-sky-200\\/10 {
  background-color: rgb(186 230 253 / 0.1);
}
.bg-sky-200\\/100 {
  background-color: rgb(186 230 253 / 1);
}
.bg-sky-200\\/15 {
  background-color: rgb(186 230 253 / 0.15);
}
.bg-sky-200\\/20 {
  background-color: rgb(186 230 253 / 0.2);
}
.bg-sky-200\\/25 {
  background-color: rgb(186 230 253 / 0.25);
}
.bg-sky-200\\/30 {
  background-color: rgb(186 230 253 / 0.3);
}
.bg-sky-200\\/35 {
  background-color: rgb(186 230 253 / 0.35);
}
.bg-sky-200\\/40 {
  background-color: rgb(186 230 253 / 0.4);
}
.bg-sky-200\\/45 {
  background-color: rgb(186 230 253 / 0.45);
}
.bg-sky-200\\/5 {
  background-color: rgb(186 230 253 / 0.05);
}
.bg-sky-200\\/50 {
  background-color: rgb(186 230 253 / 0.5);
}
.bg-sky-200\\/55 {
  background-color: rgb(186 230 253 / 0.55);
}
.bg-sky-200\\/60 {
  background-color: rgb(186 230 253 / 0.6);
}
.bg-sky-200\\/65 {
  background-color: rgb(186 230 253 / 0.65);
}
.bg-sky-200\\/70 {
  background-color: rgb(186 230 253 / 0.7);
}
.bg-sky-200\\/75 {
  background-color: rgb(186 230 253 / 0.75);
}
.bg-sky-200\\/80 {
  background-color: rgb(186 230 253 / 0.8);
}
.bg-sky-200\\/85 {
  background-color: rgb(186 230 253 / 0.85);
}
.bg-sky-200\\/90 {
  background-color: rgb(186 230 253 / 0.9);
}
.bg-sky-200\\/95 {
  background-color: rgb(186 230 253 / 0.95);
}
.bg-sky-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(125 211 252 / var(--tw-bg-opacity));
}
.bg-sky-300\\/0 {
  background-color: rgb(125 211 252 / 0);
}
.bg-sky-300\\/10 {
  background-color: rgb(125 211 252 / 0.1);
}
.bg-sky-300\\/100 {
  background-color: rgb(125 211 252 / 1);
}
.bg-sky-300\\/15 {
  background-color: rgb(125 211 252 / 0.15);
}
.bg-sky-300\\/20 {
  background-color: rgb(125 211 252 / 0.2);
}
.bg-sky-300\\/25 {
  background-color: rgb(125 211 252 / 0.25);
}
.bg-sky-300\\/30 {
  background-color: rgb(125 211 252 / 0.3);
}
.bg-sky-300\\/35 {
  background-color: rgb(125 211 252 / 0.35);
}
.bg-sky-300\\/40 {
  background-color: rgb(125 211 252 / 0.4);
}
.bg-sky-300\\/45 {
  background-color: rgb(125 211 252 / 0.45);
}
.bg-sky-300\\/5 {
  background-color: rgb(125 211 252 / 0.05);
}
.bg-sky-300\\/50 {
  background-color: rgb(125 211 252 / 0.5);
}
.bg-sky-300\\/55 {
  background-color: rgb(125 211 252 / 0.55);
}
.bg-sky-300\\/60 {
  background-color: rgb(125 211 252 / 0.6);
}
.bg-sky-300\\/65 {
  background-color: rgb(125 211 252 / 0.65);
}
.bg-sky-300\\/70 {
  background-color: rgb(125 211 252 / 0.7);
}
.bg-sky-300\\/75 {
  background-color: rgb(125 211 252 / 0.75);
}
.bg-sky-300\\/80 {
  background-color: rgb(125 211 252 / 0.8);
}
.bg-sky-300\\/85 {
  background-color: rgb(125 211 252 / 0.85);
}
.bg-sky-300\\/90 {
  background-color: rgb(125 211 252 / 0.9);
}
.bg-sky-300\\/95 {
  background-color: rgb(125 211 252 / 0.95);
}
.bg-sky-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(56 189 248 / var(--tw-bg-opacity));
}
.bg-sky-400\\/0 {
  background-color: rgb(56 189 248 / 0);
}
.bg-sky-400\\/10 {
  background-color: rgb(56 189 248 / 0.1);
}
.bg-sky-400\\/100 {
  background-color: rgb(56 189 248 / 1);
}
.bg-sky-400\\/15 {
  background-color: rgb(56 189 248 / 0.15);
}
.bg-sky-400\\/20 {
  background-color: rgb(56 189 248 / 0.2);
}
.bg-sky-400\\/25 {
  background-color: rgb(56 189 248 / 0.25);
}
.bg-sky-400\\/30 {
  background-color: rgb(56 189 248 / 0.3);
}
.bg-sky-400\\/35 {
  background-color: rgb(56 189 248 / 0.35);
}
.bg-sky-400\\/40 {
  background-color: rgb(56 189 248 / 0.4);
}
.bg-sky-400\\/45 {
  background-color: rgb(56 189 248 / 0.45);
}
.bg-sky-400\\/5 {
  background-color: rgb(56 189 248 / 0.05);
}
.bg-sky-400\\/50 {
  background-color: rgb(56 189 248 / 0.5);
}
.bg-sky-400\\/55 {
  background-color: rgb(56 189 248 / 0.55);
}
.bg-sky-400\\/60 {
  background-color: rgb(56 189 248 / 0.6);
}
.bg-sky-400\\/65 {
  background-color: rgb(56 189 248 / 0.65);
}
.bg-sky-400\\/70 {
  background-color: rgb(56 189 248 / 0.7);
}
.bg-sky-400\\/75 {
  background-color: rgb(56 189 248 / 0.75);
}
.bg-sky-400\\/80 {
  background-color: rgb(56 189 248 / 0.8);
}
.bg-sky-400\\/85 {
  background-color: rgb(56 189 248 / 0.85);
}
.bg-sky-400\\/90 {
  background-color: rgb(56 189 248 / 0.9);
}
.bg-sky-400\\/95 {
  background-color: rgb(56 189 248 / 0.95);
}
.bg-sky-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(240 249 255 / var(--tw-bg-opacity));
}
.bg-sky-50\\/0 {
  background-color: rgb(240 249 255 / 0);
}
.bg-sky-50\\/10 {
  background-color: rgb(240 249 255 / 0.1);
}
.bg-sky-50\\/100 {
  background-color: rgb(240 249 255 / 1);
}
.bg-sky-50\\/15 {
  background-color: rgb(240 249 255 / 0.15);
}
.bg-sky-50\\/20 {
  background-color: rgb(240 249 255 / 0.2);
}
.bg-sky-50\\/25 {
  background-color: rgb(240 249 255 / 0.25);
}
.bg-sky-50\\/30 {
  background-color: rgb(240 249 255 / 0.3);
}
.bg-sky-50\\/35 {
  background-color: rgb(240 249 255 / 0.35);
}
.bg-sky-50\\/40 {
  background-color: rgb(240 249 255 / 0.4);
}
.bg-sky-50\\/45 {
  background-color: rgb(240 249 255 / 0.45);
}
.bg-sky-50\\/5 {
  background-color: rgb(240 249 255 / 0.05);
}
.bg-sky-50\\/50 {
  background-color: rgb(240 249 255 / 0.5);
}
.bg-sky-50\\/55 {
  background-color: rgb(240 249 255 / 0.55);
}
.bg-sky-50\\/60 {
  background-color: rgb(240 249 255 / 0.6);
}
.bg-sky-50\\/65 {
  background-color: rgb(240 249 255 / 0.65);
}
.bg-sky-50\\/70 {
  background-color: rgb(240 249 255 / 0.7);
}
.bg-sky-50\\/75 {
  background-color: rgb(240 249 255 / 0.75);
}
.bg-sky-50\\/80 {
  background-color: rgb(240 249 255 / 0.8);
}
.bg-sky-50\\/85 {
  background-color: rgb(240 249 255 / 0.85);
}
.bg-sky-50\\/90 {
  background-color: rgb(240 249 255 / 0.9);
}
.bg-sky-50\\/95 {
  background-color: rgb(240 249 255 / 0.95);
}
.bg-sky-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(14 165 233 / var(--tw-bg-opacity));
}
.bg-sky-500\\/0 {
  background-color: rgb(14 165 233 / 0);
}
.bg-sky-500\\/10 {
  background-color: rgb(14 165 233 / 0.1);
}
.bg-sky-500\\/100 {
  background-color: rgb(14 165 233 / 1);
}
.bg-sky-500\\/15 {
  background-color: rgb(14 165 233 / 0.15);
}
.bg-sky-500\\/20 {
  background-color: rgb(14 165 233 / 0.2);
}
.bg-sky-500\\/25 {
  background-color: rgb(14 165 233 / 0.25);
}
.bg-sky-500\\/30 {
  background-color: rgb(14 165 233 / 0.3);
}
.bg-sky-500\\/35 {
  background-color: rgb(14 165 233 / 0.35);
}
.bg-sky-500\\/40 {
  background-color: rgb(14 165 233 / 0.4);
}
.bg-sky-500\\/45 {
  background-color: rgb(14 165 233 / 0.45);
}
.bg-sky-500\\/5 {
  background-color: rgb(14 165 233 / 0.05);
}
.bg-sky-500\\/50 {
  background-color: rgb(14 165 233 / 0.5);
}
.bg-sky-500\\/55 {
  background-color: rgb(14 165 233 / 0.55);
}
.bg-sky-500\\/60 {
  background-color: rgb(14 165 233 / 0.6);
}
.bg-sky-500\\/65 {
  background-color: rgb(14 165 233 / 0.65);
}
.bg-sky-500\\/70 {
  background-color: rgb(14 165 233 / 0.7);
}
.bg-sky-500\\/75 {
  background-color: rgb(14 165 233 / 0.75);
}
.bg-sky-500\\/80 {
  background-color: rgb(14 165 233 / 0.8);
}
.bg-sky-500\\/85 {
  background-color: rgb(14 165 233 / 0.85);
}
.bg-sky-500\\/90 {
  background-color: rgb(14 165 233 / 0.9);
}
.bg-sky-500\\/95 {
  background-color: rgb(14 165 233 / 0.95);
}
.bg-sky-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(2 132 199 / var(--tw-bg-opacity));
}
.bg-sky-600\\/0 {
  background-color: rgb(2 132 199 / 0);
}
.bg-sky-600\\/10 {
  background-color: rgb(2 132 199 / 0.1);
}
.bg-sky-600\\/100 {
  background-color: rgb(2 132 199 / 1);
}
.bg-sky-600\\/15 {
  background-color: rgb(2 132 199 / 0.15);
}
.bg-sky-600\\/20 {
  background-color: rgb(2 132 199 / 0.2);
}
.bg-sky-600\\/25 {
  background-color: rgb(2 132 199 / 0.25);
}
.bg-sky-600\\/30 {
  background-color: rgb(2 132 199 / 0.3);
}
.bg-sky-600\\/35 {
  background-color: rgb(2 132 199 / 0.35);
}
.bg-sky-600\\/40 {
  background-color: rgb(2 132 199 / 0.4);
}
.bg-sky-600\\/45 {
  background-color: rgb(2 132 199 / 0.45);
}
.bg-sky-600\\/5 {
  background-color: rgb(2 132 199 / 0.05);
}
.bg-sky-600\\/50 {
  background-color: rgb(2 132 199 / 0.5);
}
.bg-sky-600\\/55 {
  background-color: rgb(2 132 199 / 0.55);
}
.bg-sky-600\\/60 {
  background-color: rgb(2 132 199 / 0.6);
}
.bg-sky-600\\/65 {
  background-color: rgb(2 132 199 / 0.65);
}
.bg-sky-600\\/70 {
  background-color: rgb(2 132 199 / 0.7);
}
.bg-sky-600\\/75 {
  background-color: rgb(2 132 199 / 0.75);
}
.bg-sky-600\\/80 {
  background-color: rgb(2 132 199 / 0.8);
}
.bg-sky-600\\/85 {
  background-color: rgb(2 132 199 / 0.85);
}
.bg-sky-600\\/90 {
  background-color: rgb(2 132 199 / 0.9);
}
.bg-sky-600\\/95 {
  background-color: rgb(2 132 199 / 0.95);
}
.bg-sky-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(3 105 161 / var(--tw-bg-opacity));
}
.bg-sky-700\\/0 {
  background-color: rgb(3 105 161 / 0);
}
.bg-sky-700\\/10 {
  background-color: rgb(3 105 161 / 0.1);
}
.bg-sky-700\\/100 {
  background-color: rgb(3 105 161 / 1);
}
.bg-sky-700\\/15 {
  background-color: rgb(3 105 161 / 0.15);
}
.bg-sky-700\\/20 {
  background-color: rgb(3 105 161 / 0.2);
}
.bg-sky-700\\/25 {
  background-color: rgb(3 105 161 / 0.25);
}
.bg-sky-700\\/30 {
  background-color: rgb(3 105 161 / 0.3);
}
.bg-sky-700\\/35 {
  background-color: rgb(3 105 161 / 0.35);
}
.bg-sky-700\\/40 {
  background-color: rgb(3 105 161 / 0.4);
}
.bg-sky-700\\/45 {
  background-color: rgb(3 105 161 / 0.45);
}
.bg-sky-700\\/5 {
  background-color: rgb(3 105 161 / 0.05);
}
.bg-sky-700\\/50 {
  background-color: rgb(3 105 161 / 0.5);
}
.bg-sky-700\\/55 {
  background-color: rgb(3 105 161 / 0.55);
}
.bg-sky-700\\/60 {
  background-color: rgb(3 105 161 / 0.6);
}
.bg-sky-700\\/65 {
  background-color: rgb(3 105 161 / 0.65);
}
.bg-sky-700\\/70 {
  background-color: rgb(3 105 161 / 0.7);
}
.bg-sky-700\\/75 {
  background-color: rgb(3 105 161 / 0.75);
}
.bg-sky-700\\/80 {
  background-color: rgb(3 105 161 / 0.8);
}
.bg-sky-700\\/85 {
  background-color: rgb(3 105 161 / 0.85);
}
.bg-sky-700\\/90 {
  background-color: rgb(3 105 161 / 0.9);
}
.bg-sky-700\\/95 {
  background-color: rgb(3 105 161 / 0.95);
}
.bg-sky-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(7 89 133 / var(--tw-bg-opacity));
}
.bg-sky-800\\/0 {
  background-color: rgb(7 89 133 / 0);
}
.bg-sky-800\\/10 {
  background-color: rgb(7 89 133 / 0.1);
}
.bg-sky-800\\/100 {
  background-color: rgb(7 89 133 / 1);
}
.bg-sky-800\\/15 {
  background-color: rgb(7 89 133 / 0.15);
}
.bg-sky-800\\/20 {
  background-color: rgb(7 89 133 / 0.2);
}
.bg-sky-800\\/25 {
  background-color: rgb(7 89 133 / 0.25);
}
.bg-sky-800\\/30 {
  background-color: rgb(7 89 133 / 0.3);
}
.bg-sky-800\\/35 {
  background-color: rgb(7 89 133 / 0.35);
}
.bg-sky-800\\/40 {
  background-color: rgb(7 89 133 / 0.4);
}
.bg-sky-800\\/45 {
  background-color: rgb(7 89 133 / 0.45);
}
.bg-sky-800\\/5 {
  background-color: rgb(7 89 133 / 0.05);
}
.bg-sky-800\\/50 {
  background-color: rgb(7 89 133 / 0.5);
}
.bg-sky-800\\/55 {
  background-color: rgb(7 89 133 / 0.55);
}
.bg-sky-800\\/60 {
  background-color: rgb(7 89 133 / 0.6);
}
.bg-sky-800\\/65 {
  background-color: rgb(7 89 133 / 0.65);
}
.bg-sky-800\\/70 {
  background-color: rgb(7 89 133 / 0.7);
}
.bg-sky-800\\/75 {
  background-color: rgb(7 89 133 / 0.75);
}
.bg-sky-800\\/80 {
  background-color: rgb(7 89 133 / 0.8);
}
.bg-sky-800\\/85 {
  background-color: rgb(7 89 133 / 0.85);
}
.bg-sky-800\\/90 {
  background-color: rgb(7 89 133 / 0.9);
}
.bg-sky-800\\/95 {
  background-color: rgb(7 89 133 / 0.95);
}
.bg-sky-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(12 74 110 / var(--tw-bg-opacity));
}
.bg-sky-900\\/0 {
  background-color: rgb(12 74 110 / 0);
}
.bg-sky-900\\/10 {
  background-color: rgb(12 74 110 / 0.1);
}
.bg-sky-900\\/100 {
  background-color: rgb(12 74 110 / 1);
}
.bg-sky-900\\/15 {
  background-color: rgb(12 74 110 / 0.15);
}
.bg-sky-900\\/20 {
  background-color: rgb(12 74 110 / 0.2);
}
.bg-sky-900\\/25 {
  background-color: rgb(12 74 110 / 0.25);
}
.bg-sky-900\\/30 {
  background-color: rgb(12 74 110 / 0.3);
}
.bg-sky-900\\/35 {
  background-color: rgb(12 74 110 / 0.35);
}
.bg-sky-900\\/40 {
  background-color: rgb(12 74 110 / 0.4);
}
.bg-sky-900\\/45 {
  background-color: rgb(12 74 110 / 0.45);
}
.bg-sky-900\\/5 {
  background-color: rgb(12 74 110 / 0.05);
}
.bg-sky-900\\/50 {
  background-color: rgb(12 74 110 / 0.5);
}
.bg-sky-900\\/55 {
  background-color: rgb(12 74 110 / 0.55);
}
.bg-sky-900\\/60 {
  background-color: rgb(12 74 110 / 0.6);
}
.bg-sky-900\\/65 {
  background-color: rgb(12 74 110 / 0.65);
}
.bg-sky-900\\/70 {
  background-color: rgb(12 74 110 / 0.7);
}
.bg-sky-900\\/75 {
  background-color: rgb(12 74 110 / 0.75);
}
.bg-sky-900\\/80 {
  background-color: rgb(12 74 110 / 0.8);
}
.bg-sky-900\\/85 {
  background-color: rgb(12 74 110 / 0.85);
}
.bg-sky-900\\/90 {
  background-color: rgb(12 74 110 / 0.9);
}
.bg-sky-900\\/95 {
  background-color: rgb(12 74 110 / 0.95);
}
.bg-sky-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(8 47 73 / var(--tw-bg-opacity));
}
.bg-sky-950\\/0 {
  background-color: rgb(8 47 73 / 0);
}
.bg-sky-950\\/10 {
  background-color: rgb(8 47 73 / 0.1);
}
.bg-sky-950\\/100 {
  background-color: rgb(8 47 73 / 1);
}
.bg-sky-950\\/15 {
  background-color: rgb(8 47 73 / 0.15);
}
.bg-sky-950\\/20 {
  background-color: rgb(8 47 73 / 0.2);
}
.bg-sky-950\\/25 {
  background-color: rgb(8 47 73 / 0.25);
}
.bg-sky-950\\/30 {
  background-color: rgb(8 47 73 / 0.3);
}
.bg-sky-950\\/35 {
  background-color: rgb(8 47 73 / 0.35);
}
.bg-sky-950\\/40 {
  background-color: rgb(8 47 73 / 0.4);
}
.bg-sky-950\\/45 {
  background-color: rgb(8 47 73 / 0.45);
}
.bg-sky-950\\/5 {
  background-color: rgb(8 47 73 / 0.05);
}
.bg-sky-950\\/50 {
  background-color: rgb(8 47 73 / 0.5);
}
.bg-sky-950\\/55 {
  background-color: rgb(8 47 73 / 0.55);
}
.bg-sky-950\\/60 {
  background-color: rgb(8 47 73 / 0.6);
}
.bg-sky-950\\/65 {
  background-color: rgb(8 47 73 / 0.65);
}
.bg-sky-950\\/70 {
  background-color: rgb(8 47 73 / 0.7);
}
.bg-sky-950\\/75 {
  background-color: rgb(8 47 73 / 0.75);
}
.bg-sky-950\\/80 {
  background-color: rgb(8 47 73 / 0.8);
}
.bg-sky-950\\/85 {
  background-color: rgb(8 47 73 / 0.85);
}
.bg-sky-950\\/90 {
  background-color: rgb(8 47 73 / 0.9);
}
.bg-sky-950\\/95 {
  background-color: rgb(8 47 73 / 0.95);
}
.bg-slate-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(241 245 249 / var(--tw-bg-opacity));
}
.bg-slate-100\\/0 {
  background-color: rgb(241 245 249 / 0);
}
.bg-slate-100\\/10 {
  background-color: rgb(241 245 249 / 0.1);
}
.bg-slate-100\\/100 {
  background-color: rgb(241 245 249 / 1);
}
.bg-slate-100\\/15 {
  background-color: rgb(241 245 249 / 0.15);
}
.bg-slate-100\\/20 {
  background-color: rgb(241 245 249 / 0.2);
}
.bg-slate-100\\/25 {
  background-color: rgb(241 245 249 / 0.25);
}
.bg-slate-100\\/30 {
  background-color: rgb(241 245 249 / 0.3);
}
.bg-slate-100\\/35 {
  background-color: rgb(241 245 249 / 0.35);
}
.bg-slate-100\\/40 {
  background-color: rgb(241 245 249 / 0.4);
}
.bg-slate-100\\/45 {
  background-color: rgb(241 245 249 / 0.45);
}
.bg-slate-100\\/5 {
  background-color: rgb(241 245 249 / 0.05);
}
.bg-slate-100\\/50 {
  background-color: rgb(241 245 249 / 0.5);
}
.bg-slate-100\\/55 {
  background-color: rgb(241 245 249 / 0.55);
}
.bg-slate-100\\/60 {
  background-color: rgb(241 245 249 / 0.6);
}
.bg-slate-100\\/65 {
  background-color: rgb(241 245 249 / 0.65);
}
.bg-slate-100\\/70 {
  background-color: rgb(241 245 249 / 0.7);
}
.bg-slate-100\\/75 {
  background-color: rgb(241 245 249 / 0.75);
}
.bg-slate-100\\/80 {
  background-color: rgb(241 245 249 / 0.8);
}
.bg-slate-100\\/85 {
  background-color: rgb(241 245 249 / 0.85);
}
.bg-slate-100\\/90 {
  background-color: rgb(241 245 249 / 0.9);
}
.bg-slate-100\\/95 {
  background-color: rgb(241 245 249 / 0.95);
}
.bg-slate-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(226 232 240 / var(--tw-bg-opacity));
}
.bg-slate-200\\/0 {
  background-color: rgb(226 232 240 / 0);
}
.bg-slate-200\\/10 {
  background-color: rgb(226 232 240 / 0.1);
}
.bg-slate-200\\/100 {
  background-color: rgb(226 232 240 / 1);
}
.bg-slate-200\\/15 {
  background-color: rgb(226 232 240 / 0.15);
}
.bg-slate-200\\/20 {
  background-color: rgb(226 232 240 / 0.2);
}
.bg-slate-200\\/25 {
  background-color: rgb(226 232 240 / 0.25);
}
.bg-slate-200\\/30 {
  background-color: rgb(226 232 240 / 0.3);
}
.bg-slate-200\\/35 {
  background-color: rgb(226 232 240 / 0.35);
}
.bg-slate-200\\/40 {
  background-color: rgb(226 232 240 / 0.4);
}
.bg-slate-200\\/45 {
  background-color: rgb(226 232 240 / 0.45);
}
.bg-slate-200\\/5 {
  background-color: rgb(226 232 240 / 0.05);
}
.bg-slate-200\\/50 {
  background-color: rgb(226 232 240 / 0.5);
}
.bg-slate-200\\/55 {
  background-color: rgb(226 232 240 / 0.55);
}
.bg-slate-200\\/60 {
  background-color: rgb(226 232 240 / 0.6);
}
.bg-slate-200\\/65 {
  background-color: rgb(226 232 240 / 0.65);
}
.bg-slate-200\\/70 {
  background-color: rgb(226 232 240 / 0.7);
}
.bg-slate-200\\/75 {
  background-color: rgb(226 232 240 / 0.75);
}
.bg-slate-200\\/80 {
  background-color: rgb(226 232 240 / 0.8);
}
.bg-slate-200\\/85 {
  background-color: rgb(226 232 240 / 0.85);
}
.bg-slate-200\\/90 {
  background-color: rgb(226 232 240 / 0.9);
}
.bg-slate-200\\/95 {
  background-color: rgb(226 232 240 / 0.95);
}
.bg-slate-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(203 213 225 / var(--tw-bg-opacity));
}
.bg-slate-300\\/0 {
  background-color: rgb(203 213 225 / 0);
}
.bg-slate-300\\/10 {
  background-color: rgb(203 213 225 / 0.1);
}
.bg-slate-300\\/100 {
  background-color: rgb(203 213 225 / 1);
}
.bg-slate-300\\/15 {
  background-color: rgb(203 213 225 / 0.15);
}
.bg-slate-300\\/20 {
  background-color: rgb(203 213 225 / 0.2);
}
.bg-slate-300\\/25 {
  background-color: rgb(203 213 225 / 0.25);
}
.bg-slate-300\\/30 {
  background-color: rgb(203 213 225 / 0.3);
}
.bg-slate-300\\/35 {
  background-color: rgb(203 213 225 / 0.35);
}
.bg-slate-300\\/40 {
  background-color: rgb(203 213 225 / 0.4);
}
.bg-slate-300\\/45 {
  background-color: rgb(203 213 225 / 0.45);
}
.bg-slate-300\\/5 {
  background-color: rgb(203 213 225 / 0.05);
}
.bg-slate-300\\/50 {
  background-color: rgb(203 213 225 / 0.5);
}
.bg-slate-300\\/55 {
  background-color: rgb(203 213 225 / 0.55);
}
.bg-slate-300\\/60 {
  background-color: rgb(203 213 225 / 0.6);
}
.bg-slate-300\\/65 {
  background-color: rgb(203 213 225 / 0.65);
}
.bg-slate-300\\/70 {
  background-color: rgb(203 213 225 / 0.7);
}
.bg-slate-300\\/75 {
  background-color: rgb(203 213 225 / 0.75);
}
.bg-slate-300\\/80 {
  background-color: rgb(203 213 225 / 0.8);
}
.bg-slate-300\\/85 {
  background-color: rgb(203 213 225 / 0.85);
}
.bg-slate-300\\/90 {
  background-color: rgb(203 213 225 / 0.9);
}
.bg-slate-300\\/95 {
  background-color: rgb(203 213 225 / 0.95);
}
.bg-slate-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(148 163 184 / var(--tw-bg-opacity));
}
.bg-slate-400\\/0 {
  background-color: rgb(148 163 184 / 0);
}
.bg-slate-400\\/10 {
  background-color: rgb(148 163 184 / 0.1);
}
.bg-slate-400\\/100 {
  background-color: rgb(148 163 184 / 1);
}
.bg-slate-400\\/15 {
  background-color: rgb(148 163 184 / 0.15);
}
.bg-slate-400\\/20 {
  background-color: rgb(148 163 184 / 0.2);
}
.bg-slate-400\\/25 {
  background-color: rgb(148 163 184 / 0.25);
}
.bg-slate-400\\/30 {
  background-color: rgb(148 163 184 / 0.3);
}
.bg-slate-400\\/35 {
  background-color: rgb(148 163 184 / 0.35);
}
.bg-slate-400\\/40 {
  background-color: rgb(148 163 184 / 0.4);
}
.bg-slate-400\\/45 {
  background-color: rgb(148 163 184 / 0.45);
}
.bg-slate-400\\/5 {
  background-color: rgb(148 163 184 / 0.05);
}
.bg-slate-400\\/50 {
  background-color: rgb(148 163 184 / 0.5);
}
.bg-slate-400\\/55 {
  background-color: rgb(148 163 184 / 0.55);
}
.bg-slate-400\\/60 {
  background-color: rgb(148 163 184 / 0.6);
}
.bg-slate-400\\/65 {
  background-color: rgb(148 163 184 / 0.65);
}
.bg-slate-400\\/70 {
  background-color: rgb(148 163 184 / 0.7);
}
.bg-slate-400\\/75 {
  background-color: rgb(148 163 184 / 0.75);
}
.bg-slate-400\\/80 {
  background-color: rgb(148 163 184 / 0.8);
}
.bg-slate-400\\/85 {
  background-color: rgb(148 163 184 / 0.85);
}
.bg-slate-400\\/90 {
  background-color: rgb(148 163 184 / 0.9);
}
.bg-slate-400\\/95 {
  background-color: rgb(148 163 184 / 0.95);
}
.bg-slate-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(248 250 252 / var(--tw-bg-opacity));
}
.bg-slate-50\\/0 {
  background-color: rgb(248 250 252 / 0);
}
.bg-slate-50\\/10 {
  background-color: rgb(248 250 252 / 0.1);
}
.bg-slate-50\\/100 {
  background-color: rgb(248 250 252 / 1);
}
.bg-slate-50\\/15 {
  background-color: rgb(248 250 252 / 0.15);
}
.bg-slate-50\\/20 {
  background-color: rgb(248 250 252 / 0.2);
}
.bg-slate-50\\/25 {
  background-color: rgb(248 250 252 / 0.25);
}
.bg-slate-50\\/30 {
  background-color: rgb(248 250 252 / 0.3);
}
.bg-slate-50\\/35 {
  background-color: rgb(248 250 252 / 0.35);
}
.bg-slate-50\\/40 {
  background-color: rgb(248 250 252 / 0.4);
}
.bg-slate-50\\/45 {
  background-color: rgb(248 250 252 / 0.45);
}
.bg-slate-50\\/5 {
  background-color: rgb(248 250 252 / 0.05);
}
.bg-slate-50\\/50 {
  background-color: rgb(248 250 252 / 0.5);
}
.bg-slate-50\\/55 {
  background-color: rgb(248 250 252 / 0.55);
}
.bg-slate-50\\/60 {
  background-color: rgb(248 250 252 / 0.6);
}
.bg-slate-50\\/65 {
  background-color: rgb(248 250 252 / 0.65);
}
.bg-slate-50\\/70 {
  background-color: rgb(248 250 252 / 0.7);
}
.bg-slate-50\\/75 {
  background-color: rgb(248 250 252 / 0.75);
}
.bg-slate-50\\/80 {
  background-color: rgb(248 250 252 / 0.8);
}
.bg-slate-50\\/85 {
  background-color: rgb(248 250 252 / 0.85);
}
.bg-slate-50\\/90 {
  background-color: rgb(248 250 252 / 0.9);
}
.bg-slate-50\\/95 {
  background-color: rgb(248 250 252 / 0.95);
}
.bg-slate-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(100 116 139 / var(--tw-bg-opacity));
}
.bg-slate-500\\/0 {
  background-color: rgb(100 116 139 / 0);
}
.bg-slate-500\\/10 {
  background-color: rgb(100 116 139 / 0.1);
}
.bg-slate-500\\/100 {
  background-color: rgb(100 116 139 / 1);
}
.bg-slate-500\\/15 {
  background-color: rgb(100 116 139 / 0.15);
}
.bg-slate-500\\/20 {
  background-color: rgb(100 116 139 / 0.2);
}
.bg-slate-500\\/25 {
  background-color: rgb(100 116 139 / 0.25);
}
.bg-slate-500\\/30 {
  background-color: rgb(100 116 139 / 0.3);
}
.bg-slate-500\\/35 {
  background-color: rgb(100 116 139 / 0.35);
}
.bg-slate-500\\/40 {
  background-color: rgb(100 116 139 / 0.4);
}
.bg-slate-500\\/45 {
  background-color: rgb(100 116 139 / 0.45);
}
.bg-slate-500\\/5 {
  background-color: rgb(100 116 139 / 0.05);
}
.bg-slate-500\\/50 {
  background-color: rgb(100 116 139 / 0.5);
}
.bg-slate-500\\/55 {
  background-color: rgb(100 116 139 / 0.55);
}
.bg-slate-500\\/60 {
  background-color: rgb(100 116 139 / 0.6);
}
.bg-slate-500\\/65 {
  background-color: rgb(100 116 139 / 0.65);
}
.bg-slate-500\\/70 {
  background-color: rgb(100 116 139 / 0.7);
}
.bg-slate-500\\/75 {
  background-color: rgb(100 116 139 / 0.75);
}
.bg-slate-500\\/80 {
  background-color: rgb(100 116 139 / 0.8);
}
.bg-slate-500\\/85 {
  background-color: rgb(100 116 139 / 0.85);
}
.bg-slate-500\\/90 {
  background-color: rgb(100 116 139 / 0.9);
}
.bg-slate-500\\/95 {
  background-color: rgb(100 116 139 / 0.95);
}
.bg-slate-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(71 85 105 / var(--tw-bg-opacity));
}
.bg-slate-600\\/0 {
  background-color: rgb(71 85 105 / 0);
}
.bg-slate-600\\/10 {
  background-color: rgb(71 85 105 / 0.1);
}
.bg-slate-600\\/100 {
  background-color: rgb(71 85 105 / 1);
}
.bg-slate-600\\/15 {
  background-color: rgb(71 85 105 / 0.15);
}
.bg-slate-600\\/20 {
  background-color: rgb(71 85 105 / 0.2);
}
.bg-slate-600\\/25 {
  background-color: rgb(71 85 105 / 0.25);
}
.bg-slate-600\\/30 {
  background-color: rgb(71 85 105 / 0.3);
}
.bg-slate-600\\/35 {
  background-color: rgb(71 85 105 / 0.35);
}
.bg-slate-600\\/40 {
  background-color: rgb(71 85 105 / 0.4);
}
.bg-slate-600\\/45 {
  background-color: rgb(71 85 105 / 0.45);
}
.bg-slate-600\\/5 {
  background-color: rgb(71 85 105 / 0.05);
}
.bg-slate-600\\/50 {
  background-color: rgb(71 85 105 / 0.5);
}
.bg-slate-600\\/55 {
  background-color: rgb(71 85 105 / 0.55);
}
.bg-slate-600\\/60 {
  background-color: rgb(71 85 105 / 0.6);
}
.bg-slate-600\\/65 {
  background-color: rgb(71 85 105 / 0.65);
}
.bg-slate-600\\/70 {
  background-color: rgb(71 85 105 / 0.7);
}
.bg-slate-600\\/75 {
  background-color: rgb(71 85 105 / 0.75);
}
.bg-slate-600\\/80 {
  background-color: rgb(71 85 105 / 0.8);
}
.bg-slate-600\\/85 {
  background-color: rgb(71 85 105 / 0.85);
}
.bg-slate-600\\/90 {
  background-color: rgb(71 85 105 / 0.9);
}
.bg-slate-600\\/95 {
  background-color: rgb(71 85 105 / 0.95);
}
.bg-slate-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(51 65 85 / var(--tw-bg-opacity));
}
.bg-slate-700\\/0 {
  background-color: rgb(51 65 85 / 0);
}
.bg-slate-700\\/10 {
  background-color: rgb(51 65 85 / 0.1);
}
.bg-slate-700\\/100 {
  background-color: rgb(51 65 85 / 1);
}
.bg-slate-700\\/15 {
  background-color: rgb(51 65 85 / 0.15);
}
.bg-slate-700\\/20 {
  background-color: rgb(51 65 85 / 0.2);
}
.bg-slate-700\\/25 {
  background-color: rgb(51 65 85 / 0.25);
}
.bg-slate-700\\/30 {
  background-color: rgb(51 65 85 / 0.3);
}
.bg-slate-700\\/35 {
  background-color: rgb(51 65 85 / 0.35);
}
.bg-slate-700\\/40 {
  background-color: rgb(51 65 85 / 0.4);
}
.bg-slate-700\\/45 {
  background-color: rgb(51 65 85 / 0.45);
}
.bg-slate-700\\/5 {
  background-color: rgb(51 65 85 / 0.05);
}
.bg-slate-700\\/50 {
  background-color: rgb(51 65 85 / 0.5);
}
.bg-slate-700\\/55 {
  background-color: rgb(51 65 85 / 0.55);
}
.bg-slate-700\\/60 {
  background-color: rgb(51 65 85 / 0.6);
}
.bg-slate-700\\/65 {
  background-color: rgb(51 65 85 / 0.65);
}
.bg-slate-700\\/70 {
  background-color: rgb(51 65 85 / 0.7);
}
.bg-slate-700\\/75 {
  background-color: rgb(51 65 85 / 0.75);
}
.bg-slate-700\\/80 {
  background-color: rgb(51 65 85 / 0.8);
}
.bg-slate-700\\/85 {
  background-color: rgb(51 65 85 / 0.85);
}
.bg-slate-700\\/90 {
  background-color: rgb(51 65 85 / 0.9);
}
.bg-slate-700\\/95 {
  background-color: rgb(51 65 85 / 0.95);
}
.bg-slate-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(30 41 59 / var(--tw-bg-opacity));
}
.bg-slate-800\\/0 {
  background-color: rgb(30 41 59 / 0);
}
.bg-slate-800\\/10 {
  background-color: rgb(30 41 59 / 0.1);
}
.bg-slate-800\\/100 {
  background-color: rgb(30 41 59 / 1);
}
.bg-slate-800\\/15 {
  background-color: rgb(30 41 59 / 0.15);
}
.bg-slate-800\\/20 {
  background-color: rgb(30 41 59 / 0.2);
}
.bg-slate-800\\/25 {
  background-color: rgb(30 41 59 / 0.25);
}
.bg-slate-800\\/30 {
  background-color: rgb(30 41 59 / 0.3);
}
.bg-slate-800\\/35 {
  background-color: rgb(30 41 59 / 0.35);
}
.bg-slate-800\\/40 {
  background-color: rgb(30 41 59 / 0.4);
}
.bg-slate-800\\/45 {
  background-color: rgb(30 41 59 / 0.45);
}
.bg-slate-800\\/5 {
  background-color: rgb(30 41 59 / 0.05);
}
.bg-slate-800\\/50 {
  background-color: rgb(30 41 59 / 0.5);
}
.bg-slate-800\\/55 {
  background-color: rgb(30 41 59 / 0.55);
}
.bg-slate-800\\/60 {
  background-color: rgb(30 41 59 / 0.6);
}
.bg-slate-800\\/65 {
  background-color: rgb(30 41 59 / 0.65);
}
.bg-slate-800\\/70 {
  background-color: rgb(30 41 59 / 0.7);
}
.bg-slate-800\\/75 {
  background-color: rgb(30 41 59 / 0.75);
}
.bg-slate-800\\/80 {
  background-color: rgb(30 41 59 / 0.8);
}
.bg-slate-800\\/85 {
  background-color: rgb(30 41 59 / 0.85);
}
.bg-slate-800\\/90 {
  background-color: rgb(30 41 59 / 0.9);
}
.bg-slate-800\\/95 {
  background-color: rgb(30 41 59 / 0.95);
}
.bg-slate-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(15 23 42 / var(--tw-bg-opacity));
}
.bg-slate-900\\/0 {
  background-color: rgb(15 23 42 / 0);
}
.bg-slate-900\\/10 {
  background-color: rgb(15 23 42 / 0.1);
}
.bg-slate-900\\/100 {
  background-color: rgb(15 23 42 / 1);
}
.bg-slate-900\\/15 {
  background-color: rgb(15 23 42 / 0.15);
}
.bg-slate-900\\/20 {
  background-color: rgb(15 23 42 / 0.2);
}
.bg-slate-900\\/25 {
  background-color: rgb(15 23 42 / 0.25);
}
.bg-slate-900\\/30 {
  background-color: rgb(15 23 42 / 0.3);
}
.bg-slate-900\\/35 {
  background-color: rgb(15 23 42 / 0.35);
}
.bg-slate-900\\/40 {
  background-color: rgb(15 23 42 / 0.4);
}
.bg-slate-900\\/45 {
  background-color: rgb(15 23 42 / 0.45);
}
.bg-slate-900\\/5 {
  background-color: rgb(15 23 42 / 0.05);
}
.bg-slate-900\\/50 {
  background-color: rgb(15 23 42 / 0.5);
}
.bg-slate-900\\/55 {
  background-color: rgb(15 23 42 / 0.55);
}
.bg-slate-900\\/60 {
  background-color: rgb(15 23 42 / 0.6);
}
.bg-slate-900\\/65 {
  background-color: rgb(15 23 42 / 0.65);
}
.bg-slate-900\\/70 {
  background-color: rgb(15 23 42 / 0.7);
}
.bg-slate-900\\/75 {
  background-color: rgb(15 23 42 / 0.75);
}
.bg-slate-900\\/80 {
  background-color: rgb(15 23 42 / 0.8);
}
.bg-slate-900\\/85 {
  background-color: rgb(15 23 42 / 0.85);
}
.bg-slate-900\\/90 {
  background-color: rgb(15 23 42 / 0.9);
}
.bg-slate-900\\/95 {
  background-color: rgb(15 23 42 / 0.95);
}
.bg-slate-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(2 6 23 / var(--tw-bg-opacity));
}
.bg-slate-950\\/0 {
  background-color: rgb(2 6 23 / 0);
}
.bg-slate-950\\/10 {
  background-color: rgb(2 6 23 / 0.1);
}
.bg-slate-950\\/100 {
  background-color: rgb(2 6 23 / 1);
}
.bg-slate-950\\/15 {
  background-color: rgb(2 6 23 / 0.15);
}
.bg-slate-950\\/20 {
  background-color: rgb(2 6 23 / 0.2);
}
.bg-slate-950\\/25 {
  background-color: rgb(2 6 23 / 0.25);
}
.bg-slate-950\\/30 {
  background-color: rgb(2 6 23 / 0.3);
}
.bg-slate-950\\/35 {
  background-color: rgb(2 6 23 / 0.35);
}
.bg-slate-950\\/40 {
  background-color: rgb(2 6 23 / 0.4);
}
.bg-slate-950\\/45 {
  background-color: rgb(2 6 23 / 0.45);
}
.bg-slate-950\\/5 {
  background-color: rgb(2 6 23 / 0.05);
}
.bg-slate-950\\/50 {
  background-color: rgb(2 6 23 / 0.5);
}
.bg-slate-950\\/55 {
  background-color: rgb(2 6 23 / 0.55);
}
.bg-slate-950\\/60 {
  background-color: rgb(2 6 23 / 0.6);
}
.bg-slate-950\\/65 {
  background-color: rgb(2 6 23 / 0.65);
}
.bg-slate-950\\/70 {
  background-color: rgb(2 6 23 / 0.7);
}
.bg-slate-950\\/75 {
  background-color: rgb(2 6 23 / 0.75);
}
.bg-slate-950\\/80 {
  background-color: rgb(2 6 23 / 0.8);
}
.bg-slate-950\\/85 {
  background-color: rgb(2 6 23 / 0.85);
}
.bg-slate-950\\/90 {
  background-color: rgb(2 6 23 / 0.9);
}
.bg-slate-950\\/95 {
  background-color: rgb(2 6 23 / 0.95);
}
.bg-stone-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(245 245 244 / var(--tw-bg-opacity));
}
.bg-stone-100\\/0 {
  background-color: rgb(245 245 244 / 0);
}
.bg-stone-100\\/10 {
  background-color: rgb(245 245 244 / 0.1);
}
.bg-stone-100\\/100 {
  background-color: rgb(245 245 244 / 1);
}
.bg-stone-100\\/15 {
  background-color: rgb(245 245 244 / 0.15);
}
.bg-stone-100\\/20 {
  background-color: rgb(245 245 244 / 0.2);
}
.bg-stone-100\\/25 {
  background-color: rgb(245 245 244 / 0.25);
}
.bg-stone-100\\/30 {
  background-color: rgb(245 245 244 / 0.3);
}
.bg-stone-100\\/35 {
  background-color: rgb(245 245 244 / 0.35);
}
.bg-stone-100\\/40 {
  background-color: rgb(245 245 244 / 0.4);
}
.bg-stone-100\\/45 {
  background-color: rgb(245 245 244 / 0.45);
}
.bg-stone-100\\/5 {
  background-color: rgb(245 245 244 / 0.05);
}
.bg-stone-100\\/50 {
  background-color: rgb(245 245 244 / 0.5);
}
.bg-stone-100\\/55 {
  background-color: rgb(245 245 244 / 0.55);
}
.bg-stone-100\\/60 {
  background-color: rgb(245 245 244 / 0.6);
}
.bg-stone-100\\/65 {
  background-color: rgb(245 245 244 / 0.65);
}
.bg-stone-100\\/70 {
  background-color: rgb(245 245 244 / 0.7);
}
.bg-stone-100\\/75 {
  background-color: rgb(245 245 244 / 0.75);
}
.bg-stone-100\\/80 {
  background-color: rgb(245 245 244 / 0.8);
}
.bg-stone-100\\/85 {
  background-color: rgb(245 245 244 / 0.85);
}
.bg-stone-100\\/90 {
  background-color: rgb(245 245 244 / 0.9);
}
.bg-stone-100\\/95 {
  background-color: rgb(245 245 244 / 0.95);
}
.bg-stone-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(231 229 228 / var(--tw-bg-opacity));
}
.bg-stone-200\\/0 {
  background-color: rgb(231 229 228 / 0);
}
.bg-stone-200\\/10 {
  background-color: rgb(231 229 228 / 0.1);
}
.bg-stone-200\\/100 {
  background-color: rgb(231 229 228 / 1);
}
.bg-stone-200\\/15 {
  background-color: rgb(231 229 228 / 0.15);
}
.bg-stone-200\\/20 {
  background-color: rgb(231 229 228 / 0.2);
}
.bg-stone-200\\/25 {
  background-color: rgb(231 229 228 / 0.25);
}
.bg-stone-200\\/30 {
  background-color: rgb(231 229 228 / 0.3);
}
.bg-stone-200\\/35 {
  background-color: rgb(231 229 228 / 0.35);
}
.bg-stone-200\\/40 {
  background-color: rgb(231 229 228 / 0.4);
}
.bg-stone-200\\/45 {
  background-color: rgb(231 229 228 / 0.45);
}
.bg-stone-200\\/5 {
  background-color: rgb(231 229 228 / 0.05);
}
.bg-stone-200\\/50 {
  background-color: rgb(231 229 228 / 0.5);
}
.bg-stone-200\\/55 {
  background-color: rgb(231 229 228 / 0.55);
}
.bg-stone-200\\/60 {
  background-color: rgb(231 229 228 / 0.6);
}
.bg-stone-200\\/65 {
  background-color: rgb(231 229 228 / 0.65);
}
.bg-stone-200\\/70 {
  background-color: rgb(231 229 228 / 0.7);
}
.bg-stone-200\\/75 {
  background-color: rgb(231 229 228 / 0.75);
}
.bg-stone-200\\/80 {
  background-color: rgb(231 229 228 / 0.8);
}
.bg-stone-200\\/85 {
  background-color: rgb(231 229 228 / 0.85);
}
.bg-stone-200\\/90 {
  background-color: rgb(231 229 228 / 0.9);
}
.bg-stone-200\\/95 {
  background-color: rgb(231 229 228 / 0.95);
}
.bg-stone-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(214 211 209 / var(--tw-bg-opacity));
}
.bg-stone-300\\/0 {
  background-color: rgb(214 211 209 / 0);
}
.bg-stone-300\\/10 {
  background-color: rgb(214 211 209 / 0.1);
}
.bg-stone-300\\/100 {
  background-color: rgb(214 211 209 / 1);
}
.bg-stone-300\\/15 {
  background-color: rgb(214 211 209 / 0.15);
}
.bg-stone-300\\/20 {
  background-color: rgb(214 211 209 / 0.2);
}
.bg-stone-300\\/25 {
  background-color: rgb(214 211 209 / 0.25);
}
.bg-stone-300\\/30 {
  background-color: rgb(214 211 209 / 0.3);
}
.bg-stone-300\\/35 {
  background-color: rgb(214 211 209 / 0.35);
}
.bg-stone-300\\/40 {
  background-color: rgb(214 211 209 / 0.4);
}
.bg-stone-300\\/45 {
  background-color: rgb(214 211 209 / 0.45);
}
.bg-stone-300\\/5 {
  background-color: rgb(214 211 209 / 0.05);
}
.bg-stone-300\\/50 {
  background-color: rgb(214 211 209 / 0.5);
}
.bg-stone-300\\/55 {
  background-color: rgb(214 211 209 / 0.55);
}
.bg-stone-300\\/60 {
  background-color: rgb(214 211 209 / 0.6);
}
.bg-stone-300\\/65 {
  background-color: rgb(214 211 209 / 0.65);
}
.bg-stone-300\\/70 {
  background-color: rgb(214 211 209 / 0.7);
}
.bg-stone-300\\/75 {
  background-color: rgb(214 211 209 / 0.75);
}
.bg-stone-300\\/80 {
  background-color: rgb(214 211 209 / 0.8);
}
.bg-stone-300\\/85 {
  background-color: rgb(214 211 209 / 0.85);
}
.bg-stone-300\\/90 {
  background-color: rgb(214 211 209 / 0.9);
}
.bg-stone-300\\/95 {
  background-color: rgb(214 211 209 / 0.95);
}
.bg-stone-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(168 162 158 / var(--tw-bg-opacity));
}
.bg-stone-400\\/0 {
  background-color: rgb(168 162 158 / 0);
}
.bg-stone-400\\/10 {
  background-color: rgb(168 162 158 / 0.1);
}
.bg-stone-400\\/100 {
  background-color: rgb(168 162 158 / 1);
}
.bg-stone-400\\/15 {
  background-color: rgb(168 162 158 / 0.15);
}
.bg-stone-400\\/20 {
  background-color: rgb(168 162 158 / 0.2);
}
.bg-stone-400\\/25 {
  background-color: rgb(168 162 158 / 0.25);
}
.bg-stone-400\\/30 {
  background-color: rgb(168 162 158 / 0.3);
}
.bg-stone-400\\/35 {
  background-color: rgb(168 162 158 / 0.35);
}
.bg-stone-400\\/40 {
  background-color: rgb(168 162 158 / 0.4);
}
.bg-stone-400\\/45 {
  background-color: rgb(168 162 158 / 0.45);
}
.bg-stone-400\\/5 {
  background-color: rgb(168 162 158 / 0.05);
}
.bg-stone-400\\/50 {
  background-color: rgb(168 162 158 / 0.5);
}
.bg-stone-400\\/55 {
  background-color: rgb(168 162 158 / 0.55);
}
.bg-stone-400\\/60 {
  background-color: rgb(168 162 158 / 0.6);
}
.bg-stone-400\\/65 {
  background-color: rgb(168 162 158 / 0.65);
}
.bg-stone-400\\/70 {
  background-color: rgb(168 162 158 / 0.7);
}
.bg-stone-400\\/75 {
  background-color: rgb(168 162 158 / 0.75);
}
.bg-stone-400\\/80 {
  background-color: rgb(168 162 158 / 0.8);
}
.bg-stone-400\\/85 {
  background-color: rgb(168 162 158 / 0.85);
}
.bg-stone-400\\/90 {
  background-color: rgb(168 162 158 / 0.9);
}
.bg-stone-400\\/95 {
  background-color: rgb(168 162 158 / 0.95);
}
.bg-stone-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 250 249 / var(--tw-bg-opacity));
}
.bg-stone-50\\/0 {
  background-color: rgb(250 250 249 / 0);
}
.bg-stone-50\\/10 {
  background-color: rgb(250 250 249 / 0.1);
}
.bg-stone-50\\/100 {
  background-color: rgb(250 250 249 / 1);
}
.bg-stone-50\\/15 {
  background-color: rgb(250 250 249 / 0.15);
}
.bg-stone-50\\/20 {
  background-color: rgb(250 250 249 / 0.2);
}
.bg-stone-50\\/25 {
  background-color: rgb(250 250 249 / 0.25);
}
.bg-stone-50\\/30 {
  background-color: rgb(250 250 249 / 0.3);
}
.bg-stone-50\\/35 {
  background-color: rgb(250 250 249 / 0.35);
}
.bg-stone-50\\/40 {
  background-color: rgb(250 250 249 / 0.4);
}
.bg-stone-50\\/45 {
  background-color: rgb(250 250 249 / 0.45);
}
.bg-stone-50\\/5 {
  background-color: rgb(250 250 249 / 0.05);
}
.bg-stone-50\\/50 {
  background-color: rgb(250 250 249 / 0.5);
}
.bg-stone-50\\/55 {
  background-color: rgb(250 250 249 / 0.55);
}
.bg-stone-50\\/60 {
  background-color: rgb(250 250 249 / 0.6);
}
.bg-stone-50\\/65 {
  background-color: rgb(250 250 249 / 0.65);
}
.bg-stone-50\\/70 {
  background-color: rgb(250 250 249 / 0.7);
}
.bg-stone-50\\/75 {
  background-color: rgb(250 250 249 / 0.75);
}
.bg-stone-50\\/80 {
  background-color: rgb(250 250 249 / 0.8);
}
.bg-stone-50\\/85 {
  background-color: rgb(250 250 249 / 0.85);
}
.bg-stone-50\\/90 {
  background-color: rgb(250 250 249 / 0.9);
}
.bg-stone-50\\/95 {
  background-color: rgb(250 250 249 / 0.95);
}
.bg-stone-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(120 113 108 / var(--tw-bg-opacity));
}
.bg-stone-500\\/0 {
  background-color: rgb(120 113 108 / 0);
}
.bg-stone-500\\/10 {
  background-color: rgb(120 113 108 / 0.1);
}
.bg-stone-500\\/100 {
  background-color: rgb(120 113 108 / 1);
}
.bg-stone-500\\/15 {
  background-color: rgb(120 113 108 / 0.15);
}
.bg-stone-500\\/20 {
  background-color: rgb(120 113 108 / 0.2);
}
.bg-stone-500\\/25 {
  background-color: rgb(120 113 108 / 0.25);
}
.bg-stone-500\\/30 {
  background-color: rgb(120 113 108 / 0.3);
}
.bg-stone-500\\/35 {
  background-color: rgb(120 113 108 / 0.35);
}
.bg-stone-500\\/40 {
  background-color: rgb(120 113 108 / 0.4);
}
.bg-stone-500\\/45 {
  background-color: rgb(120 113 108 / 0.45);
}
.bg-stone-500\\/5 {
  background-color: rgb(120 113 108 / 0.05);
}
.bg-stone-500\\/50 {
  background-color: rgb(120 113 108 / 0.5);
}
.bg-stone-500\\/55 {
  background-color: rgb(120 113 108 / 0.55);
}
.bg-stone-500\\/60 {
  background-color: rgb(120 113 108 / 0.6);
}
.bg-stone-500\\/65 {
  background-color: rgb(120 113 108 / 0.65);
}
.bg-stone-500\\/70 {
  background-color: rgb(120 113 108 / 0.7);
}
.bg-stone-500\\/75 {
  background-color: rgb(120 113 108 / 0.75);
}
.bg-stone-500\\/80 {
  background-color: rgb(120 113 108 / 0.8);
}
.bg-stone-500\\/85 {
  background-color: rgb(120 113 108 / 0.85);
}
.bg-stone-500\\/90 {
  background-color: rgb(120 113 108 / 0.9);
}
.bg-stone-500\\/95 {
  background-color: rgb(120 113 108 / 0.95);
}
.bg-stone-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(87 83 78 / var(--tw-bg-opacity));
}
.bg-stone-600\\/0 {
  background-color: rgb(87 83 78 / 0);
}
.bg-stone-600\\/10 {
  background-color: rgb(87 83 78 / 0.1);
}
.bg-stone-600\\/100 {
  background-color: rgb(87 83 78 / 1);
}
.bg-stone-600\\/15 {
  background-color: rgb(87 83 78 / 0.15);
}
.bg-stone-600\\/20 {
  background-color: rgb(87 83 78 / 0.2);
}
.bg-stone-600\\/25 {
  background-color: rgb(87 83 78 / 0.25);
}
.bg-stone-600\\/30 {
  background-color: rgb(87 83 78 / 0.3);
}
.bg-stone-600\\/35 {
  background-color: rgb(87 83 78 / 0.35);
}
.bg-stone-600\\/40 {
  background-color: rgb(87 83 78 / 0.4);
}
.bg-stone-600\\/45 {
  background-color: rgb(87 83 78 / 0.45);
}
.bg-stone-600\\/5 {
  background-color: rgb(87 83 78 / 0.05);
}
.bg-stone-600\\/50 {
  background-color: rgb(87 83 78 / 0.5);
}
.bg-stone-600\\/55 {
  background-color: rgb(87 83 78 / 0.55);
}
.bg-stone-600\\/60 {
  background-color: rgb(87 83 78 / 0.6);
}
.bg-stone-600\\/65 {
  background-color: rgb(87 83 78 / 0.65);
}
.bg-stone-600\\/70 {
  background-color: rgb(87 83 78 / 0.7);
}
.bg-stone-600\\/75 {
  background-color: rgb(87 83 78 / 0.75);
}
.bg-stone-600\\/80 {
  background-color: rgb(87 83 78 / 0.8);
}
.bg-stone-600\\/85 {
  background-color: rgb(87 83 78 / 0.85);
}
.bg-stone-600\\/90 {
  background-color: rgb(87 83 78 / 0.9);
}
.bg-stone-600\\/95 {
  background-color: rgb(87 83 78 / 0.95);
}
.bg-stone-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(68 64 60 / var(--tw-bg-opacity));
}
.bg-stone-700\\/0 {
  background-color: rgb(68 64 60 / 0);
}
.bg-stone-700\\/10 {
  background-color: rgb(68 64 60 / 0.1);
}
.bg-stone-700\\/100 {
  background-color: rgb(68 64 60 / 1);
}
.bg-stone-700\\/15 {
  background-color: rgb(68 64 60 / 0.15);
}
.bg-stone-700\\/20 {
  background-color: rgb(68 64 60 / 0.2);
}
.bg-stone-700\\/25 {
  background-color: rgb(68 64 60 / 0.25);
}
.bg-stone-700\\/30 {
  background-color: rgb(68 64 60 / 0.3);
}
.bg-stone-700\\/35 {
  background-color: rgb(68 64 60 / 0.35);
}
.bg-stone-700\\/40 {
  background-color: rgb(68 64 60 / 0.4);
}
.bg-stone-700\\/45 {
  background-color: rgb(68 64 60 / 0.45);
}
.bg-stone-700\\/5 {
  background-color: rgb(68 64 60 / 0.05);
}
.bg-stone-700\\/50 {
  background-color: rgb(68 64 60 / 0.5);
}
.bg-stone-700\\/55 {
  background-color: rgb(68 64 60 / 0.55);
}
.bg-stone-700\\/60 {
  background-color: rgb(68 64 60 / 0.6);
}
.bg-stone-700\\/65 {
  background-color: rgb(68 64 60 / 0.65);
}
.bg-stone-700\\/70 {
  background-color: rgb(68 64 60 / 0.7);
}
.bg-stone-700\\/75 {
  background-color: rgb(68 64 60 / 0.75);
}
.bg-stone-700\\/80 {
  background-color: rgb(68 64 60 / 0.8);
}
.bg-stone-700\\/85 {
  background-color: rgb(68 64 60 / 0.85);
}
.bg-stone-700\\/90 {
  background-color: rgb(68 64 60 / 0.9);
}
.bg-stone-700\\/95 {
  background-color: rgb(68 64 60 / 0.95);
}
.bg-stone-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(41 37 36 / var(--tw-bg-opacity));
}
.bg-stone-800\\/0 {
  background-color: rgb(41 37 36 / 0);
}
.bg-stone-800\\/10 {
  background-color: rgb(41 37 36 / 0.1);
}
.bg-stone-800\\/100 {
  background-color: rgb(41 37 36 / 1);
}
.bg-stone-800\\/15 {
  background-color: rgb(41 37 36 / 0.15);
}
.bg-stone-800\\/20 {
  background-color: rgb(41 37 36 / 0.2);
}
.bg-stone-800\\/25 {
  background-color: rgb(41 37 36 / 0.25);
}
.bg-stone-800\\/30 {
  background-color: rgb(41 37 36 / 0.3);
}
.bg-stone-800\\/35 {
  background-color: rgb(41 37 36 / 0.35);
}
.bg-stone-800\\/40 {
  background-color: rgb(41 37 36 / 0.4);
}
.bg-stone-800\\/45 {
  background-color: rgb(41 37 36 / 0.45);
}
.bg-stone-800\\/5 {
  background-color: rgb(41 37 36 / 0.05);
}
.bg-stone-800\\/50 {
  background-color: rgb(41 37 36 / 0.5);
}
.bg-stone-800\\/55 {
  background-color: rgb(41 37 36 / 0.55);
}
.bg-stone-800\\/60 {
  background-color: rgb(41 37 36 / 0.6);
}
.bg-stone-800\\/65 {
  background-color: rgb(41 37 36 / 0.65);
}
.bg-stone-800\\/70 {
  background-color: rgb(41 37 36 / 0.7);
}
.bg-stone-800\\/75 {
  background-color: rgb(41 37 36 / 0.75);
}
.bg-stone-800\\/80 {
  background-color: rgb(41 37 36 / 0.8);
}
.bg-stone-800\\/85 {
  background-color: rgb(41 37 36 / 0.85);
}
.bg-stone-800\\/90 {
  background-color: rgb(41 37 36 / 0.9);
}
.bg-stone-800\\/95 {
  background-color: rgb(41 37 36 / 0.95);
}
.bg-stone-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(28 25 23 / var(--tw-bg-opacity));
}
.bg-stone-900\\/0 {
  background-color: rgb(28 25 23 / 0);
}
.bg-stone-900\\/10 {
  background-color: rgb(28 25 23 / 0.1);
}
.bg-stone-900\\/100 {
  background-color: rgb(28 25 23 / 1);
}
.bg-stone-900\\/15 {
  background-color: rgb(28 25 23 / 0.15);
}
.bg-stone-900\\/20 {
  background-color: rgb(28 25 23 / 0.2);
}
.bg-stone-900\\/25 {
  background-color: rgb(28 25 23 / 0.25);
}
.bg-stone-900\\/30 {
  background-color: rgb(28 25 23 / 0.3);
}
.bg-stone-900\\/35 {
  background-color: rgb(28 25 23 / 0.35);
}
.bg-stone-900\\/40 {
  background-color: rgb(28 25 23 / 0.4);
}
.bg-stone-900\\/45 {
  background-color: rgb(28 25 23 / 0.45);
}
.bg-stone-900\\/5 {
  background-color: rgb(28 25 23 / 0.05);
}
.bg-stone-900\\/50 {
  background-color: rgb(28 25 23 / 0.5);
}
.bg-stone-900\\/55 {
  background-color: rgb(28 25 23 / 0.55);
}
.bg-stone-900\\/60 {
  background-color: rgb(28 25 23 / 0.6);
}
.bg-stone-900\\/65 {
  background-color: rgb(28 25 23 / 0.65);
}
.bg-stone-900\\/70 {
  background-color: rgb(28 25 23 / 0.7);
}
.bg-stone-900\\/75 {
  background-color: rgb(28 25 23 / 0.75);
}
.bg-stone-900\\/80 {
  background-color: rgb(28 25 23 / 0.8);
}
.bg-stone-900\\/85 {
  background-color: rgb(28 25 23 / 0.85);
}
.bg-stone-900\\/90 {
  background-color: rgb(28 25 23 / 0.9);
}
.bg-stone-900\\/95 {
  background-color: rgb(28 25 23 / 0.95);
}
.bg-stone-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(12 10 9 / var(--tw-bg-opacity));
}
.bg-stone-950\\/0 {
  background-color: rgb(12 10 9 / 0);
}
.bg-stone-950\\/10 {
  background-color: rgb(12 10 9 / 0.1);
}
.bg-stone-950\\/100 {
  background-color: rgb(12 10 9 / 1);
}
.bg-stone-950\\/15 {
  background-color: rgb(12 10 9 / 0.15);
}
.bg-stone-950\\/20 {
  background-color: rgb(12 10 9 / 0.2);
}
.bg-stone-950\\/25 {
  background-color: rgb(12 10 9 / 0.25);
}
.bg-stone-950\\/30 {
  background-color: rgb(12 10 9 / 0.3);
}
.bg-stone-950\\/35 {
  background-color: rgb(12 10 9 / 0.35);
}
.bg-stone-950\\/40 {
  background-color: rgb(12 10 9 / 0.4);
}
.bg-stone-950\\/45 {
  background-color: rgb(12 10 9 / 0.45);
}
.bg-stone-950\\/5 {
  background-color: rgb(12 10 9 / 0.05);
}
.bg-stone-950\\/50 {
  background-color: rgb(12 10 9 / 0.5);
}
.bg-stone-950\\/55 {
  background-color: rgb(12 10 9 / 0.55);
}
.bg-stone-950\\/60 {
  background-color: rgb(12 10 9 / 0.6);
}
.bg-stone-950\\/65 {
  background-color: rgb(12 10 9 / 0.65);
}
.bg-stone-950\\/70 {
  background-color: rgb(12 10 9 / 0.7);
}
.bg-stone-950\\/75 {
  background-color: rgb(12 10 9 / 0.75);
}
.bg-stone-950\\/80 {
  background-color: rgb(12 10 9 / 0.8);
}
.bg-stone-950\\/85 {
  background-color: rgb(12 10 9 / 0.85);
}
.bg-stone-950\\/90 {
  background-color: rgb(12 10 9 / 0.9);
}
.bg-stone-950\\/95 {
  background-color: rgb(12 10 9 / 0.95);
}
.bg-teal-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(204 251 241 / var(--tw-bg-opacity));
}
.bg-teal-100\\/0 {
  background-color: rgb(204 251 241 / 0);
}
.bg-teal-100\\/10 {
  background-color: rgb(204 251 241 / 0.1);
}
.bg-teal-100\\/100 {
  background-color: rgb(204 251 241 / 1);
}
.bg-teal-100\\/15 {
  background-color: rgb(204 251 241 / 0.15);
}
.bg-teal-100\\/20 {
  background-color: rgb(204 251 241 / 0.2);
}
.bg-teal-100\\/25 {
  background-color: rgb(204 251 241 / 0.25);
}
.bg-teal-100\\/30 {
  background-color: rgb(204 251 241 / 0.3);
}
.bg-teal-100\\/35 {
  background-color: rgb(204 251 241 / 0.35);
}
.bg-teal-100\\/40 {
  background-color: rgb(204 251 241 / 0.4);
}
.bg-teal-100\\/45 {
  background-color: rgb(204 251 241 / 0.45);
}
.bg-teal-100\\/5 {
  background-color: rgb(204 251 241 / 0.05);
}
.bg-teal-100\\/50 {
  background-color: rgb(204 251 241 / 0.5);
}
.bg-teal-100\\/55 {
  background-color: rgb(204 251 241 / 0.55);
}
.bg-teal-100\\/60 {
  background-color: rgb(204 251 241 / 0.6);
}
.bg-teal-100\\/65 {
  background-color: rgb(204 251 241 / 0.65);
}
.bg-teal-100\\/70 {
  background-color: rgb(204 251 241 / 0.7);
}
.bg-teal-100\\/75 {
  background-color: rgb(204 251 241 / 0.75);
}
.bg-teal-100\\/80 {
  background-color: rgb(204 251 241 / 0.8);
}
.bg-teal-100\\/85 {
  background-color: rgb(204 251 241 / 0.85);
}
.bg-teal-100\\/90 {
  background-color: rgb(204 251 241 / 0.9);
}
.bg-teal-100\\/95 {
  background-color: rgb(204 251 241 / 0.95);
}
.bg-teal-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(153 246 228 / var(--tw-bg-opacity));
}
.bg-teal-200\\/0 {
  background-color: rgb(153 246 228 / 0);
}
.bg-teal-200\\/10 {
  background-color: rgb(153 246 228 / 0.1);
}
.bg-teal-200\\/100 {
  background-color: rgb(153 246 228 / 1);
}
.bg-teal-200\\/15 {
  background-color: rgb(153 246 228 / 0.15);
}
.bg-teal-200\\/20 {
  background-color: rgb(153 246 228 / 0.2);
}
.bg-teal-200\\/25 {
  background-color: rgb(153 246 228 / 0.25);
}
.bg-teal-200\\/30 {
  background-color: rgb(153 246 228 / 0.3);
}
.bg-teal-200\\/35 {
  background-color: rgb(153 246 228 / 0.35);
}
.bg-teal-200\\/40 {
  background-color: rgb(153 246 228 / 0.4);
}
.bg-teal-200\\/45 {
  background-color: rgb(153 246 228 / 0.45);
}
.bg-teal-200\\/5 {
  background-color: rgb(153 246 228 / 0.05);
}
.bg-teal-200\\/50 {
  background-color: rgb(153 246 228 / 0.5);
}
.bg-teal-200\\/55 {
  background-color: rgb(153 246 228 / 0.55);
}
.bg-teal-200\\/60 {
  background-color: rgb(153 246 228 / 0.6);
}
.bg-teal-200\\/65 {
  background-color: rgb(153 246 228 / 0.65);
}
.bg-teal-200\\/70 {
  background-color: rgb(153 246 228 / 0.7);
}
.bg-teal-200\\/75 {
  background-color: rgb(153 246 228 / 0.75);
}
.bg-teal-200\\/80 {
  background-color: rgb(153 246 228 / 0.8);
}
.bg-teal-200\\/85 {
  background-color: rgb(153 246 228 / 0.85);
}
.bg-teal-200\\/90 {
  background-color: rgb(153 246 228 / 0.9);
}
.bg-teal-200\\/95 {
  background-color: rgb(153 246 228 / 0.95);
}
.bg-teal-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(94 234 212 / var(--tw-bg-opacity));
}
.bg-teal-300\\/0 {
  background-color: rgb(94 234 212 / 0);
}
.bg-teal-300\\/10 {
  background-color: rgb(94 234 212 / 0.1);
}
.bg-teal-300\\/100 {
  background-color: rgb(94 234 212 / 1);
}
.bg-teal-300\\/15 {
  background-color: rgb(94 234 212 / 0.15);
}
.bg-teal-300\\/20 {
  background-color: rgb(94 234 212 / 0.2);
}
.bg-teal-300\\/25 {
  background-color: rgb(94 234 212 / 0.25);
}
.bg-teal-300\\/30 {
  background-color: rgb(94 234 212 / 0.3);
}
.bg-teal-300\\/35 {
  background-color: rgb(94 234 212 / 0.35);
}
.bg-teal-300\\/40 {
  background-color: rgb(94 234 212 / 0.4);
}
.bg-teal-300\\/45 {
  background-color: rgb(94 234 212 / 0.45);
}
.bg-teal-300\\/5 {
  background-color: rgb(94 234 212 / 0.05);
}
.bg-teal-300\\/50 {
  background-color: rgb(94 234 212 / 0.5);
}
.bg-teal-300\\/55 {
  background-color: rgb(94 234 212 / 0.55);
}
.bg-teal-300\\/60 {
  background-color: rgb(94 234 212 / 0.6);
}
.bg-teal-300\\/65 {
  background-color: rgb(94 234 212 / 0.65);
}
.bg-teal-300\\/70 {
  background-color: rgb(94 234 212 / 0.7);
}
.bg-teal-300\\/75 {
  background-color: rgb(94 234 212 / 0.75);
}
.bg-teal-300\\/80 {
  background-color: rgb(94 234 212 / 0.8);
}
.bg-teal-300\\/85 {
  background-color: rgb(94 234 212 / 0.85);
}
.bg-teal-300\\/90 {
  background-color: rgb(94 234 212 / 0.9);
}
.bg-teal-300\\/95 {
  background-color: rgb(94 234 212 / 0.95);
}
.bg-teal-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(45 212 191 / var(--tw-bg-opacity));
}
.bg-teal-400\\/0 {
  background-color: rgb(45 212 191 / 0);
}
.bg-teal-400\\/10 {
  background-color: rgb(45 212 191 / 0.1);
}
.bg-teal-400\\/100 {
  background-color: rgb(45 212 191 / 1);
}
.bg-teal-400\\/15 {
  background-color: rgb(45 212 191 / 0.15);
}
.bg-teal-400\\/20 {
  background-color: rgb(45 212 191 / 0.2);
}
.bg-teal-400\\/25 {
  background-color: rgb(45 212 191 / 0.25);
}
.bg-teal-400\\/30 {
  background-color: rgb(45 212 191 / 0.3);
}
.bg-teal-400\\/35 {
  background-color: rgb(45 212 191 / 0.35);
}
.bg-teal-400\\/40 {
  background-color: rgb(45 212 191 / 0.4);
}
.bg-teal-400\\/45 {
  background-color: rgb(45 212 191 / 0.45);
}
.bg-teal-400\\/5 {
  background-color: rgb(45 212 191 / 0.05);
}
.bg-teal-400\\/50 {
  background-color: rgb(45 212 191 / 0.5);
}
.bg-teal-400\\/55 {
  background-color: rgb(45 212 191 / 0.55);
}
.bg-teal-400\\/60 {
  background-color: rgb(45 212 191 / 0.6);
}
.bg-teal-400\\/65 {
  background-color: rgb(45 212 191 / 0.65);
}
.bg-teal-400\\/70 {
  background-color: rgb(45 212 191 / 0.7);
}
.bg-teal-400\\/75 {
  background-color: rgb(45 212 191 / 0.75);
}
.bg-teal-400\\/80 {
  background-color: rgb(45 212 191 / 0.8);
}
.bg-teal-400\\/85 {
  background-color: rgb(45 212 191 / 0.85);
}
.bg-teal-400\\/90 {
  background-color: rgb(45 212 191 / 0.9);
}
.bg-teal-400\\/95 {
  background-color: rgb(45 212 191 / 0.95);
}
.bg-teal-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(240 253 250 / var(--tw-bg-opacity));
}
.bg-teal-50\\/0 {
  background-color: rgb(240 253 250 / 0);
}
.bg-teal-50\\/10 {
  background-color: rgb(240 253 250 / 0.1);
}
.bg-teal-50\\/100 {
  background-color: rgb(240 253 250 / 1);
}
.bg-teal-50\\/15 {
  background-color: rgb(240 253 250 / 0.15);
}
.bg-teal-50\\/20 {
  background-color: rgb(240 253 250 / 0.2);
}
.bg-teal-50\\/25 {
  background-color: rgb(240 253 250 / 0.25);
}
.bg-teal-50\\/30 {
  background-color: rgb(240 253 250 / 0.3);
}
.bg-teal-50\\/35 {
  background-color: rgb(240 253 250 / 0.35);
}
.bg-teal-50\\/40 {
  background-color: rgb(240 253 250 / 0.4);
}
.bg-teal-50\\/45 {
  background-color: rgb(240 253 250 / 0.45);
}
.bg-teal-50\\/5 {
  background-color: rgb(240 253 250 / 0.05);
}
.bg-teal-50\\/50 {
  background-color: rgb(240 253 250 / 0.5);
}
.bg-teal-50\\/55 {
  background-color: rgb(240 253 250 / 0.55);
}
.bg-teal-50\\/60 {
  background-color: rgb(240 253 250 / 0.6);
}
.bg-teal-50\\/65 {
  background-color: rgb(240 253 250 / 0.65);
}
.bg-teal-50\\/70 {
  background-color: rgb(240 253 250 / 0.7);
}
.bg-teal-50\\/75 {
  background-color: rgb(240 253 250 / 0.75);
}
.bg-teal-50\\/80 {
  background-color: rgb(240 253 250 / 0.8);
}
.bg-teal-50\\/85 {
  background-color: rgb(240 253 250 / 0.85);
}
.bg-teal-50\\/90 {
  background-color: rgb(240 253 250 / 0.9);
}
.bg-teal-50\\/95 {
  background-color: rgb(240 253 250 / 0.95);
}
.bg-teal-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(20 184 166 / var(--tw-bg-opacity));
}
.bg-teal-500\\/0 {
  background-color: rgb(20 184 166 / 0);
}
.bg-teal-500\\/10 {
  background-color: rgb(20 184 166 / 0.1);
}
.bg-teal-500\\/100 {
  background-color: rgb(20 184 166 / 1);
}
.bg-teal-500\\/15 {
  background-color: rgb(20 184 166 / 0.15);
}
.bg-teal-500\\/20 {
  background-color: rgb(20 184 166 / 0.2);
}
.bg-teal-500\\/25 {
  background-color: rgb(20 184 166 / 0.25);
}
.bg-teal-500\\/30 {
  background-color: rgb(20 184 166 / 0.3);
}
.bg-teal-500\\/35 {
  background-color: rgb(20 184 166 / 0.35);
}
.bg-teal-500\\/40 {
  background-color: rgb(20 184 166 / 0.4);
}
.bg-teal-500\\/45 {
  background-color: rgb(20 184 166 / 0.45);
}
.bg-teal-500\\/5 {
  background-color: rgb(20 184 166 / 0.05);
}
.bg-teal-500\\/50 {
  background-color: rgb(20 184 166 / 0.5);
}
.bg-teal-500\\/55 {
  background-color: rgb(20 184 166 / 0.55);
}
.bg-teal-500\\/60 {
  background-color: rgb(20 184 166 / 0.6);
}
.bg-teal-500\\/65 {
  background-color: rgb(20 184 166 / 0.65);
}
.bg-teal-500\\/70 {
  background-color: rgb(20 184 166 / 0.7);
}
.bg-teal-500\\/75 {
  background-color: rgb(20 184 166 / 0.75);
}
.bg-teal-500\\/80 {
  background-color: rgb(20 184 166 / 0.8);
}
.bg-teal-500\\/85 {
  background-color: rgb(20 184 166 / 0.85);
}
.bg-teal-500\\/90 {
  background-color: rgb(20 184 166 / 0.9);
}
.bg-teal-500\\/95 {
  background-color: rgb(20 184 166 / 0.95);
}
.bg-teal-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(13 148 136 / var(--tw-bg-opacity));
}
.bg-teal-600\\/0 {
  background-color: rgb(13 148 136 / 0);
}
.bg-teal-600\\/10 {
  background-color: rgb(13 148 136 / 0.1);
}
.bg-teal-600\\/100 {
  background-color: rgb(13 148 136 / 1);
}
.bg-teal-600\\/15 {
  background-color: rgb(13 148 136 / 0.15);
}
.bg-teal-600\\/20 {
  background-color: rgb(13 148 136 / 0.2);
}
.bg-teal-600\\/25 {
  background-color: rgb(13 148 136 / 0.25);
}
.bg-teal-600\\/30 {
  background-color: rgb(13 148 136 / 0.3);
}
.bg-teal-600\\/35 {
  background-color: rgb(13 148 136 / 0.35);
}
.bg-teal-600\\/40 {
  background-color: rgb(13 148 136 / 0.4);
}
.bg-teal-600\\/45 {
  background-color: rgb(13 148 136 / 0.45);
}
.bg-teal-600\\/5 {
  background-color: rgb(13 148 136 / 0.05);
}
.bg-teal-600\\/50 {
  background-color: rgb(13 148 136 / 0.5);
}
.bg-teal-600\\/55 {
  background-color: rgb(13 148 136 / 0.55);
}
.bg-teal-600\\/60 {
  background-color: rgb(13 148 136 / 0.6);
}
.bg-teal-600\\/65 {
  background-color: rgb(13 148 136 / 0.65);
}
.bg-teal-600\\/70 {
  background-color: rgb(13 148 136 / 0.7);
}
.bg-teal-600\\/75 {
  background-color: rgb(13 148 136 / 0.75);
}
.bg-teal-600\\/80 {
  background-color: rgb(13 148 136 / 0.8);
}
.bg-teal-600\\/85 {
  background-color: rgb(13 148 136 / 0.85);
}
.bg-teal-600\\/90 {
  background-color: rgb(13 148 136 / 0.9);
}
.bg-teal-600\\/95 {
  background-color: rgb(13 148 136 / 0.95);
}
.bg-teal-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(15 118 110 / var(--tw-bg-opacity));
}
.bg-teal-700\\/0 {
  background-color: rgb(15 118 110 / 0);
}
.bg-teal-700\\/10 {
  background-color: rgb(15 118 110 / 0.1);
}
.bg-teal-700\\/100 {
  background-color: rgb(15 118 110 / 1);
}
.bg-teal-700\\/15 {
  background-color: rgb(15 118 110 / 0.15);
}
.bg-teal-700\\/20 {
  background-color: rgb(15 118 110 / 0.2);
}
.bg-teal-700\\/25 {
  background-color: rgb(15 118 110 / 0.25);
}
.bg-teal-700\\/30 {
  background-color: rgb(15 118 110 / 0.3);
}
.bg-teal-700\\/35 {
  background-color: rgb(15 118 110 / 0.35);
}
.bg-teal-700\\/40 {
  background-color: rgb(15 118 110 / 0.4);
}
.bg-teal-700\\/45 {
  background-color: rgb(15 118 110 / 0.45);
}
.bg-teal-700\\/5 {
  background-color: rgb(15 118 110 / 0.05);
}
.bg-teal-700\\/50 {
  background-color: rgb(15 118 110 / 0.5);
}
.bg-teal-700\\/55 {
  background-color: rgb(15 118 110 / 0.55);
}
.bg-teal-700\\/60 {
  background-color: rgb(15 118 110 / 0.6);
}
.bg-teal-700\\/65 {
  background-color: rgb(15 118 110 / 0.65);
}
.bg-teal-700\\/70 {
  background-color: rgb(15 118 110 / 0.7);
}
.bg-teal-700\\/75 {
  background-color: rgb(15 118 110 / 0.75);
}
.bg-teal-700\\/80 {
  background-color: rgb(15 118 110 / 0.8);
}
.bg-teal-700\\/85 {
  background-color: rgb(15 118 110 / 0.85);
}
.bg-teal-700\\/90 {
  background-color: rgb(15 118 110 / 0.9);
}
.bg-teal-700\\/95 {
  background-color: rgb(15 118 110 / 0.95);
}
.bg-teal-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(17 94 89 / var(--tw-bg-opacity));
}
.bg-teal-800\\/0 {
  background-color: rgb(17 94 89 / 0);
}
.bg-teal-800\\/10 {
  background-color: rgb(17 94 89 / 0.1);
}
.bg-teal-800\\/100 {
  background-color: rgb(17 94 89 / 1);
}
.bg-teal-800\\/15 {
  background-color: rgb(17 94 89 / 0.15);
}
.bg-teal-800\\/20 {
  background-color: rgb(17 94 89 / 0.2);
}
.bg-teal-800\\/25 {
  background-color: rgb(17 94 89 / 0.25);
}
.bg-teal-800\\/30 {
  background-color: rgb(17 94 89 / 0.3);
}
.bg-teal-800\\/35 {
  background-color: rgb(17 94 89 / 0.35);
}
.bg-teal-800\\/40 {
  background-color: rgb(17 94 89 / 0.4);
}
.bg-teal-800\\/45 {
  background-color: rgb(17 94 89 / 0.45);
}
.bg-teal-800\\/5 {
  background-color: rgb(17 94 89 / 0.05);
}
.bg-teal-800\\/50 {
  background-color: rgb(17 94 89 / 0.5);
}
.bg-teal-800\\/55 {
  background-color: rgb(17 94 89 / 0.55);
}
.bg-teal-800\\/60 {
  background-color: rgb(17 94 89 / 0.6);
}
.bg-teal-800\\/65 {
  background-color: rgb(17 94 89 / 0.65);
}
.bg-teal-800\\/70 {
  background-color: rgb(17 94 89 / 0.7);
}
.bg-teal-800\\/75 {
  background-color: rgb(17 94 89 / 0.75);
}
.bg-teal-800\\/80 {
  background-color: rgb(17 94 89 / 0.8);
}
.bg-teal-800\\/85 {
  background-color: rgb(17 94 89 / 0.85);
}
.bg-teal-800\\/90 {
  background-color: rgb(17 94 89 / 0.9);
}
.bg-teal-800\\/95 {
  background-color: rgb(17 94 89 / 0.95);
}
.bg-teal-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(19 78 74 / var(--tw-bg-opacity));
}
.bg-teal-900\\/0 {
  background-color: rgb(19 78 74 / 0);
}
.bg-teal-900\\/10 {
  background-color: rgb(19 78 74 / 0.1);
}
.bg-teal-900\\/100 {
  background-color: rgb(19 78 74 / 1);
}
.bg-teal-900\\/15 {
  background-color: rgb(19 78 74 / 0.15);
}
.bg-teal-900\\/20 {
  background-color: rgb(19 78 74 / 0.2);
}
.bg-teal-900\\/25 {
  background-color: rgb(19 78 74 / 0.25);
}
.bg-teal-900\\/30 {
  background-color: rgb(19 78 74 / 0.3);
}
.bg-teal-900\\/35 {
  background-color: rgb(19 78 74 / 0.35);
}
.bg-teal-900\\/40 {
  background-color: rgb(19 78 74 / 0.4);
}
.bg-teal-900\\/45 {
  background-color: rgb(19 78 74 / 0.45);
}
.bg-teal-900\\/5 {
  background-color: rgb(19 78 74 / 0.05);
}
.bg-teal-900\\/50 {
  background-color: rgb(19 78 74 / 0.5);
}
.bg-teal-900\\/55 {
  background-color: rgb(19 78 74 / 0.55);
}
.bg-teal-900\\/60 {
  background-color: rgb(19 78 74 / 0.6);
}
.bg-teal-900\\/65 {
  background-color: rgb(19 78 74 / 0.65);
}
.bg-teal-900\\/70 {
  background-color: rgb(19 78 74 / 0.7);
}
.bg-teal-900\\/75 {
  background-color: rgb(19 78 74 / 0.75);
}
.bg-teal-900\\/80 {
  background-color: rgb(19 78 74 / 0.8);
}
.bg-teal-900\\/85 {
  background-color: rgb(19 78 74 / 0.85);
}
.bg-teal-900\\/90 {
  background-color: rgb(19 78 74 / 0.9);
}
.bg-teal-900\\/95 {
  background-color: rgb(19 78 74 / 0.95);
}
.bg-teal-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(4 47 46 / var(--tw-bg-opacity));
}
.bg-teal-950\\/0 {
  background-color: rgb(4 47 46 / 0);
}
.bg-teal-950\\/10 {
  background-color: rgb(4 47 46 / 0.1);
}
.bg-teal-950\\/100 {
  background-color: rgb(4 47 46 / 1);
}
.bg-teal-950\\/15 {
  background-color: rgb(4 47 46 / 0.15);
}
.bg-teal-950\\/20 {
  background-color: rgb(4 47 46 / 0.2);
}
.bg-teal-950\\/25 {
  background-color: rgb(4 47 46 / 0.25);
}
.bg-teal-950\\/30 {
  background-color: rgb(4 47 46 / 0.3);
}
.bg-teal-950\\/35 {
  background-color: rgb(4 47 46 / 0.35);
}
.bg-teal-950\\/40 {
  background-color: rgb(4 47 46 / 0.4);
}
.bg-teal-950\\/45 {
  background-color: rgb(4 47 46 / 0.45);
}
.bg-teal-950\\/5 {
  background-color: rgb(4 47 46 / 0.05);
}
.bg-teal-950\\/50 {
  background-color: rgb(4 47 46 / 0.5);
}
.bg-teal-950\\/55 {
  background-color: rgb(4 47 46 / 0.55);
}
.bg-teal-950\\/60 {
  background-color: rgb(4 47 46 / 0.6);
}
.bg-teal-950\\/65 {
  background-color: rgb(4 47 46 / 0.65);
}
.bg-teal-950\\/70 {
  background-color: rgb(4 47 46 / 0.7);
}
.bg-teal-950\\/75 {
  background-color: rgb(4 47 46 / 0.75);
}
.bg-teal-950\\/80 {
  background-color: rgb(4 47 46 / 0.8);
}
.bg-teal-950\\/85 {
  background-color: rgb(4 47 46 / 0.85);
}
.bg-teal-950\\/90 {
  background-color: rgb(4 47 46 / 0.9);
}
.bg-teal-950\\/95 {
  background-color: rgb(4 47 46 / 0.95);
}
.bg-transparent {
  background-color: transparent;
}
.bg-transparent\\/0 {
  background-color: rgb(0 0 0 / 0);
}
.bg-transparent\\/10 {
  background-color: rgb(0 0 0 / 0.1);
}
.bg-transparent\\/100 {
  background-color: rgb(0 0 0 / 1);
}
.bg-transparent\\/15 {
  background-color: rgb(0 0 0 / 0.15);
}
.bg-transparent\\/20 {
  background-color: rgb(0 0 0 / 0.2);
}
.bg-transparent\\/25 {
  background-color: rgb(0 0 0 / 0.25);
}
.bg-transparent\\/30 {
  background-color: rgb(0 0 0 / 0.3);
}
.bg-transparent\\/35 {
  background-color: rgb(0 0 0 / 0.35);
}
.bg-transparent\\/40 {
  background-color: rgb(0 0 0 / 0.4);
}
.bg-transparent\\/45 {
  background-color: rgb(0 0 0 / 0.45);
}
.bg-transparent\\/5 {
  background-color: rgb(0 0 0 / 0.05);
}
.bg-transparent\\/50 {
  background-color: rgb(0 0 0 / 0.5);
}
.bg-transparent\\/55 {
  background-color: rgb(0 0 0 / 0.55);
}
.bg-transparent\\/60 {
  background-color: rgb(0 0 0 / 0.6);
}
.bg-transparent\\/65 {
  background-color: rgb(0 0 0 / 0.65);
}
.bg-transparent\\/70 {
  background-color: rgb(0 0 0 / 0.7);
}
.bg-transparent\\/75 {
  background-color: rgb(0 0 0 / 0.75);
}
.bg-transparent\\/80 {
  background-color: rgb(0 0 0 / 0.8);
}
.bg-transparent\\/85 {
  background-color: rgb(0 0 0 / 0.85);
}
.bg-transparent\\/90 {
  background-color: rgb(0 0 0 / 0.9);
}
.bg-transparent\\/95 {
  background-color: rgb(0 0 0 / 0.95);
}
.bg-violet-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(237 233 254 / var(--tw-bg-opacity));
}
.bg-violet-100\\/0 {
  background-color: rgb(237 233 254 / 0);
}
.bg-violet-100\\/10 {
  background-color: rgb(237 233 254 / 0.1);
}
.bg-violet-100\\/100 {
  background-color: rgb(237 233 254 / 1);
}
.bg-violet-100\\/15 {
  background-color: rgb(237 233 254 / 0.15);
}
.bg-violet-100\\/20 {
  background-color: rgb(237 233 254 / 0.2);
}
.bg-violet-100\\/25 {
  background-color: rgb(237 233 254 / 0.25);
}
.bg-violet-100\\/30 {
  background-color: rgb(237 233 254 / 0.3);
}
.bg-violet-100\\/35 {
  background-color: rgb(237 233 254 / 0.35);
}
.bg-violet-100\\/40 {
  background-color: rgb(237 233 254 / 0.4);
}
.bg-violet-100\\/45 {
  background-color: rgb(237 233 254 / 0.45);
}
.bg-violet-100\\/5 {
  background-color: rgb(237 233 254 / 0.05);
}
.bg-violet-100\\/50 {
  background-color: rgb(237 233 254 / 0.5);
}
.bg-violet-100\\/55 {
  background-color: rgb(237 233 254 / 0.55);
}
.bg-violet-100\\/60 {
  background-color: rgb(237 233 254 / 0.6);
}
.bg-violet-100\\/65 {
  background-color: rgb(237 233 254 / 0.65);
}
.bg-violet-100\\/70 {
  background-color: rgb(237 233 254 / 0.7);
}
.bg-violet-100\\/75 {
  background-color: rgb(237 233 254 / 0.75);
}
.bg-violet-100\\/80 {
  background-color: rgb(237 233 254 / 0.8);
}
.bg-violet-100\\/85 {
  background-color: rgb(237 233 254 / 0.85);
}
.bg-violet-100\\/90 {
  background-color: rgb(237 233 254 / 0.9);
}
.bg-violet-100\\/95 {
  background-color: rgb(237 233 254 / 0.95);
}
.bg-violet-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(221 214 254 / var(--tw-bg-opacity));
}
.bg-violet-200\\/0 {
  background-color: rgb(221 214 254 / 0);
}
.bg-violet-200\\/10 {
  background-color: rgb(221 214 254 / 0.1);
}
.bg-violet-200\\/100 {
  background-color: rgb(221 214 254 / 1);
}
.bg-violet-200\\/15 {
  background-color: rgb(221 214 254 / 0.15);
}
.bg-violet-200\\/20 {
  background-color: rgb(221 214 254 / 0.2);
}
.bg-violet-200\\/25 {
  background-color: rgb(221 214 254 / 0.25);
}
.bg-violet-200\\/30 {
  background-color: rgb(221 214 254 / 0.3);
}
.bg-violet-200\\/35 {
  background-color: rgb(221 214 254 / 0.35);
}
.bg-violet-200\\/40 {
  background-color: rgb(221 214 254 / 0.4);
}
.bg-violet-200\\/45 {
  background-color: rgb(221 214 254 / 0.45);
}
.bg-violet-200\\/5 {
  background-color: rgb(221 214 254 / 0.05);
}
.bg-violet-200\\/50 {
  background-color: rgb(221 214 254 / 0.5);
}
.bg-violet-200\\/55 {
  background-color: rgb(221 214 254 / 0.55);
}
.bg-violet-200\\/60 {
  background-color: rgb(221 214 254 / 0.6);
}
.bg-violet-200\\/65 {
  background-color: rgb(221 214 254 / 0.65);
}
.bg-violet-200\\/70 {
  background-color: rgb(221 214 254 / 0.7);
}
.bg-violet-200\\/75 {
  background-color: rgb(221 214 254 / 0.75);
}
.bg-violet-200\\/80 {
  background-color: rgb(221 214 254 / 0.8);
}
.bg-violet-200\\/85 {
  background-color: rgb(221 214 254 / 0.85);
}
.bg-violet-200\\/90 {
  background-color: rgb(221 214 254 / 0.9);
}
.bg-violet-200\\/95 {
  background-color: rgb(221 214 254 / 0.95);
}
.bg-violet-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(196 181 253 / var(--tw-bg-opacity));
}
.bg-violet-300\\/0 {
  background-color: rgb(196 181 253 / 0);
}
.bg-violet-300\\/10 {
  background-color: rgb(196 181 253 / 0.1);
}
.bg-violet-300\\/100 {
  background-color: rgb(196 181 253 / 1);
}
.bg-violet-300\\/15 {
  background-color: rgb(196 181 253 / 0.15);
}
.bg-violet-300\\/20 {
  background-color: rgb(196 181 253 / 0.2);
}
.bg-violet-300\\/25 {
  background-color: rgb(196 181 253 / 0.25);
}
.bg-violet-300\\/30 {
  background-color: rgb(196 181 253 / 0.3);
}
.bg-violet-300\\/35 {
  background-color: rgb(196 181 253 / 0.35);
}
.bg-violet-300\\/40 {
  background-color: rgb(196 181 253 / 0.4);
}
.bg-violet-300\\/45 {
  background-color: rgb(196 181 253 / 0.45);
}
.bg-violet-300\\/5 {
  background-color: rgb(196 181 253 / 0.05);
}
.bg-violet-300\\/50 {
  background-color: rgb(196 181 253 / 0.5);
}
.bg-violet-300\\/55 {
  background-color: rgb(196 181 253 / 0.55);
}
.bg-violet-300\\/60 {
  background-color: rgb(196 181 253 / 0.6);
}
.bg-violet-300\\/65 {
  background-color: rgb(196 181 253 / 0.65);
}
.bg-violet-300\\/70 {
  background-color: rgb(196 181 253 / 0.7);
}
.bg-violet-300\\/75 {
  background-color: rgb(196 181 253 / 0.75);
}
.bg-violet-300\\/80 {
  background-color: rgb(196 181 253 / 0.8);
}
.bg-violet-300\\/85 {
  background-color: rgb(196 181 253 / 0.85);
}
.bg-violet-300\\/90 {
  background-color: rgb(196 181 253 / 0.9);
}
.bg-violet-300\\/95 {
  background-color: rgb(196 181 253 / 0.95);
}
.bg-violet-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(167 139 250 / var(--tw-bg-opacity));
}
.bg-violet-400\\/0 {
  background-color: rgb(167 139 250 / 0);
}
.bg-violet-400\\/10 {
  background-color: rgb(167 139 250 / 0.1);
}
.bg-violet-400\\/100 {
  background-color: rgb(167 139 250 / 1);
}
.bg-violet-400\\/15 {
  background-color: rgb(167 139 250 / 0.15);
}
.bg-violet-400\\/20 {
  background-color: rgb(167 139 250 / 0.2);
}
.bg-violet-400\\/25 {
  background-color: rgb(167 139 250 / 0.25);
}
.bg-violet-400\\/30 {
  background-color: rgb(167 139 250 / 0.3);
}
.bg-violet-400\\/35 {
  background-color: rgb(167 139 250 / 0.35);
}
.bg-violet-400\\/40 {
  background-color: rgb(167 139 250 / 0.4);
}
.bg-violet-400\\/45 {
  background-color: rgb(167 139 250 / 0.45);
}
.bg-violet-400\\/5 {
  background-color: rgb(167 139 250 / 0.05);
}
.bg-violet-400\\/50 {
  background-color: rgb(167 139 250 / 0.5);
}
.bg-violet-400\\/55 {
  background-color: rgb(167 139 250 / 0.55);
}
.bg-violet-400\\/60 {
  background-color: rgb(167 139 250 / 0.6);
}
.bg-violet-400\\/65 {
  background-color: rgb(167 139 250 / 0.65);
}
.bg-violet-400\\/70 {
  background-color: rgb(167 139 250 / 0.7);
}
.bg-violet-400\\/75 {
  background-color: rgb(167 139 250 / 0.75);
}
.bg-violet-400\\/80 {
  background-color: rgb(167 139 250 / 0.8);
}
.bg-violet-400\\/85 {
  background-color: rgb(167 139 250 / 0.85);
}
.bg-violet-400\\/90 {
  background-color: rgb(167 139 250 / 0.9);
}
.bg-violet-400\\/95 {
  background-color: rgb(167 139 250 / 0.95);
}
.bg-violet-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(245 243 255 / var(--tw-bg-opacity));
}
.bg-violet-50\\/0 {
  background-color: rgb(245 243 255 / 0);
}
.bg-violet-50\\/10 {
  background-color: rgb(245 243 255 / 0.1);
}
.bg-violet-50\\/100 {
  background-color: rgb(245 243 255 / 1);
}
.bg-violet-50\\/15 {
  background-color: rgb(245 243 255 / 0.15);
}
.bg-violet-50\\/20 {
  background-color: rgb(245 243 255 / 0.2);
}
.bg-violet-50\\/25 {
  background-color: rgb(245 243 255 / 0.25);
}
.bg-violet-50\\/30 {
  background-color: rgb(245 243 255 / 0.3);
}
.bg-violet-50\\/35 {
  background-color: rgb(245 243 255 / 0.35);
}
.bg-violet-50\\/40 {
  background-color: rgb(245 243 255 / 0.4);
}
.bg-violet-50\\/45 {
  background-color: rgb(245 243 255 / 0.45);
}
.bg-violet-50\\/5 {
  background-color: rgb(245 243 255 / 0.05);
}
.bg-violet-50\\/50 {
  background-color: rgb(245 243 255 / 0.5);
}
.bg-violet-50\\/55 {
  background-color: rgb(245 243 255 / 0.55);
}
.bg-violet-50\\/60 {
  background-color: rgb(245 243 255 / 0.6);
}
.bg-violet-50\\/65 {
  background-color: rgb(245 243 255 / 0.65);
}
.bg-violet-50\\/70 {
  background-color: rgb(245 243 255 / 0.7);
}
.bg-violet-50\\/75 {
  background-color: rgb(245 243 255 / 0.75);
}
.bg-violet-50\\/80 {
  background-color: rgb(245 243 255 / 0.8);
}
.bg-violet-50\\/85 {
  background-color: rgb(245 243 255 / 0.85);
}
.bg-violet-50\\/90 {
  background-color: rgb(245 243 255 / 0.9);
}
.bg-violet-50\\/95 {
  background-color: rgb(245 243 255 / 0.95);
}
.bg-violet-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(139 92 246 / var(--tw-bg-opacity));
}
.bg-violet-500\\/0 {
  background-color: rgb(139 92 246 / 0);
}
.bg-violet-500\\/10 {
  background-color: rgb(139 92 246 / 0.1);
}
.bg-violet-500\\/100 {
  background-color: rgb(139 92 246 / 1);
}
.bg-violet-500\\/15 {
  background-color: rgb(139 92 246 / 0.15);
}
.bg-violet-500\\/20 {
  background-color: rgb(139 92 246 / 0.2);
}
.bg-violet-500\\/25 {
  background-color: rgb(139 92 246 / 0.25);
}
.bg-violet-500\\/30 {
  background-color: rgb(139 92 246 / 0.3);
}
.bg-violet-500\\/35 {
  background-color: rgb(139 92 246 / 0.35);
}
.bg-violet-500\\/40 {
  background-color: rgb(139 92 246 / 0.4);
}
.bg-violet-500\\/45 {
  background-color: rgb(139 92 246 / 0.45);
}
.bg-violet-500\\/5 {
  background-color: rgb(139 92 246 / 0.05);
}
.bg-violet-500\\/50 {
  background-color: rgb(139 92 246 / 0.5);
}
.bg-violet-500\\/55 {
  background-color: rgb(139 92 246 / 0.55);
}
.bg-violet-500\\/60 {
  background-color: rgb(139 92 246 / 0.6);
}
.bg-violet-500\\/65 {
  background-color: rgb(139 92 246 / 0.65);
}
.bg-violet-500\\/70 {
  background-color: rgb(139 92 246 / 0.7);
}
.bg-violet-500\\/75 {
  background-color: rgb(139 92 246 / 0.75);
}
.bg-violet-500\\/80 {
  background-color: rgb(139 92 246 / 0.8);
}
.bg-violet-500\\/85 {
  background-color: rgb(139 92 246 / 0.85);
}
.bg-violet-500\\/90 {
  background-color: rgb(139 92 246 / 0.9);
}
.bg-violet-500\\/95 {
  background-color: rgb(139 92 246 / 0.95);
}
.bg-violet-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(124 58 237 / var(--tw-bg-opacity));
}
.bg-violet-600\\/0 {
  background-color: rgb(124 58 237 / 0);
}
.bg-violet-600\\/10 {
  background-color: rgb(124 58 237 / 0.1);
}
.bg-violet-600\\/100 {
  background-color: rgb(124 58 237 / 1);
}
.bg-violet-600\\/15 {
  background-color: rgb(124 58 237 / 0.15);
}
.bg-violet-600\\/20 {
  background-color: rgb(124 58 237 / 0.2);
}
.bg-violet-600\\/25 {
  background-color: rgb(124 58 237 / 0.25);
}
.bg-violet-600\\/30 {
  background-color: rgb(124 58 237 / 0.3);
}
.bg-violet-600\\/35 {
  background-color: rgb(124 58 237 / 0.35);
}
.bg-violet-600\\/40 {
  background-color: rgb(124 58 237 / 0.4);
}
.bg-violet-600\\/45 {
  background-color: rgb(124 58 237 / 0.45);
}
.bg-violet-600\\/5 {
  background-color: rgb(124 58 237 / 0.05);
}
.bg-violet-600\\/50 {
  background-color: rgb(124 58 237 / 0.5);
}
.bg-violet-600\\/55 {
  background-color: rgb(124 58 237 / 0.55);
}
.bg-violet-600\\/60 {
  background-color: rgb(124 58 237 / 0.6);
}
.bg-violet-600\\/65 {
  background-color: rgb(124 58 237 / 0.65);
}
.bg-violet-600\\/70 {
  background-color: rgb(124 58 237 / 0.7);
}
.bg-violet-600\\/75 {
  background-color: rgb(124 58 237 / 0.75);
}
.bg-violet-600\\/80 {
  background-color: rgb(124 58 237 / 0.8);
}
.bg-violet-600\\/85 {
  background-color: rgb(124 58 237 / 0.85);
}
.bg-violet-600\\/90 {
  background-color: rgb(124 58 237 / 0.9);
}
.bg-violet-600\\/95 {
  background-color: rgb(124 58 237 / 0.95);
}
.bg-violet-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(109 40 217 / var(--tw-bg-opacity));
}
.bg-violet-700\\/0 {
  background-color: rgb(109 40 217 / 0);
}
.bg-violet-700\\/10 {
  background-color: rgb(109 40 217 / 0.1);
}
.bg-violet-700\\/100 {
  background-color: rgb(109 40 217 / 1);
}
.bg-violet-700\\/15 {
  background-color: rgb(109 40 217 / 0.15);
}
.bg-violet-700\\/20 {
  background-color: rgb(109 40 217 / 0.2);
}
.bg-violet-700\\/25 {
  background-color: rgb(109 40 217 / 0.25);
}
.bg-violet-700\\/30 {
  background-color: rgb(109 40 217 / 0.3);
}
.bg-violet-700\\/35 {
  background-color: rgb(109 40 217 / 0.35);
}
.bg-violet-700\\/40 {
  background-color: rgb(109 40 217 / 0.4);
}
.bg-violet-700\\/45 {
  background-color: rgb(109 40 217 / 0.45);
}
.bg-violet-700\\/5 {
  background-color: rgb(109 40 217 / 0.05);
}
.bg-violet-700\\/50 {
  background-color: rgb(109 40 217 / 0.5);
}
.bg-violet-700\\/55 {
  background-color: rgb(109 40 217 / 0.55);
}
.bg-violet-700\\/60 {
  background-color: rgb(109 40 217 / 0.6);
}
.bg-violet-700\\/65 {
  background-color: rgb(109 40 217 / 0.65);
}
.bg-violet-700\\/70 {
  background-color: rgb(109 40 217 / 0.7);
}
.bg-violet-700\\/75 {
  background-color: rgb(109 40 217 / 0.75);
}
.bg-violet-700\\/80 {
  background-color: rgb(109 40 217 / 0.8);
}
.bg-violet-700\\/85 {
  background-color: rgb(109 40 217 / 0.85);
}
.bg-violet-700\\/90 {
  background-color: rgb(109 40 217 / 0.9);
}
.bg-violet-700\\/95 {
  background-color: rgb(109 40 217 / 0.95);
}
.bg-violet-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(91 33 182 / var(--tw-bg-opacity));
}
.bg-violet-800\\/0 {
  background-color: rgb(91 33 182 / 0);
}
.bg-violet-800\\/10 {
  background-color: rgb(91 33 182 / 0.1);
}
.bg-violet-800\\/100 {
  background-color: rgb(91 33 182 / 1);
}
.bg-violet-800\\/15 {
  background-color: rgb(91 33 182 / 0.15);
}
.bg-violet-800\\/20 {
  background-color: rgb(91 33 182 / 0.2);
}
.bg-violet-800\\/25 {
  background-color: rgb(91 33 182 / 0.25);
}
.bg-violet-800\\/30 {
  background-color: rgb(91 33 182 / 0.3);
}
.bg-violet-800\\/35 {
  background-color: rgb(91 33 182 / 0.35);
}
.bg-violet-800\\/40 {
  background-color: rgb(91 33 182 / 0.4);
}
.bg-violet-800\\/45 {
  background-color: rgb(91 33 182 / 0.45);
}
.bg-violet-800\\/5 {
  background-color: rgb(91 33 182 / 0.05);
}
.bg-violet-800\\/50 {
  background-color: rgb(91 33 182 / 0.5);
}
.bg-violet-800\\/55 {
  background-color: rgb(91 33 182 / 0.55);
}
.bg-violet-800\\/60 {
  background-color: rgb(91 33 182 / 0.6);
}
.bg-violet-800\\/65 {
  background-color: rgb(91 33 182 / 0.65);
}
.bg-violet-800\\/70 {
  background-color: rgb(91 33 182 / 0.7);
}
.bg-violet-800\\/75 {
  background-color: rgb(91 33 182 / 0.75);
}
.bg-violet-800\\/80 {
  background-color: rgb(91 33 182 / 0.8);
}
.bg-violet-800\\/85 {
  background-color: rgb(91 33 182 / 0.85);
}
.bg-violet-800\\/90 {
  background-color: rgb(91 33 182 / 0.9);
}
.bg-violet-800\\/95 {
  background-color: rgb(91 33 182 / 0.95);
}
.bg-violet-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(76 29 149 / var(--tw-bg-opacity));
}
.bg-violet-900\\/0 {
  background-color: rgb(76 29 149 / 0);
}
.bg-violet-900\\/10 {
  background-color: rgb(76 29 149 / 0.1);
}
.bg-violet-900\\/100 {
  background-color: rgb(76 29 149 / 1);
}
.bg-violet-900\\/15 {
  background-color: rgb(76 29 149 / 0.15);
}
.bg-violet-900\\/20 {
  background-color: rgb(76 29 149 / 0.2);
}
.bg-violet-900\\/25 {
  background-color: rgb(76 29 149 / 0.25);
}
.bg-violet-900\\/30 {
  background-color: rgb(76 29 149 / 0.3);
}
.bg-violet-900\\/35 {
  background-color: rgb(76 29 149 / 0.35);
}
.bg-violet-900\\/40 {
  background-color: rgb(76 29 149 / 0.4);
}
.bg-violet-900\\/45 {
  background-color: rgb(76 29 149 / 0.45);
}
.bg-violet-900\\/5 {
  background-color: rgb(76 29 149 / 0.05);
}
.bg-violet-900\\/50 {
  background-color: rgb(76 29 149 / 0.5);
}
.bg-violet-900\\/55 {
  background-color: rgb(76 29 149 / 0.55);
}
.bg-violet-900\\/60 {
  background-color: rgb(76 29 149 / 0.6);
}
.bg-violet-900\\/65 {
  background-color: rgb(76 29 149 / 0.65);
}
.bg-violet-900\\/70 {
  background-color: rgb(76 29 149 / 0.7);
}
.bg-violet-900\\/75 {
  background-color: rgb(76 29 149 / 0.75);
}
.bg-violet-900\\/80 {
  background-color: rgb(76 29 149 / 0.8);
}
.bg-violet-900\\/85 {
  background-color: rgb(76 29 149 / 0.85);
}
.bg-violet-900\\/90 {
  background-color: rgb(76 29 149 / 0.9);
}
.bg-violet-900\\/95 {
  background-color: rgb(76 29 149 / 0.95);
}
.bg-violet-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(46 16 101 / var(--tw-bg-opacity));
}
.bg-violet-950\\/0 {
  background-color: rgb(46 16 101 / 0);
}
.bg-violet-950\\/10 {
  background-color: rgb(46 16 101 / 0.1);
}
.bg-violet-950\\/100 {
  background-color: rgb(46 16 101 / 1);
}
.bg-violet-950\\/15 {
  background-color: rgb(46 16 101 / 0.15);
}
.bg-violet-950\\/20 {
  background-color: rgb(46 16 101 / 0.2);
}
.bg-violet-950\\/25 {
  background-color: rgb(46 16 101 / 0.25);
}
.bg-violet-950\\/30 {
  background-color: rgb(46 16 101 / 0.3);
}
.bg-violet-950\\/35 {
  background-color: rgb(46 16 101 / 0.35);
}
.bg-violet-950\\/40 {
  background-color: rgb(46 16 101 / 0.4);
}
.bg-violet-950\\/45 {
  background-color: rgb(46 16 101 / 0.45);
}
.bg-violet-950\\/5 {
  background-color: rgb(46 16 101 / 0.05);
}
.bg-violet-950\\/50 {
  background-color: rgb(46 16 101 / 0.5);
}
.bg-violet-950\\/55 {
  background-color: rgb(46 16 101 / 0.55);
}
.bg-violet-950\\/60 {
  background-color: rgb(46 16 101 / 0.6);
}
.bg-violet-950\\/65 {
  background-color: rgb(46 16 101 / 0.65);
}
.bg-violet-950\\/70 {
  background-color: rgb(46 16 101 / 0.7);
}
.bg-violet-950\\/75 {
  background-color: rgb(46 16 101 / 0.75);
}
.bg-violet-950\\/80 {
  background-color: rgb(46 16 101 / 0.8);
}
.bg-violet-950\\/85 {
  background-color: rgb(46 16 101 / 0.85);
}
.bg-violet-950\\/90 {
  background-color: rgb(46 16 101 / 0.9);
}
.bg-violet-950\\/95 {
  background-color: rgb(46 16 101 / 0.95);
}
.bg-white {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}
.bg-white\\/0 {
  background-color: rgb(255 255 255 / 0);
}
.bg-white\\/10 {
  background-color: rgb(255 255 255 / 0.1);
}
.bg-white\\/100 {
  background-color: rgb(255 255 255 / 1);
}
.bg-white\\/15 {
  background-color: rgb(255 255 255 / 0.15);
}
.bg-white\\/20 {
  background-color: rgb(255 255 255 / 0.2);
}
.bg-white\\/25 {
  background-color: rgb(255 255 255 / 0.25);
}
.bg-white\\/30 {
  background-color: rgb(255 255 255 / 0.3);
}
.bg-white\\/35 {
  background-color: rgb(255 255 255 / 0.35);
}
.bg-white\\/40 {
  background-color: rgb(255 255 255 / 0.4);
}
.bg-white\\/45 {
  background-color: rgb(255 255 255 / 0.45);
}
.bg-white\\/5 {
  background-color: rgb(255 255 255 / 0.05);
}
.bg-white\\/50 {
  background-color: rgb(255 255 255 / 0.5);
}
.bg-white\\/55 {
  background-color: rgb(255 255 255 / 0.55);
}
.bg-white\\/60 {
  background-color: rgb(255 255 255 / 0.6);
}
.bg-white\\/65 {
  background-color: rgb(255 255 255 / 0.65);
}
.bg-white\\/70 {
  background-color: rgb(255 255 255 / 0.7);
}
.bg-white\\/75 {
  background-color: rgb(255 255 255 / 0.75);
}
.bg-white\\/80 {
  background-color: rgb(255 255 255 / 0.8);
}
.bg-white\\/85 {
  background-color: rgb(255 255 255 / 0.85);
}
.bg-white\\/90 {
  background-color: rgb(255 255 255 / 0.9);
}
.bg-white\\/95 {
  background-color: rgb(255 255 255 / 0.95);
}
.bg-yellow-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 249 195 / var(--tw-bg-opacity));
}
.bg-yellow-100\\/0 {
  background-color: rgb(254 249 195 / 0);
}
.bg-yellow-100\\/10 {
  background-color: rgb(254 249 195 / 0.1);
}
.bg-yellow-100\\/100 {
  background-color: rgb(254 249 195 / 1);
}
.bg-yellow-100\\/15 {
  background-color: rgb(254 249 195 / 0.15);
}
.bg-yellow-100\\/20 {
  background-color: rgb(254 249 195 / 0.2);
}
.bg-yellow-100\\/25 {
  background-color: rgb(254 249 195 / 0.25);
}
.bg-yellow-100\\/30 {
  background-color: rgb(254 249 195 / 0.3);
}
.bg-yellow-100\\/35 {
  background-color: rgb(254 249 195 / 0.35);
}
.bg-yellow-100\\/40 {
  background-color: rgb(254 249 195 / 0.4);
}
.bg-yellow-100\\/45 {
  background-color: rgb(254 249 195 / 0.45);
}
.bg-yellow-100\\/5 {
  background-color: rgb(254 249 195 / 0.05);
}
.bg-yellow-100\\/50 {
  background-color: rgb(254 249 195 / 0.5);
}
.bg-yellow-100\\/55 {
  background-color: rgb(254 249 195 / 0.55);
}
.bg-yellow-100\\/60 {
  background-color: rgb(254 249 195 / 0.6);
}
.bg-yellow-100\\/65 {
  background-color: rgb(254 249 195 / 0.65);
}
.bg-yellow-100\\/70 {
  background-color: rgb(254 249 195 / 0.7);
}
.bg-yellow-100\\/75 {
  background-color: rgb(254 249 195 / 0.75);
}
.bg-yellow-100\\/80 {
  background-color: rgb(254 249 195 / 0.8);
}
.bg-yellow-100\\/85 {
  background-color: rgb(254 249 195 / 0.85);
}
.bg-yellow-100\\/90 {
  background-color: rgb(254 249 195 / 0.9);
}
.bg-yellow-100\\/95 {
  background-color: rgb(254 249 195 / 0.95);
}
.bg-yellow-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 240 138 / var(--tw-bg-opacity));
}
.bg-yellow-200\\/0 {
  background-color: rgb(254 240 138 / 0);
}
.bg-yellow-200\\/10 {
  background-color: rgb(254 240 138 / 0.1);
}
.bg-yellow-200\\/100 {
  background-color: rgb(254 240 138 / 1);
}
.bg-yellow-200\\/15 {
  background-color: rgb(254 240 138 / 0.15);
}
.bg-yellow-200\\/20 {
  background-color: rgb(254 240 138 / 0.2);
}
.bg-yellow-200\\/25 {
  background-color: rgb(254 240 138 / 0.25);
}
.bg-yellow-200\\/30 {
  background-color: rgb(254 240 138 / 0.3);
}
.bg-yellow-200\\/35 {
  background-color: rgb(254 240 138 / 0.35);
}
.bg-yellow-200\\/40 {
  background-color: rgb(254 240 138 / 0.4);
}
.bg-yellow-200\\/45 {
  background-color: rgb(254 240 138 / 0.45);
}
.bg-yellow-200\\/5 {
  background-color: rgb(254 240 138 / 0.05);
}
.bg-yellow-200\\/50 {
  background-color: rgb(254 240 138 / 0.5);
}
.bg-yellow-200\\/55 {
  background-color: rgb(254 240 138 / 0.55);
}
.bg-yellow-200\\/60 {
  background-color: rgb(254 240 138 / 0.6);
}
.bg-yellow-200\\/65 {
  background-color: rgb(254 240 138 / 0.65);
}
.bg-yellow-200\\/70 {
  background-color: rgb(254 240 138 / 0.7);
}
.bg-yellow-200\\/75 {
  background-color: rgb(254 240 138 / 0.75);
}
.bg-yellow-200\\/80 {
  background-color: rgb(254 240 138 / 0.8);
}
.bg-yellow-200\\/85 {
  background-color: rgb(254 240 138 / 0.85);
}
.bg-yellow-200\\/90 {
  background-color: rgb(254 240 138 / 0.9);
}
.bg-yellow-200\\/95 {
  background-color: rgb(254 240 138 / 0.95);
}
.bg-yellow-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(253 224 71 / var(--tw-bg-opacity));
}
.bg-yellow-300\\/0 {
  background-color: rgb(253 224 71 / 0);
}
.bg-yellow-300\\/10 {
  background-color: rgb(253 224 71 / 0.1);
}
.bg-yellow-300\\/100 {
  background-color: rgb(253 224 71 / 1);
}
.bg-yellow-300\\/15 {
  background-color: rgb(253 224 71 / 0.15);
}
.bg-yellow-300\\/20 {
  background-color: rgb(253 224 71 / 0.2);
}
.bg-yellow-300\\/25 {
  background-color: rgb(253 224 71 / 0.25);
}
.bg-yellow-300\\/30 {
  background-color: rgb(253 224 71 / 0.3);
}
.bg-yellow-300\\/35 {
  background-color: rgb(253 224 71 / 0.35);
}
.bg-yellow-300\\/40 {
  background-color: rgb(253 224 71 / 0.4);
}
.bg-yellow-300\\/45 {
  background-color: rgb(253 224 71 / 0.45);
}
.bg-yellow-300\\/5 {
  background-color: rgb(253 224 71 / 0.05);
}
.bg-yellow-300\\/50 {
  background-color: rgb(253 224 71 / 0.5);
}
.bg-yellow-300\\/55 {
  background-color: rgb(253 224 71 / 0.55);
}
.bg-yellow-300\\/60 {
  background-color: rgb(253 224 71 / 0.6);
}
.bg-yellow-300\\/65 {
  background-color: rgb(253 224 71 / 0.65);
}
.bg-yellow-300\\/70 {
  background-color: rgb(253 224 71 / 0.7);
}
.bg-yellow-300\\/75 {
  background-color: rgb(253 224 71 / 0.75);
}
.bg-yellow-300\\/80 {
  background-color: rgb(253 224 71 / 0.8);
}
.bg-yellow-300\\/85 {
  background-color: rgb(253 224 71 / 0.85);
}
.bg-yellow-300\\/90 {
  background-color: rgb(253 224 71 / 0.9);
}
.bg-yellow-300\\/95 {
  background-color: rgb(253 224 71 / 0.95);
}
.bg-yellow-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 204 21 / var(--tw-bg-opacity));
}
.bg-yellow-400\\/0 {
  background-color: rgb(250 204 21 / 0);
}
.bg-yellow-400\\/10 {
  background-color: rgb(250 204 21 / 0.1);
}
.bg-yellow-400\\/100 {
  background-color: rgb(250 204 21 / 1);
}
.bg-yellow-400\\/15 {
  background-color: rgb(250 204 21 / 0.15);
}
.bg-yellow-400\\/20 {
  background-color: rgb(250 204 21 / 0.2);
}
.bg-yellow-400\\/25 {
  background-color: rgb(250 204 21 / 0.25);
}
.bg-yellow-400\\/30 {
  background-color: rgb(250 204 21 / 0.3);
}
.bg-yellow-400\\/35 {
  background-color: rgb(250 204 21 / 0.35);
}
.bg-yellow-400\\/40 {
  background-color: rgb(250 204 21 / 0.4);
}
.bg-yellow-400\\/45 {
  background-color: rgb(250 204 21 / 0.45);
}
.bg-yellow-400\\/5 {
  background-color: rgb(250 204 21 / 0.05);
}
.bg-yellow-400\\/50 {
  background-color: rgb(250 204 21 / 0.5);
}
.bg-yellow-400\\/55 {
  background-color: rgb(250 204 21 / 0.55);
}
.bg-yellow-400\\/60 {
  background-color: rgb(250 204 21 / 0.6);
}
.bg-yellow-400\\/65 {
  background-color: rgb(250 204 21 / 0.65);
}
.bg-yellow-400\\/70 {
  background-color: rgb(250 204 21 / 0.7);
}
.bg-yellow-400\\/75 {
  background-color: rgb(250 204 21 / 0.75);
}
.bg-yellow-400\\/80 {
  background-color: rgb(250 204 21 / 0.8);
}
.bg-yellow-400\\/85 {
  background-color: rgb(250 204 21 / 0.85);
}
.bg-yellow-400\\/90 {
  background-color: rgb(250 204 21 / 0.9);
}
.bg-yellow-400\\/95 {
  background-color: rgb(250 204 21 / 0.95);
}
.bg-yellow-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(254 252 232 / var(--tw-bg-opacity));
}
.bg-yellow-50\\/0 {
  background-color: rgb(254 252 232 / 0);
}
.bg-yellow-50\\/10 {
  background-color: rgb(254 252 232 / 0.1);
}
.bg-yellow-50\\/100 {
  background-color: rgb(254 252 232 / 1);
}
.bg-yellow-50\\/15 {
  background-color: rgb(254 252 232 / 0.15);
}
.bg-yellow-50\\/20 {
  background-color: rgb(254 252 232 / 0.2);
}
.bg-yellow-50\\/25 {
  background-color: rgb(254 252 232 / 0.25);
}
.bg-yellow-50\\/30 {
  background-color: rgb(254 252 232 / 0.3);
}
.bg-yellow-50\\/35 {
  background-color: rgb(254 252 232 / 0.35);
}
.bg-yellow-50\\/40 {
  background-color: rgb(254 252 232 / 0.4);
}
.bg-yellow-50\\/45 {
  background-color: rgb(254 252 232 / 0.45);
}
.bg-yellow-50\\/5 {
  background-color: rgb(254 252 232 / 0.05);
}
.bg-yellow-50\\/50 {
  background-color: rgb(254 252 232 / 0.5);
}
.bg-yellow-50\\/55 {
  background-color: rgb(254 252 232 / 0.55);
}
.bg-yellow-50\\/60 {
  background-color: rgb(254 252 232 / 0.6);
}
.bg-yellow-50\\/65 {
  background-color: rgb(254 252 232 / 0.65);
}
.bg-yellow-50\\/70 {
  background-color: rgb(254 252 232 / 0.7);
}
.bg-yellow-50\\/75 {
  background-color: rgb(254 252 232 / 0.75);
}
.bg-yellow-50\\/80 {
  background-color: rgb(254 252 232 / 0.8);
}
.bg-yellow-50\\/85 {
  background-color: rgb(254 252 232 / 0.85);
}
.bg-yellow-50\\/90 {
  background-color: rgb(254 252 232 / 0.9);
}
.bg-yellow-50\\/95 {
  background-color: rgb(254 252 232 / 0.95);
}
.bg-yellow-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(234 179 8 / var(--tw-bg-opacity));
}
.bg-yellow-500\\/0 {
  background-color: rgb(234 179 8 / 0);
}
.bg-yellow-500\\/10 {
  background-color: rgb(234 179 8 / 0.1);
}
.bg-yellow-500\\/100 {
  background-color: rgb(234 179 8 / 1);
}
.bg-yellow-500\\/15 {
  background-color: rgb(234 179 8 / 0.15);
}
.bg-yellow-500\\/20 {
  background-color: rgb(234 179 8 / 0.2);
}
.bg-yellow-500\\/25 {
  background-color: rgb(234 179 8 / 0.25);
}
.bg-yellow-500\\/30 {
  background-color: rgb(234 179 8 / 0.3);
}
.bg-yellow-500\\/35 {
  background-color: rgb(234 179 8 / 0.35);
}
.bg-yellow-500\\/40 {
  background-color: rgb(234 179 8 / 0.4);
}
.bg-yellow-500\\/45 {
  background-color: rgb(234 179 8 / 0.45);
}
.bg-yellow-500\\/5 {
  background-color: rgb(234 179 8 / 0.05);
}
.bg-yellow-500\\/50 {
  background-color: rgb(234 179 8 / 0.5);
}
.bg-yellow-500\\/55 {
  background-color: rgb(234 179 8 / 0.55);
}
.bg-yellow-500\\/60 {
  background-color: rgb(234 179 8 / 0.6);
}
.bg-yellow-500\\/65 {
  background-color: rgb(234 179 8 / 0.65);
}
.bg-yellow-500\\/70 {
  background-color: rgb(234 179 8 / 0.7);
}
.bg-yellow-500\\/75 {
  background-color: rgb(234 179 8 / 0.75);
}
.bg-yellow-500\\/80 {
  background-color: rgb(234 179 8 / 0.8);
}
.bg-yellow-500\\/85 {
  background-color: rgb(234 179 8 / 0.85);
}
.bg-yellow-500\\/90 {
  background-color: rgb(234 179 8 / 0.9);
}
.bg-yellow-500\\/95 {
  background-color: rgb(234 179 8 / 0.95);
}
.bg-yellow-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(202 138 4 / var(--tw-bg-opacity));
}
.bg-yellow-600\\/0 {
  background-color: rgb(202 138 4 / 0);
}
.bg-yellow-600\\/10 {
  background-color: rgb(202 138 4 / 0.1);
}
.bg-yellow-600\\/100 {
  background-color: rgb(202 138 4 / 1);
}
.bg-yellow-600\\/15 {
  background-color: rgb(202 138 4 / 0.15);
}
.bg-yellow-600\\/20 {
  background-color: rgb(202 138 4 / 0.2);
}
.bg-yellow-600\\/25 {
  background-color: rgb(202 138 4 / 0.25);
}
.bg-yellow-600\\/30 {
  background-color: rgb(202 138 4 / 0.3);
}
.bg-yellow-600\\/35 {
  background-color: rgb(202 138 4 / 0.35);
}
.bg-yellow-600\\/40 {
  background-color: rgb(202 138 4 / 0.4);
}
.bg-yellow-600\\/45 {
  background-color: rgb(202 138 4 / 0.45);
}
.bg-yellow-600\\/5 {
  background-color: rgb(202 138 4 / 0.05);
}
.bg-yellow-600\\/50 {
  background-color: rgb(202 138 4 / 0.5);
}
.bg-yellow-600\\/55 {
  background-color: rgb(202 138 4 / 0.55);
}
.bg-yellow-600\\/60 {
  background-color: rgb(202 138 4 / 0.6);
}
.bg-yellow-600\\/65 {
  background-color: rgb(202 138 4 / 0.65);
}
.bg-yellow-600\\/70 {
  background-color: rgb(202 138 4 / 0.7);
}
.bg-yellow-600\\/75 {
  background-color: rgb(202 138 4 / 0.75);
}
.bg-yellow-600\\/80 {
  background-color: rgb(202 138 4 / 0.8);
}
.bg-yellow-600\\/85 {
  background-color: rgb(202 138 4 / 0.85);
}
.bg-yellow-600\\/90 {
  background-color: rgb(202 138 4 / 0.9);
}
.bg-yellow-600\\/95 {
  background-color: rgb(202 138 4 / 0.95);
}
.bg-yellow-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(161 98 7 / var(--tw-bg-opacity));
}
.bg-yellow-700\\/0 {
  background-color: rgb(161 98 7 / 0);
}
.bg-yellow-700\\/10 {
  background-color: rgb(161 98 7 / 0.1);
}
.bg-yellow-700\\/100 {
  background-color: rgb(161 98 7 / 1);
}
.bg-yellow-700\\/15 {
  background-color: rgb(161 98 7 / 0.15);
}
.bg-yellow-700\\/20 {
  background-color: rgb(161 98 7 / 0.2);
}
.bg-yellow-700\\/25 {
  background-color: rgb(161 98 7 / 0.25);
}
.bg-yellow-700\\/30 {
  background-color: rgb(161 98 7 / 0.3);
}
.bg-yellow-700\\/35 {
  background-color: rgb(161 98 7 / 0.35);
}
.bg-yellow-700\\/40 {
  background-color: rgb(161 98 7 / 0.4);
}
.bg-yellow-700\\/45 {
  background-color: rgb(161 98 7 / 0.45);
}
.bg-yellow-700\\/5 {
  background-color: rgb(161 98 7 / 0.05);
}
.bg-yellow-700\\/50 {
  background-color: rgb(161 98 7 / 0.5);
}
.bg-yellow-700\\/55 {
  background-color: rgb(161 98 7 / 0.55);
}
.bg-yellow-700\\/60 {
  background-color: rgb(161 98 7 / 0.6);
}
.bg-yellow-700\\/65 {
  background-color: rgb(161 98 7 / 0.65);
}
.bg-yellow-700\\/70 {
  background-color: rgb(161 98 7 / 0.7);
}
.bg-yellow-700\\/75 {
  background-color: rgb(161 98 7 / 0.75);
}
.bg-yellow-700\\/80 {
  background-color: rgb(161 98 7 / 0.8);
}
.bg-yellow-700\\/85 {
  background-color: rgb(161 98 7 / 0.85);
}
.bg-yellow-700\\/90 {
  background-color: rgb(161 98 7 / 0.9);
}
.bg-yellow-700\\/95 {
  background-color: rgb(161 98 7 / 0.95);
}
.bg-yellow-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(133 77 14 / var(--tw-bg-opacity));
}
.bg-yellow-800\\/0 {
  background-color: rgb(133 77 14 / 0);
}
.bg-yellow-800\\/10 {
  background-color: rgb(133 77 14 / 0.1);
}
.bg-yellow-800\\/100 {
  background-color: rgb(133 77 14 / 1);
}
.bg-yellow-800\\/15 {
  background-color: rgb(133 77 14 / 0.15);
}
.bg-yellow-800\\/20 {
  background-color: rgb(133 77 14 / 0.2);
}
.bg-yellow-800\\/25 {
  background-color: rgb(133 77 14 / 0.25);
}
.bg-yellow-800\\/30 {
  background-color: rgb(133 77 14 / 0.3);
}
.bg-yellow-800\\/35 {
  background-color: rgb(133 77 14 / 0.35);
}
.bg-yellow-800\\/40 {
  background-color: rgb(133 77 14 / 0.4);
}
.bg-yellow-800\\/45 {
  background-color: rgb(133 77 14 / 0.45);
}
.bg-yellow-800\\/5 {
  background-color: rgb(133 77 14 / 0.05);
}
.bg-yellow-800\\/50 {
  background-color: rgb(133 77 14 / 0.5);
}
.bg-yellow-800\\/55 {
  background-color: rgb(133 77 14 / 0.55);
}
.bg-yellow-800\\/60 {
  background-color: rgb(133 77 14 / 0.6);
}
.bg-yellow-800\\/65 {
  background-color: rgb(133 77 14 / 0.65);
}
.bg-yellow-800\\/70 {
  background-color: rgb(133 77 14 / 0.7);
}
.bg-yellow-800\\/75 {
  background-color: rgb(133 77 14 / 0.75);
}
.bg-yellow-800\\/80 {
  background-color: rgb(133 77 14 / 0.8);
}
.bg-yellow-800\\/85 {
  background-color: rgb(133 77 14 / 0.85);
}
.bg-yellow-800\\/90 {
  background-color: rgb(133 77 14 / 0.9);
}
.bg-yellow-800\\/95 {
  background-color: rgb(133 77 14 / 0.95);
}
.bg-yellow-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(113 63 18 / var(--tw-bg-opacity));
}
.bg-yellow-900\\/0 {
  background-color: rgb(113 63 18 / 0);
}
.bg-yellow-900\\/10 {
  background-color: rgb(113 63 18 / 0.1);
}
.bg-yellow-900\\/100 {
  background-color: rgb(113 63 18 / 1);
}
.bg-yellow-900\\/15 {
  background-color: rgb(113 63 18 / 0.15);
}
.bg-yellow-900\\/20 {
  background-color: rgb(113 63 18 / 0.2);
}
.bg-yellow-900\\/25 {
  background-color: rgb(113 63 18 / 0.25);
}
.bg-yellow-900\\/30 {
  background-color: rgb(113 63 18 / 0.3);
}
.bg-yellow-900\\/35 {
  background-color: rgb(113 63 18 / 0.35);
}
.bg-yellow-900\\/40 {
  background-color: rgb(113 63 18 / 0.4);
}
.bg-yellow-900\\/45 {
  background-color: rgb(113 63 18 / 0.45);
}
.bg-yellow-900\\/5 {
  background-color: rgb(113 63 18 / 0.05);
}
.bg-yellow-900\\/50 {
  background-color: rgb(113 63 18 / 0.5);
}
.bg-yellow-900\\/55 {
  background-color: rgb(113 63 18 / 0.55);
}
.bg-yellow-900\\/60 {
  background-color: rgb(113 63 18 / 0.6);
}
.bg-yellow-900\\/65 {
  background-color: rgb(113 63 18 / 0.65);
}
.bg-yellow-900\\/70 {
  background-color: rgb(113 63 18 / 0.7);
}
.bg-yellow-900\\/75 {
  background-color: rgb(113 63 18 / 0.75);
}
.bg-yellow-900\\/80 {
  background-color: rgb(113 63 18 / 0.8);
}
.bg-yellow-900\\/85 {
  background-color: rgb(113 63 18 / 0.85);
}
.bg-yellow-900\\/90 {
  background-color: rgb(113 63 18 / 0.9);
}
.bg-yellow-900\\/95 {
  background-color: rgb(113 63 18 / 0.95);
}
.bg-yellow-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(66 32 6 / var(--tw-bg-opacity));
}
.bg-yellow-950\\/0 {
  background-color: rgb(66 32 6 / 0);
}
.bg-yellow-950\\/10 {
  background-color: rgb(66 32 6 / 0.1);
}
.bg-yellow-950\\/100 {
  background-color: rgb(66 32 6 / 1);
}
.bg-yellow-950\\/15 {
  background-color: rgb(66 32 6 / 0.15);
}
.bg-yellow-950\\/20 {
  background-color: rgb(66 32 6 / 0.2);
}
.bg-yellow-950\\/25 {
  background-color: rgb(66 32 6 / 0.25);
}
.bg-yellow-950\\/30 {
  background-color: rgb(66 32 6 / 0.3);
}
.bg-yellow-950\\/35 {
  background-color: rgb(66 32 6 / 0.35);
}
.bg-yellow-950\\/40 {
  background-color: rgb(66 32 6 / 0.4);
}
.bg-yellow-950\\/45 {
  background-color: rgb(66 32 6 / 0.45);
}
.bg-yellow-950\\/5 {
  background-color: rgb(66 32 6 / 0.05);
}
.bg-yellow-950\\/50 {
  background-color: rgb(66 32 6 / 0.5);
}
.bg-yellow-950\\/55 {
  background-color: rgb(66 32 6 / 0.55);
}
.bg-yellow-950\\/60 {
  background-color: rgb(66 32 6 / 0.6);
}
.bg-yellow-950\\/65 {
  background-color: rgb(66 32 6 / 0.65);
}
.bg-yellow-950\\/70 {
  background-color: rgb(66 32 6 / 0.7);
}
.bg-yellow-950\\/75 {
  background-color: rgb(66 32 6 / 0.75);
}
.bg-yellow-950\\/80 {
  background-color: rgb(66 32 6 / 0.8);
}
.bg-yellow-950\\/85 {
  background-color: rgb(66 32 6 / 0.85);
}
.bg-yellow-950\\/90 {
  background-color: rgb(66 32 6 / 0.9);
}
.bg-yellow-950\\/95 {
  background-color: rgb(66 32 6 / 0.95);
}
.bg-zinc-100 {
  --tw-bg-opacity: 1;
  background-color: rgb(244 244 245 / var(--tw-bg-opacity));
}
.bg-zinc-100\\/0 {
  background-color: rgb(244 244 245 / 0);
}
.bg-zinc-100\\/10 {
  background-color: rgb(244 244 245 / 0.1);
}
.bg-zinc-100\\/100 {
  background-color: rgb(244 244 245 / 1);
}
.bg-zinc-100\\/15 {
  background-color: rgb(244 244 245 / 0.15);
}
.bg-zinc-100\\/20 {
  background-color: rgb(244 244 245 / 0.2);
}
.bg-zinc-100\\/25 {
  background-color: rgb(244 244 245 / 0.25);
}
.bg-zinc-100\\/30 {
  background-color: rgb(244 244 245 / 0.3);
}
.bg-zinc-100\\/35 {
  background-color: rgb(244 244 245 / 0.35);
}
.bg-zinc-100\\/40 {
  background-color: rgb(244 244 245 / 0.4);
}
.bg-zinc-100\\/45 {
  background-color: rgb(244 244 245 / 0.45);
}
.bg-zinc-100\\/5 {
  background-color: rgb(244 244 245 / 0.05);
}
.bg-zinc-100\\/50 {
  background-color: rgb(244 244 245 / 0.5);
}
.bg-zinc-100\\/55 {
  background-color: rgb(244 244 245 / 0.55);
}
.bg-zinc-100\\/60 {
  background-color: rgb(244 244 245 / 0.6);
}
.bg-zinc-100\\/65 {
  background-color: rgb(244 244 245 / 0.65);
}
.bg-zinc-100\\/70 {
  background-color: rgb(244 244 245 / 0.7);
}
.bg-zinc-100\\/75 {
  background-color: rgb(244 244 245 / 0.75);
}
.bg-zinc-100\\/80 {
  background-color: rgb(244 244 245 / 0.8);
}
.bg-zinc-100\\/85 {
  background-color: rgb(244 244 245 / 0.85);
}
.bg-zinc-100\\/90 {
  background-color: rgb(244 244 245 / 0.9);
}
.bg-zinc-100\\/95 {
  background-color: rgb(244 244 245 / 0.95);
}
.bg-zinc-200 {
  --tw-bg-opacity: 1;
  background-color: rgb(228 228 231 / var(--tw-bg-opacity));
}
.bg-zinc-200\\/0 {
  background-color: rgb(228 228 231 / 0);
}
.bg-zinc-200\\/10 {
  background-color: rgb(228 228 231 / 0.1);
}
.bg-zinc-200\\/100 {
  background-color: rgb(228 228 231 / 1);
}
.bg-zinc-200\\/15 {
  background-color: rgb(228 228 231 / 0.15);
}
.bg-zinc-200\\/20 {
  background-color: rgb(228 228 231 / 0.2);
}
.bg-zinc-200\\/25 {
  background-color: rgb(228 228 231 / 0.25);
}
.bg-zinc-200\\/30 {
  background-color: rgb(228 228 231 / 0.3);
}
.bg-zinc-200\\/35 {
  background-color: rgb(228 228 231 / 0.35);
}
.bg-zinc-200\\/40 {
  background-color: rgb(228 228 231 / 0.4);
}
.bg-zinc-200\\/45 {
  background-color: rgb(228 228 231 / 0.45);
}
.bg-zinc-200\\/5 {
  background-color: rgb(228 228 231 / 0.05);
}
.bg-zinc-200\\/50 {
  background-color: rgb(228 228 231 / 0.5);
}
.bg-zinc-200\\/55 {
  background-color: rgb(228 228 231 / 0.55);
}
.bg-zinc-200\\/60 {
  background-color: rgb(228 228 231 / 0.6);
}
.bg-zinc-200\\/65 {
  background-color: rgb(228 228 231 / 0.65);
}
.bg-zinc-200\\/70 {
  background-color: rgb(228 228 231 / 0.7);
}
.bg-zinc-200\\/75 {
  background-color: rgb(228 228 231 / 0.75);
}
.bg-zinc-200\\/80 {
  background-color: rgb(228 228 231 / 0.8);
}
.bg-zinc-200\\/85 {
  background-color: rgb(228 228 231 / 0.85);
}
.bg-zinc-200\\/90 {
  background-color: rgb(228 228 231 / 0.9);
}
.bg-zinc-200\\/95 {
  background-color: rgb(228 228 231 / 0.95);
}
.bg-zinc-300 {
  --tw-bg-opacity: 1;
  background-color: rgb(212 212 216 / var(--tw-bg-opacity));
}
.bg-zinc-300\\/0 {
  background-color: rgb(212 212 216 / 0);
}
.bg-zinc-300\\/10 {
  background-color: rgb(212 212 216 / 0.1);
}
.bg-zinc-300\\/100 {
  background-color: rgb(212 212 216 / 1);
}
.bg-zinc-300\\/15 {
  background-color: rgb(212 212 216 / 0.15);
}
.bg-zinc-300\\/20 {
  background-color: rgb(212 212 216 / 0.2);
}
.bg-zinc-300\\/25 {
  background-color: rgb(212 212 216 / 0.25);
}
.bg-zinc-300\\/30 {
  background-color: rgb(212 212 216 / 0.3);
}
.bg-zinc-300\\/35 {
  background-color: rgb(212 212 216 / 0.35);
}
.bg-zinc-300\\/40 {
  background-color: rgb(212 212 216 / 0.4);
}
.bg-zinc-300\\/45 {
  background-color: rgb(212 212 216 / 0.45);
}
.bg-zinc-300\\/5 {
  background-color: rgb(212 212 216 / 0.05);
}
.bg-zinc-300\\/50 {
  background-color: rgb(212 212 216 / 0.5);
}
.bg-zinc-300\\/55 {
  background-color: rgb(212 212 216 / 0.55);
}
.bg-zinc-300\\/60 {
  background-color: rgb(212 212 216 / 0.6);
}
.bg-zinc-300\\/65 {
  background-color: rgb(212 212 216 / 0.65);
}
.bg-zinc-300\\/70 {
  background-color: rgb(212 212 216 / 0.7);
}
.bg-zinc-300\\/75 {
  background-color: rgb(212 212 216 / 0.75);
}
.bg-zinc-300\\/80 {
  background-color: rgb(212 212 216 / 0.8);
}
.bg-zinc-300\\/85 {
  background-color: rgb(212 212 216 / 0.85);
}
.bg-zinc-300\\/90 {
  background-color: rgb(212 212 216 / 0.9);
}
.bg-zinc-300\\/95 {
  background-color: rgb(212 212 216 / 0.95);
}
.bg-zinc-400 {
  --tw-bg-opacity: 1;
  background-color: rgb(161 161 170 / var(--tw-bg-opacity));
}
.bg-zinc-400\\/0 {
  background-color: rgb(161 161 170 / 0);
}
.bg-zinc-400\\/10 {
  background-color: rgb(161 161 170 / 0.1);
}
.bg-zinc-400\\/100 {
  background-color: rgb(161 161 170 / 1);
}
.bg-zinc-400\\/15 {
  background-color: rgb(161 161 170 / 0.15);
}
.bg-zinc-400\\/20 {
  background-color: rgb(161 161 170 / 0.2);
}
.bg-zinc-400\\/25 {
  background-color: rgb(161 161 170 / 0.25);
}
.bg-zinc-400\\/30 {
  background-color: rgb(161 161 170 / 0.3);
}
.bg-zinc-400\\/35 {
  background-color: rgb(161 161 170 / 0.35);
}
.bg-zinc-400\\/40 {
  background-color: rgb(161 161 170 / 0.4);
}
.bg-zinc-400\\/45 {
  background-color: rgb(161 161 170 / 0.45);
}
.bg-zinc-400\\/5 {
  background-color: rgb(161 161 170 / 0.05);
}
.bg-zinc-400\\/50 {
  background-color: rgb(161 161 170 / 0.5);
}
.bg-zinc-400\\/55 {
  background-color: rgb(161 161 170 / 0.55);
}
.bg-zinc-400\\/60 {
  background-color: rgb(161 161 170 / 0.6);
}
.bg-zinc-400\\/65 {
  background-color: rgb(161 161 170 / 0.65);
}
.bg-zinc-400\\/70 {
  background-color: rgb(161 161 170 / 0.7);
}
.bg-zinc-400\\/75 {
  background-color: rgb(161 161 170 / 0.75);
}
.bg-zinc-400\\/80 {
  background-color: rgb(161 161 170 / 0.8);
}
.bg-zinc-400\\/85 {
  background-color: rgb(161 161 170 / 0.85);
}
.bg-zinc-400\\/90 {
  background-color: rgb(161 161 170 / 0.9);
}
.bg-zinc-400\\/95 {
  background-color: rgb(161 161 170 / 0.95);
}
.bg-zinc-50 {
  --tw-bg-opacity: 1;
  background-color: rgb(250 250 250 / var(--tw-bg-opacity));
}
.bg-zinc-50\\/0 {
  background-color: rgb(250 250 250 / 0);
}
.bg-zinc-50\\/10 {
  background-color: rgb(250 250 250 / 0.1);
}
.bg-zinc-50\\/100 {
  background-color: rgb(250 250 250 / 1);
}
.bg-zinc-50\\/15 {
  background-color: rgb(250 250 250 / 0.15);
}
.bg-zinc-50\\/20 {
  background-color: rgb(250 250 250 / 0.2);
}
.bg-zinc-50\\/25 {
  background-color: rgb(250 250 250 / 0.25);
}
.bg-zinc-50\\/30 {
  background-color: rgb(250 250 250 / 0.3);
}
.bg-zinc-50\\/35 {
  background-color: rgb(250 250 250 / 0.35);
}
.bg-zinc-50\\/40 {
  background-color: rgb(250 250 250 / 0.4);
}
.bg-zinc-50\\/45 {
  background-color: rgb(250 250 250 / 0.45);
}
.bg-zinc-50\\/5 {
  background-color: rgb(250 250 250 / 0.05);
}
.bg-zinc-50\\/50 {
  background-color: rgb(250 250 250 / 0.5);
}
.bg-zinc-50\\/55 {
  background-color: rgb(250 250 250 / 0.55);
}
.bg-zinc-50\\/60 {
  background-color: rgb(250 250 250 / 0.6);
}
.bg-zinc-50\\/65 {
  background-color: rgb(250 250 250 / 0.65);
}
.bg-zinc-50\\/70 {
  background-color: rgb(250 250 250 / 0.7);
}
.bg-zinc-50\\/75 {
  background-color: rgb(250 250 250 / 0.75);
}
.bg-zinc-50\\/80 {
  background-color: rgb(250 250 250 / 0.8);
}
.bg-zinc-50\\/85 {
  background-color: rgb(250 250 250 / 0.85);
}
.bg-zinc-50\\/90 {
  background-color: rgb(250 250 250 / 0.9);
}
.bg-zinc-50\\/95 {
  background-color: rgb(250 250 250 / 0.95);
}
.bg-zinc-500 {
  --tw-bg-opacity: 1;
  background-color: rgb(113 113 122 / var(--tw-bg-opacity));
}
.bg-zinc-500\\/0 {
  background-color: rgb(113 113 122 / 0);
}
.bg-zinc-500\\/10 {
  background-color: rgb(113 113 122 / 0.1);
}
.bg-zinc-500\\/100 {
  background-color: rgb(113 113 122 / 1);
}
.bg-zinc-500\\/15 {
  background-color: rgb(113 113 122 / 0.15);
}
.bg-zinc-500\\/20 {
  background-color: rgb(113 113 122 / 0.2);
}
.bg-zinc-500\\/25 {
  background-color: rgb(113 113 122 / 0.25);
}
.bg-zinc-500\\/30 {
  background-color: rgb(113 113 122 / 0.3);
}
.bg-zinc-500\\/35 {
  background-color: rgb(113 113 122 / 0.35);
}
.bg-zinc-500\\/40 {
  background-color: rgb(113 113 122 / 0.4);
}
.bg-zinc-500\\/45 {
  background-color: rgb(113 113 122 / 0.45);
}
.bg-zinc-500\\/5 {
  background-color: rgb(113 113 122 / 0.05);
}
.bg-zinc-500\\/50 {
  background-color: rgb(113 113 122 / 0.5);
}
.bg-zinc-500\\/55 {
  background-color: rgb(113 113 122 / 0.55);
}
.bg-zinc-500\\/60 {
  background-color: rgb(113 113 122 / 0.6);
}
.bg-zinc-500\\/65 {
  background-color: rgb(113 113 122 / 0.65);
}
.bg-zinc-500\\/70 {
  background-color: rgb(113 113 122 / 0.7);
}
.bg-zinc-500\\/75 {
  background-color: rgb(113 113 122 / 0.75);
}
.bg-zinc-500\\/80 {
  background-color: rgb(113 113 122 / 0.8);
}
.bg-zinc-500\\/85 {
  background-color: rgb(113 113 122 / 0.85);
}
.bg-zinc-500\\/90 {
  background-color: rgb(113 113 122 / 0.9);
}
.bg-zinc-500\\/95 {
  background-color: rgb(113 113 122 / 0.95);
}
.bg-zinc-600 {
  --tw-bg-opacity: 1;
  background-color: rgb(82 82 91 / var(--tw-bg-opacity));
}
.bg-zinc-600\\/0 {
  background-color: rgb(82 82 91 / 0);
}
.bg-zinc-600\\/10 {
  background-color: rgb(82 82 91 / 0.1);
}
.bg-zinc-600\\/100 {
  background-color: rgb(82 82 91 / 1);
}
.bg-zinc-600\\/15 {
  background-color: rgb(82 82 91 / 0.15);
}
.bg-zinc-600\\/20 {
  background-color: rgb(82 82 91 / 0.2);
}
.bg-zinc-600\\/25 {
  background-color: rgb(82 82 91 / 0.25);
}
.bg-zinc-600\\/30 {
  background-color: rgb(82 82 91 / 0.3);
}
.bg-zinc-600\\/35 {
  background-color: rgb(82 82 91 / 0.35);
}
.bg-zinc-600\\/40 {
  background-color: rgb(82 82 91 / 0.4);
}
.bg-zinc-600\\/45 {
  background-color: rgb(82 82 91 / 0.45);
}
.bg-zinc-600\\/5 {
  background-color: rgb(82 82 91 / 0.05);
}
.bg-zinc-600\\/50 {
  background-color: rgb(82 82 91 / 0.5);
}
.bg-zinc-600\\/55 {
  background-color: rgb(82 82 91 / 0.55);
}
.bg-zinc-600\\/60 {
  background-color: rgb(82 82 91 / 0.6);
}
.bg-zinc-600\\/65 {
  background-color: rgb(82 82 91 / 0.65);
}
.bg-zinc-600\\/70 {
  background-color: rgb(82 82 91 / 0.7);
}
.bg-zinc-600\\/75 {
  background-color: rgb(82 82 91 / 0.75);
}
.bg-zinc-600\\/80 {
  background-color: rgb(82 82 91 / 0.8);
}
.bg-zinc-600\\/85 {
  background-color: rgb(82 82 91 / 0.85);
}
.bg-zinc-600\\/90 {
  background-color: rgb(82 82 91 / 0.9);
}
.bg-zinc-600\\/95 {
  background-color: rgb(82 82 91 / 0.95);
}
.bg-zinc-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(63 63 70 / var(--tw-bg-opacity));
}
.bg-zinc-700\\/0 {
  background-color: rgb(63 63 70 / 0);
}
.bg-zinc-700\\/10 {
  background-color: rgb(63 63 70 / 0.1);
}
.bg-zinc-700\\/100 {
  background-color: rgb(63 63 70 / 1);
}
.bg-zinc-700\\/15 {
  background-color: rgb(63 63 70 / 0.15);
}
.bg-zinc-700\\/20 {
  background-color: rgb(63 63 70 / 0.2);
}
.bg-zinc-700\\/25 {
  background-color: rgb(63 63 70 / 0.25);
}
.bg-zinc-700\\/30 {
  background-color: rgb(63 63 70 / 0.3);
}
.bg-zinc-700\\/35 {
  background-color: rgb(63 63 70 / 0.35);
}
.bg-zinc-700\\/40 {
  background-color: rgb(63 63 70 / 0.4);
}
.bg-zinc-700\\/45 {
  background-color: rgb(63 63 70 / 0.45);
}
.bg-zinc-700\\/5 {
  background-color: rgb(63 63 70 / 0.05);
}
.bg-zinc-700\\/50 {
  background-color: rgb(63 63 70 / 0.5);
}
.bg-zinc-700\\/55 {
  background-color: rgb(63 63 70 / 0.55);
}
.bg-zinc-700\\/60 {
  background-color: rgb(63 63 70 / 0.6);
}
.bg-zinc-700\\/65 {
  background-color: rgb(63 63 70 / 0.65);
}
.bg-zinc-700\\/70 {
  background-color: rgb(63 63 70 / 0.7);
}
.bg-zinc-700\\/75 {
  background-color: rgb(63 63 70 / 0.75);
}
.bg-zinc-700\\/80 {
  background-color: rgb(63 63 70 / 0.8);
}
.bg-zinc-700\\/85 {
  background-color: rgb(63 63 70 / 0.85);
}
.bg-zinc-700\\/90 {
  background-color: rgb(63 63 70 / 0.9);
}
.bg-zinc-700\\/95 {
  background-color: rgb(63 63 70 / 0.95);
}
.bg-zinc-800 {
  --tw-bg-opacity: 1;
  background-color: rgb(39 39 42 / var(--tw-bg-opacity));
}
.bg-zinc-800\\/0 {
  background-color: rgb(39 39 42 / 0);
}
.bg-zinc-800\\/10 {
  background-color: rgb(39 39 42 / 0.1);
}
.bg-zinc-800\\/100 {
  background-color: rgb(39 39 42 / 1);
}
.bg-zinc-800\\/15 {
  background-color: rgb(39 39 42 / 0.15);
}
.bg-zinc-800\\/20 {
  background-color: rgb(39 39 42 / 0.2);
}
.bg-zinc-800\\/25 {
  background-color: rgb(39 39 42 / 0.25);
}
.bg-zinc-800\\/30 {
  background-color: rgb(39 39 42 / 0.3);
}
.bg-zinc-800\\/35 {
  background-color: rgb(39 39 42 / 0.35);
}
.bg-zinc-800\\/40 {
  background-color: rgb(39 39 42 / 0.4);
}
.bg-zinc-800\\/45 {
  background-color: rgb(39 39 42 / 0.45);
}
.bg-zinc-800\\/5 {
  background-color: rgb(39 39 42 / 0.05);
}
.bg-zinc-800\\/50 {
  background-color: rgb(39 39 42 / 0.5);
}
.bg-zinc-800\\/55 {
  background-color: rgb(39 39 42 / 0.55);
}
.bg-zinc-800\\/60 {
  background-color: rgb(39 39 42 / 0.6);
}
.bg-zinc-800\\/65 {
  background-color: rgb(39 39 42 / 0.65);
}
.bg-zinc-800\\/70 {
  background-color: rgb(39 39 42 / 0.7);
}
.bg-zinc-800\\/75 {
  background-color: rgb(39 39 42 / 0.75);
}
.bg-zinc-800\\/80 {
  background-color: rgb(39 39 42 / 0.8);
}
.bg-zinc-800\\/85 {
  background-color: rgb(39 39 42 / 0.85);
}
.bg-zinc-800\\/90 {
  background-color: rgb(39 39 42 / 0.9);
}
.bg-zinc-800\\/95 {
  background-color: rgb(39 39 42 / 0.95);
}
.bg-zinc-900 {
  --tw-bg-opacity: 1;
  background-color: rgb(24 24 27 / var(--tw-bg-opacity));
}
.bg-zinc-900\\/0 {
  background-color: rgb(24 24 27 / 0);
}
.bg-zinc-900\\/10 {
  background-color: rgb(24 24 27 / 0.1);
}
.bg-zinc-900\\/100 {
  background-color: rgb(24 24 27 / 1);
}
.bg-zinc-900\\/15 {
  background-color: rgb(24 24 27 / 0.15);
}
.bg-zinc-900\\/20 {
  background-color: rgb(24 24 27 / 0.2);
}
.bg-zinc-900\\/25 {
  background-color: rgb(24 24 27 / 0.25);
}
.bg-zinc-900\\/30 {
  background-color: rgb(24 24 27 / 0.3);
}
.bg-zinc-900\\/35 {
  background-color: rgb(24 24 27 / 0.35);
}
.bg-zinc-900\\/40 {
  background-color: rgb(24 24 27 / 0.4);
}
.bg-zinc-900\\/45 {
  background-color: rgb(24 24 27 / 0.45);
}
.bg-zinc-900\\/5 {
  background-color: rgb(24 24 27 / 0.05);
}
.bg-zinc-900\\/50 {
  background-color: rgb(24 24 27 / 0.5);
}
.bg-zinc-900\\/55 {
  background-color: rgb(24 24 27 / 0.55);
}
.bg-zinc-900\\/60 {
  background-color: rgb(24 24 27 / 0.6);
}
.bg-zinc-900\\/65 {
  background-color: rgb(24 24 27 / 0.65);
}
.bg-zinc-900\\/70 {
  background-color: rgb(24 24 27 / 0.7);
}
.bg-zinc-900\\/75 {
  background-color: rgb(24 24 27 / 0.75);
}
.bg-zinc-900\\/80 {
  background-color: rgb(24 24 27 / 0.8);
}
.bg-zinc-900\\/85 {
  background-color: rgb(24 24 27 / 0.85);
}
.bg-zinc-900\\/90 {
  background-color: rgb(24 24 27 / 0.9);
}
.bg-zinc-900\\/95 {
  background-color: rgb(24 24 27 / 0.95);
}
.bg-zinc-950 {
  --tw-bg-opacity: 1;
  background-color: rgb(9 9 11 / var(--tw-bg-opacity));
}
.bg-zinc-950\\/0 {
  background-color: rgb(9 9 11 / 0);
}
.bg-zinc-950\\/10 {
  background-color: rgb(9 9 11 / 0.1);
}
.bg-zinc-950\\/100 {
  background-color: rgb(9 9 11 / 1);
}
.bg-zinc-950\\/15 {
  background-color: rgb(9 9 11 / 0.15);
}
.bg-zinc-950\\/20 {
  background-color: rgb(9 9 11 / 0.2);
}
.bg-zinc-950\\/25 {
  background-color: rgb(9 9 11 / 0.25);
}
.bg-zinc-950\\/30 {
  background-color: rgb(9 9 11 / 0.3);
}
.bg-zinc-950\\/35 {
  background-color: rgb(9 9 11 / 0.35);
}
.bg-zinc-950\\/40 {
  background-color: rgb(9 9 11 / 0.4);
}
.bg-zinc-950\\/45 {
  background-color: rgb(9 9 11 / 0.45);
}
.bg-zinc-950\\/5 {
  background-color: rgb(9 9 11 / 0.05);
}
.bg-zinc-950\\/50 {
  background-color: rgb(9 9 11 / 0.5);
}
.bg-zinc-950\\/55 {
  background-color: rgb(9 9 11 / 0.55);
}
.bg-zinc-950\\/60 {
  background-color: rgb(9 9 11 / 0.6);
}
.bg-zinc-950\\/65 {
  background-color: rgb(9 9 11 / 0.65);
}
.bg-zinc-950\\/70 {
  background-color: rgb(9 9 11 / 0.7);
}
.bg-zinc-950\\/75 {
  background-color: rgb(9 9 11 / 0.75);
}
.bg-zinc-950\\/80 {
  background-color: rgb(9 9 11 / 0.8);
}
.bg-zinc-950\\/85 {
  background-color: rgb(9 9 11 / 0.85);
}
.bg-zinc-950\\/90 {
  background-color: rgb(9 9 11 / 0.9);
}
.bg-zinc-950\\/95 {
  background-color: rgb(9 9 11 / 0.95);
}
.bg-opacity-0 {
  --tw-bg-opacity: 0 ;
}
.bg-opacity-10 {
  --tw-bg-opacity: 0.1 ;
}
.bg-opacity-100 {
  --tw-bg-opacity: 1 ;
}
.bg-opacity-15 {
  --tw-bg-opacity: 0.15 ;
}
.bg-opacity-20 {
  --tw-bg-opacity: 0.2 ;
}
.bg-opacity-25 {
  --tw-bg-opacity: 0.25 ;
}
.bg-opacity-30 {
  --tw-bg-opacity: 0.3 ;
}
.bg-opacity-35 {
  --tw-bg-opacity: 0.35 ;
}
.bg-opacity-40 {
  --tw-bg-opacity: 0.4 ;
}
.bg-opacity-45 {
  --tw-bg-opacity: 0.45 ;
}
.bg-opacity-5 {
  --tw-bg-opacity: 0.05 ;
}
.bg-opacity-50 {
  --tw-bg-opacity: 0.5 ;
}
.bg-opacity-55 {
  --tw-bg-opacity: 0.55 ;
}
.bg-opacity-60 {
  --tw-bg-opacity: 0.6 ;
}
.bg-opacity-65 {
  --tw-bg-opacity: 0.65 ;
}
.bg-opacity-70 {
  --tw-bg-opacity: 0.7 ;
}
.bg-opacity-75 {
  --tw-bg-opacity: 0.75 ;
}
.bg-opacity-80 {
  --tw-bg-opacity: 0.8 ;
}
.bg-opacity-85 {
  --tw-bg-opacity: 0.85 ;
}
.bg-opacity-90 {
  --tw-bg-opacity: 0.9 ;
}
.bg-opacity-95 {
  --tw-bg-opacity: 0.95 ;
}
.bg-gradient-to-b {
  background-image: linear-gradient(to bottom, var(--tw-gradient-stops));
}
.bg-gradient-to-bl {
  background-image: linear-gradient(to bottom left, var(--tw-gradient-stops));
}
.bg-gradient-to-br {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}
.bg-gradient-to-l {
  background-image: linear-gradient(to left, var(--tw-gradient-stops));
}
.bg-gradient-to-r {
  background-image: linear-gradient(to right, var(--tw-gradient-stops));
}
.bg-gradient-to-t {
  background-image: linear-gradient(to top, var(--tw-gradient-stops));
}
.bg-gradient-to-tl {
  background-image: linear-gradient(to top left, var(--tw-gradient-stops));
}
.bg-gradient-to-tr {
  background-image: linear-gradient(to top right, var(--tw-gradient-stops));
}
.bg-none {
  background-image: none;
}
.bg-auto {
  background-size: auto;
}
.bg-contain {
  background-size: contain;
}
.bg-cover {
  background-size: cover;
}
.bg-fixed {
  background-attachment: fixed;
}
.bg-local {
  background-attachment: local;
}
.bg-scroll {
  background-attachment: scroll;
}
.bg-clip-border {
  background-clip: border-box;
}
.bg-clip-padding {
  background-clip: padding-box;
}
.bg-clip-content {
  background-clip: content-box;
}
.bg-clip-text {
  -webkit-background-clip: text;
  background-clip: text;
}
.bg-bottom {
  background-position: bottom;
}
.bg-center {
  background-position: center;
}
.bg-left {
  background-position: left;
}
.bg-left-bottom {
  background-position: left bottom;
}
.bg-left-top {
  background-position: left top;
}
.bg-right {
  background-position: right;
}
.bg-right-bottom {
  background-position: right bottom;
}
.bg-right-top {
  background-position: right top;
}
.bg-top {
  background-position: top;
}
.bg-repeat {
  background-repeat: repeat;
}
.bg-no-repeat {
  background-repeat: no-repeat;
}
.bg-repeat-x {
  background-repeat: repeat-x;
}
.bg-repeat-y {
  background-repeat: repeat-y;
}
.bg-repeat-round {
  background-repeat: round;
}
.bg-repeat-space {
  background-repeat: space;
}
.bg-origin-border {
  background-origin: border-box;
}
.bg-origin-padding {
  background-origin: padding-box;
}
.bg-origin-content {
  background-origin: content-box;
}
.p-10 {
  padding: 40px;
}
.p-2 {
  padding: 8px;
}
.p-3 {
  padding: 12px;
}
.p-4 {
  padding: 16px;
}
.px-0 {
  padding-left: 0px;
  padding-right: 0px;
}
.px-0\\.5 {
  padding-left: 2px;
  padding-right: 2px;
}
.px-1 {
  padding-left: 4px;
  padding-right: 4px;
}
.px-1\\.5 {
  padding-left: 6px;
  padding-right: 6px;
}
.px-2 {
  padding-left: 8px;
  padding-right: 8px;
}
.px-2\\.5 {
  padding-left: 10px;
  padding-right: 10px;
}
.px-3 {
  padding-left: 12px;
  padding-right: 12px;
}
.px-4 {
  padding-left: 16px;
  padding-right: 16px;
}
.py-0 {
  padding-top: 0px;
  padding-bottom: 0px;
}
.py-0\\.5 {
  padding-top: 2px;
  padding-bottom: 2px;
}
.py-1 {
  padding-top: 4px;
  padding-bottom: 4px;
}
.py-1\\.5 {
  padding-top: 6px;
  padding-bottom: 6px;
}
.py-2 {
  padding-top: 8px;
  padding-bottom: 8px;
}
.pb-2 {
  padding-bottom: 8px;
}
.pl-4 {
  padding-left: 16px;
}
.pr-2 {
  padding-right: 8px;
}
.pt-2 {
  padding-top: 8px;
}
.text-\\[13px\\] {
  font-size: 13px;
}
.text-base {
  font-size: 14px;
}
.text-lg {
  font-size: 16px;
}
.text-sm {
  font-size: 12px;
}
.text-xl {
  font-size: 18px;
}
.font-bold {
  font-weight: 700;
}
.font-normal {
  font-weight: 400;
}
.font-semibold {
  font-weight: 600;
}
.italic {
  font-style: italic;
}
.text-black {
  --tw-text-opacity: 1;
  color: rgb(0 0 0 / var(--tw-text-opacity));
}
.text-blue-500 {
  --tw-text-opacity: 1;
  color: rgb(59 130 246 / var(--tw-text-opacity));
}
.text-gray-500 {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity));
}
.text-gray-600 {
  --tw-text-opacity: 1;
  color: rgb(75 85 99 / var(--tw-text-opacity));
}
.text-gray-700 {
  --tw-text-opacity: 1;
  color: rgb(55 65 81 / var(--tw-text-opacity));
}
.text-violet-700 {
  --tw-text-opacity: 1;
  color: rgb(109 40 217 / var(--tw-text-opacity));
}
.text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.underline {
  text-decoration-line: underline;
}
.opacity-0 {
  opacity: 0;
}
.opacity-100 {
  opacity: 1;
}
.bg-blend-normal {
  background-blend-mode: normal;
}
.bg-blend-multiply {
  background-blend-mode: multiply;
}
.bg-blend-screen {
  background-blend-mode: screen;
}
.bg-blend-overlay {
  background-blend-mode: overlay;
}
.bg-blend-darken {
  background-blend-mode: darken;
}
.bg-blend-lighten {
  background-blend-mode: lighten;
}
.bg-blend-color-dodge {
  background-blend-mode: color-dodge;
}
.bg-blend-color-burn {
  background-blend-mode: color-burn;
}
.bg-blend-hard-light {
  background-blend-mode: hard-light;
}
.bg-blend-soft-light {
  background-blend-mode: soft-light;
}
.bg-blend-difference {
  background-blend-mode: difference;
}
.bg-blend-exclusion {
  background-blend-mode: exclusion;
}
.bg-blend-hue {
  background-blend-mode: hue;
}
.bg-blend-saturation {
  background-blend-mode: saturation;
}
.bg-blend-color {
  background-blend-mode: color;
}
.bg-blend-luminosity {
  background-blend-mode: luminosity;
}
.shadow-lg {
  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
  box-shadow:
    var(--tw-ring-offset-shadow, 0 0 #0000),
    var(--tw-ring-shadow, 0 0 #0000),
    var(--tw-shadow);
}
.outline-none {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
.blur {
  --tw-blur: blur(8px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
.transition {
  transition-property:
    color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke,
    opacity,
    box-shadow,
    transform,
    filter,
    -webkit-backdrop-filter;
  transition-property:
    color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke,
    opacity,
    box-shadow,
    transform,
    filter,
    backdrop-filter;
  transition-property:
    color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke,
    opacity,
    box-shadow,
    transform,
    filter,
    backdrop-filter,
    -webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.transition-all {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.transition-colors {
  transition-property:
    color,
    background-color,
    border-color,
    text-decoration-color,
    fill,
    stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.transition-opacity {
  transition-property: opacity;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
.duration-500 {
  transition-duration: 500ms;
}
.ease-out {
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}
.\\@container\\/main {
  container-type: inline-size;
  container-name: main;
}
.placeholder\\:text-gray-400::-moz-placeholder {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity));
}
.placeholder\\:text-gray-400::placeholder {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity));
}
.hover\\:bg-gray-100:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(243 244 246 / var(--tw-bg-opacity));
}
.hover\\:bg-gray-350:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(182 188 197 / var(--tw-bg-opacity));
}
.hover\\:bg-gray-400:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(156 163 175 / var(--tw-bg-opacity));
}
.hover\\:bg-gray-500:hover {
  --tw-bg-opacity: 1;
  background-color: rgb(107 114 128 / var(--tw-bg-opacity));
}
.hover\\:text-black:hover {
  --tw-text-opacity: 1;
  color: rgb(0 0 0 / var(--tw-text-opacity));
}
.focus\\:border-gray-400:focus {
  --tw-border-opacity: 1;
  border-color: rgb(156 163 175 / var(--tw-border-opacity));
}
.focus\\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
.group:hover .group-hover\\:opacity-100 {
  opacity: 1;
}
@container main (min-width: 420px) {
  .\\@\\[420px\\]\\/main\\:w-\\[376px\\] {
    width: 376px;
  }
}
@container main (min-width: 470px) {
  .\\@\\[470px\\]\\/main\\:left-auto {
    left: auto;
  }
  .\\@\\[470px\\]\\/main\\:right-3 {
    right: 12px;
  }
  .\\@\\[470px\\]\\/main\\:w-full {
    width: 100%;
  }
}
.dark\\:border-gray-600:where(.dark, .dark *) {
  --tw-border-opacity: 1;
  border-color: rgb(75 85 99 / var(--tw-border-opacity));
}
.dark\\:border-gray-700:where(.dark, .dark *) {
  --tw-border-opacity: 1;
  border-color: rgb(55 65 81 / var(--tw-border-opacity));
}
.dark\\:border-gray-900:where(.dark, .dark *) {
  --tw-border-opacity: 1;
  border-color: rgb(17 24 39 / var(--tw-border-opacity));
}
.dark\\:bg-\\[\\#0d1117\\]:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(13 17 23 / var(--tw-bg-opacity));
}
.dark\\:bg-black:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}
.dark\\:bg-gray-600:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(75 85 99 / var(--tw-bg-opacity));
}
.dark\\:bg-gray-700:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}
.dark\\:bg-gray-800:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
.dark\\:bg-gray-900:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(17 24 39 / var(--tw-bg-opacity));
}
.dark\\:bg-gray-950:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(3 7 18 / var(--tw-bg-opacity));
}
.dark\\:bg-green-400:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(74 222 128 / var(--tw-bg-opacity));
}
.dark\\:bg-white:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}
.dark\\:text-gray-200:where(.dark, .dark *) {
  --tw-text-opacity: 1;
  color: rgb(229 231 235 / var(--tw-text-opacity));
}
.dark\\:text-gray-400:where(.dark, .dark *) {
  --tw-text-opacity: 1;
  color: rgb(156 163 175 / var(--tw-text-opacity));
}
.dark\\:text-violet-400:where(.dark, .dark *) {
  --tw-text-opacity: 1;
  color: rgb(167 139 250 / var(--tw-text-opacity));
}
.dark\\:text-white:where(.dark, .dark *) {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.dark\\:placeholder\\:text-gray-500:where(.dark, .dark *)::-moz-placeholder {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity));
}
.dark\\:placeholder\\:text-gray-500:where(.dark, .dark *)::placeholder {
  --tw-text-opacity: 1;
  color: rgb(107 114 128 / var(--tw-text-opacity));
}
.dark\\:hover\\:bg-\\[\\#101722\\]:hover:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(16 23 34 / var(--tw-bg-opacity));
}
.dark\\:hover\\:bg-gray-600:hover:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(75 85 99 / var(--tw-bg-opacity));
}
.dark\\:hover\\:bg-gray-700:hover:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}
.dark\\:hover\\:bg-gray-800:hover:where(.dark, .dark *) {
  --tw-bg-opacity: 1;
  background-color: rgb(31 41 55 / var(--tw-bg-opacity));
}
.dark\\:hover\\:text-white:hover:where(.dark, .dark *) {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
.dark\\:focus\\:border-gray-500:focus:where(.dark, .dark *) {
  --tw-border-opacity: 1;
  border-color: rgb(107 114 128 / var(--tw-border-opacity));
}
`;
    shadowRoot.appendChild(styleEl);
    await new Promise((resolve) => setTimeout(resolve, 0));
    this.shadowElRect = this.shadowEl.getBoundingClientRect();
  }
  async onClose() {
    var _a;
    window.onerror = null;
    (_a = this.root) == null ? void 0 : _a.unmount();
  }
};
var InfraNodusGraphView = _InfraNodusGraphView;
InfraNodusGraphView.ribbonIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon dice"><path d="M19 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V5C21 3.89543 20.1046 3 19 3Z"></path><path d="M17 16C17 16.5523 16.5523 17 16 17C15.4477 17 15 16.5523 15 16C15 15.4477 15.4477 15 16 15C16.5523 15 17 15.4477 17 16Z"></path><path d="M13 12C13 12.5523 12.5523 13 12 13C11.4477 13 11 12.5523 11 12C11 11.4477 11.4477 11 12 11C12.5523 11 13 11.4477 13 12Z"></path><path d="M9 8C9 8.55228 8.55228 9 8 9C7.44772 9 7 8.55228 7 8C7 7.44772 7.44772 7 8 7C8.55228 7 9 7.44772 9 8Z"></path></svg>`;

// src/graph_view/lib/openGraphNewTab.ts
var import_obsidian16 = require("obsidian");
var currentPlatform7 = import_obsidian16.Platform.isMobileApp || import_obsidian16.Platform.isMobile ? "mobile" : "desktop";
async function focusOrOpenGraphTab(params) {
  let leaf;
  new import_obsidian16.Notice("Open: " + SETTINGS.MOBILE_OPEN_GRAPH_IN);
  params.app.workspace.iterateAllLeaves((openLeaf) => {
    if (!(openLeaf.view instanceof InfraNodusGraphView))
      return;
    if (currentPlatform7 === "mobile") {
      const isInMainPane = openLeaf.getRoot() === params.app.workspace.rootSplit;
      if (SETTINGS.MOBILE_OPEN_GRAPH_IN === "Side view") {
        if (isInMainPane)
          return;
      }
      if (SETTINGS.MOBILE_OPEN_GRAPH_IN === "New tab") {
        if (!isInMainPane)
          return;
      }
    }
    leaf = openLeaf;
  });
  if (!leaf) {
    leaf = params.app.workspace.getLeaf(true);
    leaf.setViewState({ type: INFRANODUS_GRAPH_VIEW_TYPE });
  }
  params.app.workspace.setActiveLeaf(leaf, { focus: true });
  params.app.workspace.revealLeaf(leaf);
  await new Promise((resolve) => setTimeout(resolve, 250));
  const view = leaf.view;
  if (view)
    await view.reloadGraph(
      {
        leaf,
        filePath: params.filePath,
        contentString: params.contentString,
        sourcePath: params.sourcePath
      },
      true
    );
  if (currentPlatform7 === "mobile") {
    if (SETTINGS.MOBILE_OPEN_GRAPH_IN === "Side view") {
      view.setTabTitle("InfraNodus Graph");
    } else if (SETTINGS.MOBILE_OPEN_GRAPH_IN === "New tab") {
      const file = params.filePath ? params.app.vault.getAbstractFileByPath(params.filePath) : { name: "" };
      let tabTitle = "InfraNodus Graph";
      if (file == null ? void 0 : file.name) {
        tabTitle = file.name;
      } else if (params.sourcePath) {
        tabTitle = params.sourcePath;
      }
      view.setTabTitle(tabTitle);
    }
  }
}

// src/utils/searchResults.ts
var import_obsidian17 = require("obsidian");
async function extractObsidianSearchResults(app2) {
  var _a;
  try {
    let results = [];
    const searchLeaves = this.app.workspace.getLeavesOfType("search");
    if (searchLeaves.length === 0) {
      new import_obsidian17.Notice("No search results were found.");
      return;
    }
    const searchView = (_a = app2.workspace.getLeavesOfType("search")[0]) == null ? void 0 : _a.view;
    if (searchView === void 0) {
      new import_obsidian17.Notice("The core search plugin is not enabled");
      return;
    }
    for (const leaf of searchLeaves) {
      let extractText = function(containerEl) {
        const texts = [];
        containerEl.querySelectorAll("svg, .search-result-hover-button").forEach((el) => {
          el.remove();
        });
        const matchDivs = containerEl.querySelectorAll(
          "div.search-result-file-match"
        );
        matchDivs.forEach((matchDiv) => {
          var _a2;
          const internalLinks = matchDiv.querySelectorAll("a.internal-link");
          internalLinks.forEach((link) => {
            var _a3;
            const textContent2 = link.textContent || "";
            const replacementText = `[[${textContent2}]]`;
            const textNode = document.createTextNode(replacementText);
            (_a3 = link.parentNode) == null ? void 0 : _a3.replaceChild(textNode, link);
          });
          const textContent = ((_a2 = matchDiv.textContent) == null ? void 0 : _a2.trim()) || "";
          if (textContent) {
            texts.push(textContent);
          }
        });
        return texts;
      };
      const searchView2 = leaf.view;
      const searchQuery = searchView2.getQuery();
      const searchResultItems = searchView2.dom.getFiles();
      if (!searchResultItems || searchResultItems.size === 0) {
        new import_obsidian17.Notice("No search results were found.");
        continue;
      }
      const searchSnippets = searchView2.dom.resultDomLookup;
      const filePathToSearchSnippet = {};
      for (const [key, value] of searchSnippets.entries()) {
        const resultFilePath = key.path;
        filePathToSearchSnippet[resultFilePath] = [];
        const containerEl = value.containerEl;
        const textSnippetsExtracted = extractText(containerEl) || [];
        textSnippetsExtracted.forEach((snippet) => {
          filePathToSearchSnippet[resultFilePath].push(snippet);
        });
      }
      for (const searchResultItem of searchResultItems) {
        const path = searchResultItem.path;
        const file = this.app.vault.getAbstractFileByPath(path);
        if (file instanceof import_obsidian17.TFile) {
          const content = await this.app.vault.cachedRead(file);
          const snippetsFound = filePathToSearchSnippet[path];
          results.push({
            file,
            content,
            searchQuery,
            snippetsFound
          });
        }
      }
      return results;
    }
  } catch (error) {
    console.error("Error extracting search results:", error);
    return [];
  }
  function handleSearchResults(results) {
    results.forEach((result) => {
      console.log("Matched File:", result.file.path);
    });
    return results;
  }
}

// src/main.ts
var LEAF_VIEW_BUTTON_CLASS = "infranodus-leaf-view-button";
var InfraNodusPlugin = class extends import_obsidian18.Plugin {
  constructor() {
    super(...arguments);
    this.settings = SETTINGS;
    // public globalThis = this;
    // public static plugin: InfraNodusPlugin;
    // set in variable instead of function to bind "this"
    // Settings save listener, is outside to be able to remove it on unload
    this.onSettingsSaveEvent = (async (event) => {
      const newSettings = event.detail;
      if (!newSettings) {
        document.dispatchEvent(new CustomEvent(EVENT_SETTINGS_SAVED));
        return;
      }
      if (!this.settings)
        this.settings = SETTINGS;
      await this.saveSettings(newSettings);
      const dispatchedStatus = document.dispatchEvent(
        new CustomEvent(EVENT_SETTINGS_SAVED)
      );
    }).bind(this);
    // async quickScrollRender(view: MarkdownView) {
    // 	const previewMode = view.getMode() === "preview";
    // 	const contentEl = previewMode
    // 		? view.previewMode.containerEl
    // 		: view.contentEl;
    // 	// Store the current scroll position
    // 	const originalScrollTop = contentEl.scrollTop;
    // 	// Scroll to the bottom instantly
    // 	contentEl.scrollTop = contentEl.scrollHeight;
    // 	// Wait a tiny bit for the render to trigger
    // 	await new Promise((resolve) => setTimeout(resolve, 50));
    // 	// Scroll back to the original position instantly
    // 	contentEl.scrollTop = originalScrollTop;
    // 	// Wait a bit more for any final rendering to complete
    // 	await new Promise((resolve) => setTimeout(resolve, 50));
    // }
    this.bookmarksLoaded = false;
    this.currentLeafViewed = "";
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new InfraNodusSettingTab(this.app, this));
    document.addEventListener(
      EVENT_SAVE_SETTINGS,
      this.onSettingsSaveEvent
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        var _a;
        if (((_a = leaf == null ? void 0 : leaf.view) == null ? void 0 : _a.getViewType()) === "bookmarks") {
          if (this.bookmarksLoaded)
            return;
          this.loadBookmarksContextMenu();
          this.bookmarksLoaded = true;
          this.app.workspace.off("active-leaf-change", () => {
          });
        }
      })
    );
    const currentPlatform8 = import_obsidian18.Platform.isMobileApp || import_obsidian18.Platform.isMobile ? "mobile" : "desktop";
    (0, import_obsidian18.addIcon)(
      "infranodus-icon",
      `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 128 128" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink">
<g><path style="opacity:0.899" fill="currentColor" d="M 127.5,26.5 C 127.5,30.1667 127.5,33.8333 127.5,37.5C 122.206,56.7764 109.539,65.4431 89.5,63.5C 87.7075,69.5442 85.7075,75.5442 83.5,81.5C 95.7823,92.6566 97.6156,105.323 89,119.5C 85.1134,123.354 80.6134,126.021 75.5,127.5C 71.8333,127.5 68.1667,127.5 64.5,127.5C 48.1828,120.516 43.0162,108.516 49,91.5C 55.2151,82.4192 63.8818,78.0859 75,78.5C 76.7784,72.4955 78.945,66.6622 81.5,61C 73.277,56.583 67.6103,49.9163 64.5,41C 61.5458,41.3157 58.5458,41.8157 55.5,42.5C 55.8696,58.2719 48.5363,68.4386 33.5,73C 16.049,75.1253 4.7157,67.9586 -0.5,51.5C -0.5,47.5 -0.5,43.5 -0.5,39.5C 7.22426,19.5245 21.2243,13.3578 41.5,21C 46.8015,24.2975 50.6348,28.7975 53,34.5C 55.7367,33.4396 58.57,32.6063 61.5,32C 63.6267,21.7553 68.6267,13.0886 76.5,6C 93.683,-3.39902 108.85,-0.89902 122,13.5C 124.349,17.7415 126.182,22.0748 127.5,26.5 Z M 89.5,9.5 C 103.594,7.62495 113.094,13.2916 118,26.5C 119.395,42.9504 111.895,52.6171 95.5,55.5C 76.099,51.6932 69.2656,40.3599 75,21.5C 78.5405,15.78 83.3739,11.78 89.5,9.5 Z M 24.5,26.5 C 39.479,26.9763 46.6456,34.643 46,49.5C 40.8709,63.5452 31.3709,67.7119 17.5,62C 7.9873,54.4205 6.15396,45.2539 12,34.5C 15.5789,30.724 19.7456,28.0573 24.5,26.5 Z M 65.5,88.5 C 79.4397,87.2736 85.9397,93.6069 85,107.5C 80.2071,117.652 72.7071,120.485 62.5,116C 55.1379,110.099 53.6379,102.932 58,94.5C 60.1141,91.8792 62.6141,89.8792 65.5,88.5 Z"/></g>
<g><path style="opacity:0.769" fill="currentColor" d="M 107.5,18.5 C 112.912,21.9 114.912,26.7334 113.5,33C 112.216,33.6838 111.049,33.5171 110,32.5C 108.978,28.5925 107.478,24.9259 105.5,21.5C 105.942,20.2613 106.609,19.2613 107.5,18.5 Z"/></g>
<g><path style="opacity:0.793" fill="currentColor" d="M 35.5,32.5 C 40.7318,35.6429 42.7318,40.3096 41.5,46.5C 39.8561,46.7135 38.3561,46.3802 37,45.5C 36.6628,41.836 35.4962,38.5027 33.5,35.5C 33.9424,34.2613 34.6091,33.2613 35.5,32.5 Z"/></g>
<g><path style="opacity:0.765" fill="currentColor" d="M 75.5,95.5 C 77.3904,95.2965 78.8904,95.9632 80,97.5C 81.7534,101.219 81.7534,104.886 80,108.5C 77.5237,110.063 76.0237,109.396 75.5,106.5C 75.9086,102.93 75.9086,99.2635 75.5,95.5 Z"/></g>
</svg>`
    );
    const ribbonIconEl = this.addRibbonIcon(
      "infranodus-icon",
      "InfraNodus Graph View",
      async (evt) => {
        var _a;
        const workspace = this.app.workspace;
        let currentlyOpenPanel = "file-explorer";
        const openViews = [];
        workspace.iterateAllLeaves((openLeaf) => {
          if (openLeaf.height == 0)
            return;
          const viewState = openLeaf.getViewState();
          const viewType = viewState.type;
          switch (viewType) {
            case "search":
            case "file-explorer":
            case "bookmarks":
              openViews.push(viewType);
              break;
            default:
              break;
          }
        });
        if (openViews.length == 1) {
          currentlyOpenPanel = openViews[0];
        }
        const leaf = this.app.workspace.getLeaf();
        let file = this.app.workspace.getActiveFile();
        const searchResults = await extractObsidianSearchResults(
          this.app
        );
        let searchQuery = "";
        const currentContent = searchResults == null ? void 0 : searchResults.map((result) => {
          searchQuery = result.searchQuery;
          return result.content;
        }).join("\n\n");
        if (!file) {
          workspace.iterateAllLeaves((openLeaf) => {
            if (file)
              return;
            const isMarkdownView = openLeaf.view instanceof import_obsidian18.MarkdownView;
            const isInMainPane = openLeaf.getRoot() === workspace.rootSplit;
            if (openLeaf.view instanceof import_obsidian18.FileView && isMarkdownView && isInMainPane) {
              file = openLeaf.view.file;
            }
          });
        }
        if (!file && currentlyOpenPanel == "file-explorer")
          return new import_obsidian18.Notice("No file to open graph for");
        const parent = file == null ? void 0 : file.parent;
        const filePath = parent ? parent.path : "/";
        if (currentlyOpenPanel == "file-explorer") {
          new import_obsidian18.Notice(
            "Generating a new InfraNodus graph for " + filePath
          );
        } else {
          new import_obsidian18.Notice(
            "Generating a new InfraNodus graph for the files found in the search results."
          );
        }
        await openGraphSideView(this.app);
        const currentLeaf = this.app.workspace.getLeavesOfType(
          INFRANODUS_GRAPH_VIEW_TYPE
        );
        const graphView = (_a = currentLeaf[0]) == null ? void 0 : _a.view;
        if (!graphView) {
          return;
        }
        switch (currentlyOpenPanel) {
          case "search":
            graphView.reloadGraph({
              leaf,
              contentString: currentContent,
              sourcePath: ` pages for search query: "${searchQuery}"`
            });
            break;
          default:
            graphView.reloadGraph({ leaf, filePath });
            break;
        }
      }
    );
    this.loadContextMenu();
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", async (leaf) => {
        var _a, _b, _c;
        const viewType = leaf == null ? void 0 : leaf.view.getViewType();
        if (viewType !== "empty" && viewType !== "markdown")
          return;
        const file = ((_a = leaf == null ? void 0 : leaf.view) != null ? _a : {}).file;
        if (!file)
          return;
        if ((file == null ? void 0 : file.path) == this.currentLeafViewed)
          return;
        const currentLeaf = this.app.workspace.getLeavesOfType(
          INFRANODUS_GRAPH_VIEW_TYPE
        );
        const sideView = (_b = currentLeaf[0]) == null ? void 0 : _b.view;
        if (!sideView)
          return;
        if (SETTINGS.RELOADING_GRAPH != "automatic")
          return;
        this.currentLeafViewed = file == null ? void 0 : file.path;
        sideView.reloadGraphWithBuffer({
          leaf: leaf != null ? leaf : void 0,
          filePath: (_c = file == null ? void 0 : file.path) != null ? _c : ""
        });
      })
    );
    this.registerView(INFRANODUS_GRAPH_VIEW_TYPE, (leaf) => {
      return new InfraNodusGraphView({ leaf });
    });
    setTimeout(() => {
      const element = document.getElementById(
        INFRANODUS_GRAPH_SIDE_VIEW_ID
      );
      if (!element)
        return;
      observerElementVisibility({
        element,
        onVisibilityChange: (visible) => {
          var _a;
          if (!visible)
            return;
          const currentLeaf = this.app.workspace.getLeavesOfType(
            INFRANODUS_GRAPH_VIEW_TYPE
          );
          const sideView = (_a = currentLeaf[0]) == null ? void 0 : _a.view;
          const filePath = sideView.lastFilePathWhileHidden;
          if (!filePath)
            return;
          if (sideView && filePath == sideView.filePath)
            return;
          if (!sideView)
            return;
          sideView.reloadGraphWithBuffer({ filePath });
        }
      });
    }, 250);
    this.app.workspace.onLayoutReady(() => {
      const leaves = this.app.workspace.getLeavesOfType(
        INFRANODUS_GRAPH_VIEW_TYPE
      );
      if (leaves.length === 0) {
        const leaf = this.app.workspace.getRightLeaf(false);
        leaf == null ? void 0 : leaf.setViewState({ type: INFRANODUS_GRAPH_VIEW_TYPE });
      }
      setTimeout(() => {
        var _a, _b;
        if (this.infraNodusSideView && this.infraNodusSideView.filePath)
          return;
        const filePath = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
        const activeLeaf = (_b = this.app.workspace.getActiveViewOfType(import_obsidian18.FileView)) == null ? void 0 : _b.leaf;
        if (!filePath)
          return;
        if (!this.infraNodusSideView)
          return;
        this.infraNodusSideView.reloadGraph(
          { filePath, leaf: activeLeaf },
          false
        );
      }, 1e3);
      const app2 = this.app;
      const _parentThis = this;
      function addGraphButton(containerEl) {
        if (containerEl.querySelector(`.${LEAF_VIEW_BUTTON_CLASS}`)) {
          return;
        }
        const viewActionsContainer = containerEl.querySelector(".view-actions");
        if (!viewActionsContainer)
          return;
        const button = document.createElement("button");
        button.classList.add(
          "clickable-icon",
          "view-action",
          LEAF_VIEW_BUTTON_CLASS
        );
        button.addEventListener("click", async () => {
          var _a, _b;
          if (currentPlatform8 === "desktop") {
            const isHidden = graphContainerSidebarIsHidden();
            if (isHidden) {
              openGraphSideView(app2);
              return;
            }
          }
          const wks = app2.workspace;
          const filePath = (_a = wks.getActiveFile()) == null ? void 0 : _a.path;
          const activeLeaf = (_b = wks.getActiveViewOfType(import_obsidian18.FileView)) == null ? void 0 : _b.leaf;
          if (!filePath)
            return;
          try {
            const abstractFile = app2.vault.getAbstractFileByPath(filePath);
            if (!(abstractFile instanceof import_obsidian18.TFile))
              return;
            new import_obsidian18.Notice("Opening Graph...");
            await focusOrOpenGraphTab({ app: app2, filePath });
          } catch (e) {
            if (e.message)
              new import_obsidian18.Notice("Error: " + e.message);
          }
        });
        viewActionsContainer.prepend(button);
        (0, import_obsidian18.setIcon)(button, "infranodus-icon");
      }
      this.app.workspace.iterateAllLeaves((leaf) => {
        if (!(leaf.view instanceof import_obsidian18.MarkdownView))
          return;
        if (!leaf.view.file)
          return;
        const viewType = leaf == null ? void 0 : leaf.view.getViewType();
        if (viewType !== "markdown")
          return;
        addGraphButton(leaf.view.containerEl);
      });
      this.registerEvent(
        this.app.workspace.on("active-leaf-change", (leaf) => {
          if (!leaf)
            return;
          if (!(leaf.view instanceof import_obsidian18.MarkdownView))
            return;
          if (!leaf.view.file)
            return;
          const viewType = leaf == null ? void 0 : leaf.view.getViewType();
          if (viewType !== "markdown")
            return;
          const containerEl = leaf.view.containerEl;
          addGraphButton(containerEl);
        })
      );
      this.registerEvent(
        this.app.workspace.on(
          // @ts-ignore
          "search:results-menu",
          (menu, result) => {
            menu.addItem((item) => {
              item.setTitle(
                "Visualize search snippets with InfraNodus graph"
              ).setIcon("infranodus-icon").onClick(async () => {
                const searchResults = await extractObsidianSearchResults(
                  this.app
                );
                let searchQuery = "";
                const currentContent = searchResults == null ? void 0 : searchResults.map((result2) => {
                  searchQuery = result2.searchQuery;
                  return result2.snippetsFound.join(
                    "\n"
                  );
                }).join("\n\n");
                this.openPageInGraph({
                  contentString: currentContent,
                  sourcePath: ` search result snippets for query: "${searchQuery}"`
                });
              });
            });
            menu.addItem((item) => {
              item.setTitle(
                "Visualize all the pages found with InfraNodus graph"
              ).setIcon("infranodus-icon").onClick(async () => {
                const searchResults = await extractObsidianSearchResults(
                  this.app
                );
                let searchQuery = "";
                const currentContent = searchResults == null ? void 0 : searchResults.map((result2) => {
                  searchQuery = result2.searchQuery;
                  return result2.content;
                }).join("\n\n");
                this.openPageInGraph({
                  contentString: currentContent,
                  sourcePath: ` pages for search query: "${searchQuery}"`
                });
              });
            });
          }
        )
      );
    });
  }
  async loadBookmarksContextMenu() {
    var _a;
    const bookmarksPlugin = this.app.internalPlugins.plugins.bookmarks;
    if (!(bookmarksPlugin == null ? void 0 : bookmarksPlugin.enabled)) {
      await (bookmarksPlugin == null ? void 0 : bookmarksPlugin.enable());
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    const leaves = this.app.workspace.getLeavesOfType("bookmarks");
    if (!leaves || leaves.length === 0) {
      return;
    }
    const leaf = leaves[0];
    const view = leaf.view;
    if (!view) {
      return;
    }
    const bookmarkItems = (_a = view.plugin) == null ? void 0 : _a.items;
    if (!bookmarkItems) {
      return;
    }
    const bookmarkItemsToUse = {};
    bookmarkItems.forEach((bookmarkItem, index) => {
      if (bookmarkItem.type == "group") {
        if (!bookmarkItemsToUse["group"]) {
          bookmarkItemsToUse["group"] = bookmarkItem;
        }
      }
      if (bookmarkItem.type == "file") {
        if (!bookmarkItemsToUse["file"]) {
          bookmarkItemsToUse["file"] = bookmarkItem;
        }
      }
    });
    Object.keys(bookmarkItemsToUse).forEach((key) => {
      const bookmarkItemToUse = bookmarkItemsToUse[key];
      const dom = view.getItemDom(bookmarkItemToUse);
      const domProto = Object.getPrototypeOf(dom);
      const originalOnContextMenu = domProto.onContextMenu;
      const self2 = this;
      if (domProto._hasContextMenu)
        return;
      domProto.onContextMenu = function(evt) {
        domProto._hasContextMenu = true;
        const originalShowAtMouseEvent = import_obsidian18.Menu.prototype.showAtMouseEvent;
        import_obsidian18.Menu.prototype.showAtMouseEvent = function(evt2) {
          self2.app.workspace.trigger("bookmarks:menu", {
            menu: this,
            type: bookmarkItemToUse.type,
            groupTitle: bookmarkItemToUse.type == "group" ? bookmarkItemToUse.title : ""
          });
          originalShowAtMouseEvent.call(this, evt2);
        };
        try {
          originalOnContextMenu.call(this, evt);
        } finally {
          import_obsidian18.Menu.prototype.showAtMouseEvent = originalShowAtMouseEvent;
        }
      };
    });
    bookmarksPlugin.disable();
    await bookmarksPlugin.enable();
  }
  loadContextMenu() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Open in InfraNodus Graph").setIcon("infranodus-icon").onClick(async () => {
            this.openPageInGraph({ file });
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        menu.addItem((item) => {
          item.setTitle("Open in InfraNodus Graph").setIcon("infranodus-icon").onClick(async () => {
            if (!files || files.length === 0) {
              new import_obsidian18.Notice(
                "No files selected, so there's nothing to process."
              );
              return;
            }
            const contentToAnalyze = [];
            const fileNames = [];
            for (const file of files) {
              if (file instanceof import_obsidian18.TFile) {
                const content = await this.app.vault.cachedRead(file);
                fileNames.push(file.name);
                contentToAnalyze.push(content);
              }
            }
            if (contentToAnalyze.length === 0) {
              new import_obsidian18.Notice(
                "Could not extract any content from files."
              );
              return;
            }
            this.openPageInGraph({
              contentString: contentToAnalyze.join("\n\n"),
              sourcePath: ` selected files: ${fileNames.length <= 2 ? fileNames.join(" and ") : fileNames.slice(0, 3).join(", ") + " and " + (fileNames.length - 2) + " more"}`
            });
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on(
        // @ts-ignore
        "bookmarks:menu",
        // @ts-ignore
        ({ menu, type, groupTitle }) => {
          menu.addItem((item) => {
            item.setTitle("Open in InfraNodus Graph").setIcon("infranodus-icon").onClick(async () => {
              const leaf = this.app.workspace.getLeavesOfType(
                "bookmarks"
              )[0];
              if (!leaf) {
                new import_obsidian18.Notice(
                  "Bookmarks Plugin is not initialized"
                );
                return;
              }
              const view = leaf.view;
              const bookmarkItems = view.plugin.items;
              const fileItems = [];
              bookmarkItems.forEach((bookmarkItem) => {
                if (bookmarkItem.type == "file" && type == "file")
                  fileItems.push(bookmarkItem);
                if (bookmarkItem.type == "group") {
                  if (type == "group" && groupTitle == bookmarkItem.title || type == "file") {
                    bookmarkItem.items.forEach(
                      (item2) => {
                        if (item2.type == "file")
                          fileItems.push(item2);
                      }
                    );
                  }
                }
              });
              const selectedArray = [];
              fileItems.forEach(
                (fileItem, index) => {
                  if (type == "group") {
                    selectedArray.push(index);
                    return;
                  }
                  const dom = view.getItemDom(fileItem);
                  const domEl = dom.el;
                  const hasSelectedChild = domEl.querySelector(
                    "div.is-selected"
                  ) !== null;
                  const hasActiveChild = domEl.querySelector(
                    "div.is-active"
                  ) !== null;
                  if (hasSelectedChild || hasActiveChild) {
                    selectedArray.push(index);
                  }
                }
              );
              const selectedFiles = selectedArray.map(
                (index) => fileItems[index]
              );
              const fileNames = [];
              const contentToAnalyze = [];
              for (const selectedFile of selectedFiles) {
                const file = this.app.vault.getAbstractFileByPath(
                  selectedFile.path
                );
                const content = await this.app.vault.cachedRead(file);
                fileNames.push(file.name);
                contentToAnalyze.push(content);
              }
              if (contentToAnalyze.length === 0) {
                new import_obsidian18.Notice(
                  "Could not extract any content from files."
                );
                return;
              }
              const pathPrefix = type == "group" ? `group (${groupTitle})` : "files";
              this.openPageInGraph({
                contentString: contentToAnalyze.join("\n\n"),
                sourcePath: ` selected ${pathPrefix}: ${fileNames.length <= 2 ? fileNames.join(" and ") : fileNames.slice(0, 3).join(", ") + " and " + (fileNames.length - 2) + " more"}`
              });
            });
          });
        }
      )
    );
  }
  onunload() {
    document.removeEventListener(
      EVENT_SAVE_SETTINGS,
      this.onSettingsSaveEvent
    );
    unObserveAll();
    const buttons = document.querySelectorAll(`.${LEAF_VIEW_BUTTON_CLASS}`);
    buttons.forEach((button) => button.remove());
  }
  async loadSettings() {
    var _a;
    const settings = (_a = await this.loadData()) != null ? _a : {};
    Object.assign(this.settings, settings);
    Object.assign(SETTINGS, this.settings);
  }
  async saveSettings(settings) {
    Object.assign(this.settings, settings);
    Object.assign(SETTINGS, this.settings);
    await this.saveData(this.settings);
  }
  async openPageInGraph({
    file,
    contentString,
    sourcePath
  }) {
    var _a;
    new import_obsidian18.Notice("Generating InfraNodus Graph...");
    const currentPlatform8 = import_obsidian18.Platform.isMobileApp || import_obsidian18.Platform.isMobile ? "mobile" : "desktop";
    const plat = currentPlatform8;
    if (plat === "desktop") {
      await openGraphSideView(this.app);
      const currentLeaf = this.app.workspace.getLeavesOfType(
        INFRANODUS_GRAPH_VIEW_TYPE
      );
      const graphView = (_a = currentLeaf[0]) == null ? void 0 : _a.view;
      if (!graphView) {
        return;
      }
      graphView.reloadGraph({
        leaf: this.app.workspace.getLeaf(),
        filePath: file ? file.path : "",
        contentString,
        sourcePath
      });
    }
    if (plat === "mobile") {
      await focusOrOpenGraphTab({
        app: this.app,
        filePath: file == null ? void 0 : file.path,
        contentString
      });
    }
  }
};
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/


/* nosourcemap */